󱀘 ; Python "class"
⨡ ; Python "import"
⮂ ; Python "yield"
↪ ; Python "return"
⮌ ; Python "from"
↺ ; Python "continue"
⇥ ; Python "break"
➰ ; Python "while"
∀ ; Python "for"
⠤ ; Python "*" (For vargs)
⠶ ; Python "**" (For kargs)
¿ ; Python "if"
⸘ ; Python "elif"
¡ ; Python "else"
󰆴 ; Python "del"

⭜ ; ternary if
    "x ⭜ y ⭝ z" ; y if x else z
    "x ⭜ y" ; y if x else □
⭝ ; ternary else

⬅ ; push right into left (Strongest)
➡ ; push left into right (Strongest)
← ; push right into left (Medium)
⥉ ; swap right and left (Medium)
→ ; push left into right (Medium)
⭠ ; push right into left (Weakest)
⭢ ; push left into right (Weakest)

≔ ; Assign to left
≕ ; Assign to right
󷸉 ; Assign to left, return previous value
󷸎 ; Assign to right, return previous value
󷸊 ; Assign to left, foward value
󷸌 ; Assign to right, foward value
󷸋 ; Assign to left, foward value, return previous value
󷸍 ; Assign to right, foward value, return previous value

󰮈 ; signal delete element from iteration
    Many iteration operators disgard values if their operand function returns this.
    "[1,2,3,4,5]ᐵ>2⭜⟞⭝󰮈ᐸ" ⟶ [3,4,5]
    "[0,1,2,3,4,5,6]󰈲􍯏􊽮󷺹<4⭜✓⭝⟞>4⭜󰮈" ⟶ [0,1,4,9,4]
    󰤱˜ docs
𝗙 ; check if function
𝗜 ; check if iterable
𝗛 ; check if hashable, if so, return hashed value
􋐳 ; cos
    Function, Not an operator (yet...?)
􋐲 ; sin
    Function, Not an operator (yet...?)
􋐴 ; tan
    Function, Not an operator (yet...?)
􋑯 ; log
    Function, Not an operator (yet...?)
✓ ; true
ⴳ ; truthy function that always returns True
✗ ; false
ⴴ ; falsey function that always returns False
□ ; none
ᐦ ; empty string
∞ ; infinity
î ; imaginary unit
ℇ ; euler's number
τ ; tau
π ; ½τ
󷺍 ; ½π
󷺎 ; ½󷺍
󷺏 ; ½󷺎

𝔸 ; λ vargs
𝕂 ; λ kargs
𝓐 ; whisker vargs
𝓚 ; whisker kargs
⬤ ; dummy variable for currying
    See 

󰲡 ; λ function of x
󰲣 ; λ function of x,y
󰲥 ; λ function of x,y,z
󰲧 ; λ function of x,y,z,w
󰲩 ; λ function of x,y,z,w,v
󰲫 ; λ function of x,y,z,w,v,u
󰅂 ; close λ function

ᐳ ; left whisker no args
ᐸ ; right whisker no args
ᑀ ; left whisker apply, insert
ᑅ ; right whisker apply, insert
ᐵ ; left whisker apply to elt's, insert
ᑈ ; right whisker apply to elt's, insert
󷺹 ; left whisker function, insert
󷺽 ; right whisker function, insert
󷺺 ; left whisker function on elt's, insert
󷺾 ; right whisker function on elt's, insert
ᐒ ; left whisker apply, no insert
ᐘ ; right whisker apply, no insert
ᐖ ; left whisker apply to elt's, no insert
ᐛ ; right whisker apply to elt's, no insert
󷺻 ; left whisker function, no insert
󷺿 ; right whisker function, no insert
󷺼 ; left whisker function on elt's, no insert
󷻀 ; right whisker function on elt's, no insert
⟞ ; left-tack arg of left whisker
⟝ ; right-tack arg of right whisker

𝑒 ; Exception
𝑜 ; object
𝑑 ; dict
𝑏 ; bool
𝑙 ; list
𝑡 ; tuple
𝑠 ; set
ᔐ ; str
𝑖 ; int
𝑓 ; float
𝑦 ; bytes

´ ; neutralize operator
    Forces operator to act as regular variable
    i.e. "[1,2,3] ⨝ ⋅´" can parse fine but "[1,2,3] ⨝ ⋅" fails
꜠ ; duplicate operator arguments
    Forces binary operator to be unary, duplicating operands.
    "5+꜠" ⟶ 10
    "5+꜠+2" ⟶ 12
ᵜ ; swap operator arguments
    "2-ᵜ5" ⟶ 3
≺ ; operator prefix binary on list elements
    Forces binary operator to be unary, splats out operand.
    "[1,5]≺+" ⟶ 6
ᔨ ; correspondence modifier
    Indicates operator should indicate "where" it happens, sometimes called "select".
    "[5,2,3,0,0,1]󰈲ᔨ󷺹>1" ⟶ [0, 1, 2]
    "[5,2,4,6,1,1]𝌂ᔨ󷺹%2" ⟶ [[0], [1, 2, 3], [4, 5]]
    󰤱˜ docs

⟨ ; begin ugex
⟩ ; close ugex
⍮ ; ugex sep
    󰤱 docs
󷸴 ; ugex or
    󰤱 docs
⍈ ; ugex apply
    󰤱 docs

‹ ; begin magic string
› ; close magic string
⟦ ; begin magic string sub-expr
⟧ ; close magic string sub-expr

𝗻 ; newline character
𝗿 ; carriage return character
𝘀 ; space character
𝘁 ; tab character

␛ ; escape character in string
  ; magic blue separator
  ; magic yellow separator
