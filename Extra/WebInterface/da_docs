󱀘 ; Python "class"
⨡ ; Python "import"
⮂ ; Python "yield"
↪ ; Python "return"
⮌ ; Python "from"
↺ ; Python "continue"
⇥ ; Python "break"
➰ ; Python "while"
∀ ; Python "for"
⠤ ; Python "*" (For vargs)
⠶ ; Python "**" (For kargs)
¿ ; Python "if"
⸘ ; Python "elif"
¡ ; Python "else"
󰆴 ; Python "del"

⭜ ; ternary if
    "x ⭜ y ⭝ z" ; y if x else z
    "x ⭜ y" ; y if x else □
⭝ ; ternary else

⬅ ; push right into left (Strongest)
➡ ; push left into right (Strongest)
← ; push right into left (Medium)
⥉ ; swap right and left (Medium)
→ ; push left into right (Medium)
⭠ ; push right into left (Weakest)
⭢ ; push left into right (Weakest)

≔ ; Assign to left
≕ ; Assign to right
󷸉 ; Assign to left, return previous value
󷸎 ; Assign to right, return previous value
󷸊 ; Assign to left, foward value
󷸌 ; Assign to right, foward value
󷸋 ; Assign to left, foward value, return previous value
󷸍 ; Assign to right, foward value, return previous value

⨳ ; Assertion
    "𝑜 ⨳" = "⨳ 𝑜" ⟶ Asserts 𝑜 is truthy
    "𝑜₁ ⨳ 𝑜₂" ⟶ Asserts 𝑜₁ is truthy, puts 𝑜₂ in error

∨ ; OR (short circuits)
⩔ ; OR (doesn't short circuit)
󷺥 ; NOR (short circuits)
󷺫 ; NOR (doesn't short circuit)
󷺤 ; XOR
󷺦 ; NXOR

∧ ; AND (short circuits)
⩓ ; AND (doesn't short circuit)
󷺒 ; NAND (short circuits)
󷺬 ; NAND (doesn't short circuit)

≡ ; equals
    Works similar to python, taking certain conveniences i.e. 0 as a float equals 0 as an int
󷷼 ; diamond equals
    󷹇 Requested by Michael for future advanced math things
≠ ; not equal
≤ ; less than or equal to
≥ ; greater than or equal to
< ; less than
> ; greater than
∈ ; element of right
    𝔬 ∈ 𝗜
    "2∈{1,2,3}" ⟶ True
    "5∈{1}" ⟶ False
    "␛a ∈ ‹hia›" ⟶ True
    "5 ∈ ‹some string›" ⟶ False
∉ ; not element of right
∋ ; element of left
∌ ; not element of left
∣ ; divides
∤ ; does not divide
⊂ ; subset of right
    𝗜 ⊂ 𝗜
    Works on non-set objects as well
⊃ ; subset of left
⊊ ; subset of not equal to right
    𝗜 ⊊ 𝗜
    Works on non-set objects as well
⊋ ; subset of not equal to left
⊄ ; not subset of right
⊅ ; not subset of left

ᴍ ; map
    𝗜 ᴍ 𝗙
        Maps an iterable with a function
        "[‹hi›, ‹there›] ᴍ 🃌" ⟶ [2, 5]
    ᴍ􋀐,ᴍ􋔛
        n≥0: Controls degree of the map, i.e.
            "[[␛a, ‹bc›],[‹def›, ‹bob›]]" ᴍ² 🃌 ⟶ [[1,2],[3,3]]
        n=∞: Unbounded degree
        n<0: Kinda weird, but generally backwards from ∞
            ["hi", [[["egg"]]]] ᴍ􍧱 🃌 ≡ [2, [[[3]]]]
            󷹇 󷰾 would map the characters in those strings
    ᴍᴷ,ᴍⱽ,ᴍᴰ
        Similar to above, but a dict:dict mapping
        K: keys  , Modify keys only
        V: values, Modify values only
        D: dict  , Both keys and values
        󷹇 the function still expects one value which will be the [key, value] list
        󷹇 use ꟿ for a function with two args
    󷹇 Supports 󰮈
ꟿ ; starmap
    𝗜 ꟿ 𝗙
    Map but instead of calling the function directly it unpacks the arg
    "[[1,2],[3,4]] ꟿ +" ⟶ [3,7]
    󷹇 Supports 󰮈
 ; threadmap
    𝗜  𝗙
    Same as map but uses multiple threads.
    The number of threads defaults to the number of CPU threads.
ſ ; fold
    𝗜 ſ 𝗙
    The left-to-right classic fold.
        "[1,2,3,4] ſ +" ⟶ 10
    ſ􋉑: 𝕏 is the starting value/default
        "[1,2,3,4] ſ⁵ +" ⟶ 15
        "[] ſ⁵ +" ⟶ 5
Ϝ ; accumulate
    𝗜 Ϝ 𝗙
    fold, except returns the intermediate values
        "[1,2,3,4] Ϝ +" ⟶ [1,3,6,10]
⨁ ; sum
    𝗜 ⨁ 𝑜􊽨
    fold over left with +, with optional default starting value
⨀ ; product
    𝗜 ⨀ 𝑜􊽨
    fold over left with ⋅, with optional default starting value
󰈲 ; filter positive
    𝗜 󰈲
        filter left for truthyness
        "[0,1,✗,✓] 󰈲" ⟶ [1,✓]
    𝗜 󰈲 𝗙
        filter left for truthyness under right
        "[0,1,2,3] 󰈲 󷺹>1ᐸ" ⟶ [2,3]
    𝗜 󰈲􋊧 𝗙
        conditional map, apply mod to elm if right true
        "[0,1,2,3] 󰈲􍈽 󷺹>1ᐸ" ⟶ [0,1,󷰿,󷱀]
        󷹇 if modifier is not a 𝗙 it becomes a replcaement value
    𝗜 󰈲􋊧􌥡 𝑜
        same as previous but right func is equality check on 𝑜
    󷹇 Supports ᔨ and 󰮈
󰈳 ; filter negative
    󰈲 but condition is negated
    󷹇 Supports ᔨ and 󰮈
󰒼 ; sort ascending
    𝗜 󰒼
        sorts data
    𝗜 󰒼 𝗙
        sorts data by right arg
        󷹇 right art is function of 1 variable
    󷹇 Supports ᔨ and 󰮈
󰒽 ; sort decending
    Reversed version of 󰒼
    󷹇 Supports ᔨ and 󰮈
 ; group by
    𝗜 
        group into dictionary with keys by truthyness
    𝗜  𝗙
        group into dictionary with keys defined by right arg
    󰀒: return list of values, dropping keys
    ᴮ: like 󰀒, except groups are only false/true (& are included), so
        "[1,0,5] ᴮ" ⟶ [[0],[1,5]]
        "[1,0,5] ᴮ 󷺹>1" ⟶ [[0,1],[5]]
        "[1,0,5] ᴮ 󷺹<0" ⟶ [[],[1,0,5]]
    󷹇 Supports 󰮈
ᙡ ; window, with middle, with sides
    󰤱 docs
ᙧ ; window, with middle, no sides
    󰤱 docs
ᙎ ; window, no middle, with sides
    󰤱 docs
ᗢ ; window, no middle, no sides
    󰤱 docs
󱖔 ; modifier as operator
    Binary/(indistinguishable)unary
    Calls modifier with one or two vars depending on how the operator is used. Good for treating a function as an operator
    𝑜􊽨 󱖔􋊧 𝑜􊽨
    "2 󱖔􍯏􊽮⁺􍯋 3" ⟶ 7
    "2 󱖔􍯏􊽮" ⟶ 4
    "󱖔􍯏􊽮 2" ⟶ 4
ᖘ ; "candycane": apply to select
    𝗜≕𝕏 ᖘ􊽺 ꬶ
    calls ƒ(𝕏) to get list of indicies
    ꬶ(ƒ(𝕏)) manipulates the index list
    ᖘ will then place ꬶ(ƒ(𝕏)) into the idxs found via ƒ(𝕏)
    󰤱˜ docs

ᐹ ; left is type of right / get type of
    Binary/(indistinguishable)unary
    ᐹ 𝑜
        Get type of 𝑜
        "ᐹ 4" ⟶ 𝑖
    𝑜 ᐹ 𝑜
        Check if left is instance of right
        󷹇 if right is not a type, we get the type of it first
        󷹇 𝗙 𝗜 𝗛 acts like types
        "2 ᐹ 𝑖" ⟶ True
        "2 ᐹ 5" ⟶ True
        "2 ᐹ ᔐ" ⟶ False
        "‹h› ᐹ 𝗜" ⟶ True
ᐴ ; right is type of left / get type of
󷹵 ; left is not type of right
󷹴 ; right is not type of left
󱑼 ; zip (left aligned)
    Binary/(indistinguishable)unary
    𝗜 󱑼 𝗜
        zips elements at cooresponding indicies
        "[1,2] 󷹅 [1,2,3]" ⟶ [[1,1],[2,2]]
    𝗜 󱑼
        arg is iterables of iterables that will be zipped
        "[[1,2,3],[5,2],[0,󷰾]] 󱑼" ⟶ [[1,5,0],[2,2,󷰾]]
    󱑼􋇜 fill with default value
        "[1,2] 󷹅⁹ [1,2,3]" ⟶ [[1,1,9],[2,2,3]]
󷹅 ; zip (left aligned)
    same as 󱑼 but elements are aligned towards the right
    "[1,2] 󷹅 [1,2,3]" ⟶ [[1,2],[2,3]]
ᕋ ; modify section
    "[1,2,3] ᕋ¹ 9" ⟶ [1,9,3]
    "[1,2,3] ᕋ¹" ⟶ [1,3]
    "[1,2,3] ᕋ¹􊽧" ⟶ [1]
    "[1,2,3] ᕋ􊽧¹ [5,2,7]" ⟶ [5,2,7,2,3]
    󰤱˜ docs

| ; bitwise or

^ ; bitwise xor

& ; bitwise and

⪡ ; bitshift left / circle arr left
    Binary/(indistinguishable)unary
    𝑖 ⪡ 𝑖
        bitshift left by right
    𝗜 ⪡ 𝑖
        rotate array list left
        "[5,6,7] ⪡ 2" ⟶ [7,5,6]
    󷹇 unary case has right arg equal to 1
        "1 ⪡" ⟶ 2
        "␛a␛b ⪡" ⟶ ␛b␛a
⪢ ; bitshift right / circle arr right
    ⪡ but opposite direction

∓ ; minus plus
    𝑜∓𝑜􊽨
    "∓5" ⟶ [-5,5]
    "1∓5" ⟶ [-6,4]
± ; plus minus
    𝑜±𝑜􊽨
    "±5" ⟶ [5,-5]
    "1±5" ⟶ [4,-6]
    
+ ; add
- ; subtract
󷷶 ; diamond add
    󷹇 Requested by Michael for future advanced math things
󷷻 ; diamond subtract
    󷹇 Requested by Michael for future advanced math things

… ; range between ints

∘ ; call left with right
    ƒ∘x = ƒ(x)
    ƒ∘³x = ƒ(x,x,x)
    󰤱˜ docs
○ ; compose functions with balanced args, overflow right
    ƒ○ ꬶ ≈ 󰲡ƒ(ꬶ(x))
    ƒ○²ꬶ ≈ 󰲣ƒ(ꬶ(x), ꬶ(y))
    󰤱ꜝ docs
⍜ ; compose functions with balanced args, overflow left
    󰤱 docs
󰬫 ; compose functions, overflow extra args to right
    󰤱 docs
󰬩 ; compose functions, overflow extra args to left
    󰤱 docs
󱖚 ; 󰤱, NotImplemented
󱖘 ; 󰤱, NotImplemented
󷷹 ; diamond compose
    󷹇 Requested by Michael for future advanced math things
 ; curry function
    ꬶ = ƒ(1,⬤,3,y=⬤,z=2)
    ꬶ(3,9) ≡ ƒ(1,3,3,y=9,z=2)
    󰤱˜ docs
⊚ ; loop
    󰤱 docs
⍟ ; loop returning all iterations except final
    󰤱 docs
⊛ ; loop returning all iterations
    Same as ⍟ but includes the iteration that failed check
⊜ ; loop until fixed point
    󰤱 docs
🟕 ; find cycle
    󰤱 docs
🟖 ; find cycle, include prefix
    Same as 🟕 but does not trim out the starting part of the cycle
 ; error raiser / error or-er
    󰤱 docs
󰔶 ; return arg / retry with right
    󰤱 docs
 ; return exception / custom error handle
    󰤱 docs
ᣆ ; conditional function application
    󰤱 docs

◄ ; return left arg
    "1◄2" ⟶ 1
► ; return right arg
    "1►2" ⟶ 2
⋄ ; join into list
    "1⋄2" ⟶ [1,2]
    "1⋄2⋄9" ⟶ [1,2,9]
    󰤱 make this less janky

∪ ; union
    𝑠 ∪ 𝗜 = x|𝑠(right)
    𝑙 ∪ 𝗜 = [⠤x,right∖x]
    󰤱˜ docs

∩ ; intesection
    𝑠 ∩ 𝗜 = x∩𝑠(right)
    𝗜 ∩ 𝗜 = left󰈲󷺹∈right
    󰤱˜ docs

∖ ; set minus
    𝑠 ∖ 𝗜 = x-𝑠(right)
    𝗜 ∖ 𝗜 = left󰈳󷺹∈right
    󰤱˜ docs
⨉ ; cross product
    "‹ab›⨉‹de›" ≡ "[‹ab›,‹de›]⨉" ⟶ [['a', 'd'], ['a', 'e'], ['b', 'd'], ['b', 'e']]
    "‹ab›⨉²" ⟶ [['a', 'a'], ['a', 'b'], ['b', 'a'], ['b', 'b']]
    󰤱˜ docs
⊞ ; table product
    "‹ab›⊞‹de›" ⟶ [[['a', 'd'], ['a', 'e']], [['b', 'd'], ['b', 'e']]]
    "‹ab›⊞²" ⟶ [[['a', 'a'], ['a', 'b']], [['b', 'a'], ['b', 'b']]]
    󰤱˜ docs

≅ ; is exactly the same object
    Works same as in python
≇ ; is not exactly the same object
~ ; bitwise invert
⋅ ; multiply
÷ ; divide
⹏ ; integer divide
% ; modulo
󷷷 ; diamond multiply
    󷹇 Requested by Michael for future advanced math things
󷷸 ; diamond divide
    󷹇 Requested by Michael for future advanced math things
√ ; root
    Prefix unary
    "√5"  ⟶ 5􊽲
    "√³5" ⟶ 5􋀞
    "√󰁛5" ⟶ 5󰁛􍩯
؆ ; roots
    Prefix unary
    "؆25" ⟶ [󷱂, 5]
    "√³1" ⟶ 3ʳᵈ roots of unity
! ; factorial
    Suffix unary
    "5!" ⟶ 120
    "0!" ⟶ 1
    󰤱 generalize to gamma function
⋀ ; all
    𝗜 ⋀
    returns first falsy value or last value
    󷹇 ⋀􋇜 sets default for empty iterable (✓ if excluded)
⋁ ; any
    𝗜 ⋁
    returns first truthy value or last value
    󷹇 ⋁􋇜 sets default for empty iterable (✗ if excluded)
⫰ ; absolute value / uppercase
    Both-sides-indistinguishable unary
    󷱂⫰ ≡ 5⫰ ≡ 5
    "ABc"⫰ = "ABC"
⫯ ; negative absolute value / lowercase
    Both-sides-indistinguishable unary
    󷱂⫯ ≡ 5⫯ ≡ ¯5
    "ABc"⫯ ≡ "abc"
󷹒 ; negate / swap case
    Both-sides-indistinguishable unary
    󷱂󷹒 ≡ 5
    5󷹒 ≡ 󷱂
    "aBc"󷹒 ≡ "AbC"
⨝ ; join
    turns into string if right arg is string
    "[1,2,3] ⨝ 𝘀" ⟶ "1 2 3"
    "[1,2,3] ⨝ 0" ⟶ [1,0,2,0,3]
    "[1,2,3] ⨝ ⋅´" ⟶ [1,2,2,6,3]
    󰤱 docs
⟕ ; join include left
    󰤱 docs
⟖ ; join include right
    󰤱 docs
⟗ ; join include left and right
    󰤱 docs
󷹕 ; before
    󰤱 docs
󷹓 ; before and including
    󰤱 docs
󰑅 ; first
    󰤱 docs
󷹔 ; after and including
    󰤱 docs
󷹖 ; after
    󰤱 docs
󷸹 ; range excluding end
    󰤱 docs
󷸸 ; range excluding start and end
    󰤱 docs
󷸻 ; range
    󰤱 docs
󷸺 ; range excluding start
    󰤱 docs
⤈ ; min
    𝗜 ⤈ 𝗙?󰻾
    min under right
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
⤉ ; max
    𝗜 ⤉ 𝗙?󰻾
    max under right
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
󷹄 ; constrain
    "low 󷹄ˣ high" or (low 󷹄 high)(x)
    Limits x to between low and high (inclusive)
    "0 󷹄³ 1" ⟶ 1
    "0 󷹄􍧟 1" ⟶ 0
    "0 󷹄􊽲 1" ⟶ ½
    󰤱˜ docs
⭥ ; iterable/number to indices
    Both-sides-indistinguishable unary 
    "‹hello›⭥" ⟶ [0,1,2,3,4]
    "5⭥"       ⟶ [0,1,2,3,4]
    [‹ab›, ‹cde›]⭥² ⟶ [(0,0),(0,1),(1,0),(1,1),(1,2)]
    "2⭥³" ⟶ [(0,0,0),(0,0,1),(0,1,0),(0,1,1),(1,0,0),(1,0,1),(1,1,0),(1,1,1)]
    󷹇 Negative modifier keeps original structure
    [‹ab›, ‹cde›]⭥􍧱 ⟶ [[(0,0),(0,1)], [(1,0),(1,1),(1,2)]]
    󰤱˜ docs
↨ ; enumerate (zip with index)
    Both-sides-indistinguishable unary
    𝕏↨ is identical to (𝕏⭥)󱑼𝕏
    ↨ⁿ􋁉􋀐 works just like ⭥ except the indicies are tupled with the values
    "[‹ab›,‹cd›]↨²" ⟶ [((0,0),'a'),((0,1),'b'),((1,0),'c'),((1,1),'d')]
    "[‹ab›,‹cd›]↨􍧱" ⟶ [[((0,0),'a'),((0,1),'b')],[((1,0),'c'),((1,1),'d')]]
    󰤱˜ docs
▢ ; round
    2.2▢ ≡ 2
    2.9▢ ≡ 3
    󰤱˜ docs [precision is superscript]
⬓ ; round down
    2.2⬓ ≡ 2
    2.9⬓ ≡ 2
    󰤱˜ docs
⬒ ; round up
    2.2⬒ ≡ 3
    2.9⬒ ≡ 3
    󰤱˜ docs
⍭ ; magic string split
    ᔐ ⍭ or ᔐ ⍭
    if " " is in arg:
        split by " " then by " "
        "‹a b c›⍭" ⟶ [[␛a],[␛b,␛c]]
        "‹x y›⍭"   ⟶ [[␛x],[␛y]]
    otherwise:
        split by just " "
        "‹x y›⍭"⟶ [␛x,␛y]
        "‹ y›⍭" ⟶ [ᐦ,␛y]
        "‹y›⍭"  ⟶ [␛y]
    󷹇 this makes use of two alternative space characters unless spcial highlighting is applied this is confusing
󰸵 ; pad left
    𝗜 󰸵ᵖᵃᵈ n
    "[1,2]󰸵3" ⟶ [False,1,2]
    "[1,2]󰸵⁹3" ⟶ [9,1,2]
    󰤱˜ docs
󰸷 ; pad right
    Like 󰸵 but pad on right
󷹌 ; split include all seperators
    󰤱 docs
󷹍 ; split include 1-per-consecutive seperators
    󰤱 docs
󷹎 ; split disregard seperators
    󰤱 docs
⬄ ; strip
    󰤱 Workings undetermined, may be removed
𝌂 ; partition
    Group consecutive by func
        "[1,󷰾,2,2,9,9]𝌂󰻾" ⟶ [[1],[-1],[2,2],[9,9]]
        "[1,󷰾,2,2,9,9]𝌂󷺹²" ⟶ [[1,-1],[2,2],[9,9]]
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
󰌷 ; chain iterables
    󰤱 docs
    󷹇 if left and right are both integers, we do integer concatination
       "5 󰌷 23" ⟶ 523
       "5 󰌷 󷱁" ⟶ -54
       "󷱁 󰌷 5" ⟶ -45
       "󷱀 󰌷 󷱁" ⟶ 34
ᴙ ; reverse
    𝗜 ᴙ = x﹕﹕􍨄
    󷹇 ᴙᴸ forces string as list
    󰤱˜ docs
󰛔 ; string replacement
    "find 󰛔ᵗᵃʳᵍᵉᵗ replace" or "(find 󰛔 replace)(target)"
    󰤱 docs
ᚤ ; first unique
    Keep only first found under right arg (default 󰻾)
        "[1,2,3,2,3,1,1,2,9]ᚤ" ⟶ [1,2,3,9]
        "[2,5,0,󷰿,0,󷱂,󷰾,1,7]ᚤ󷺹²" ⟶ [2,5,0,-1,7]
        "[1,2,3,2,3,1,1,2,9]ᚤ󷺹>2" ⟶ [1,3]
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
☾ ; print
    󰤱 docs
⛶ ; enlist arguments
    "2⛶" ⟶ [2]
    "2⛶⁵" ⟶ [2,2,2,2,2]
    󷹇 if negative then we enlist it multiple times
    "2⛶􍨅" ⟶ [[2]]
    "␛x⛶􍧟" ⟶ [[[[␛x]]]]
⍉ ; transpose
    Exactly the same as unary version of 󱑼
ⴵ ; sign of number
    "󷰿ⴵ"   ⟶ 󷰾
    "0ⴵ"   ⟶ 0
    "9.2ⴵ" ⟶ 1
🃌 ; cardinality/length
    𝔦 🃌
    Returns length of 𝔦
    "‹egg›🃌" ⟶ 3
    "[1,2]🃌" ⟶ 2
󷹝 ; str⟷int involution
    Gets ascii/unicode value(s) of string and vise versa
    󰤱 docs
󷹜 ; str to int / change base
    󰤱 docs
 ; random float
    low ⁿ high
    󰤱 docs
󱅏 ; random int
    low 󱅏ⁿ high
    󰤱 docs
 ; shuffle
    󰤱 docs
󰔛 ; sleep / call/loop function after delay
    󰤱 docs
󱫩 ; call/loop function after delay in thread
    󰤱 docs
󷸚 ; ℝ part of number
󷸛 ; î part of number
󷸙 ; ĵ part of number
󷸘 ; 󷺈 part of quaternion
󷸜 ; tuple of ℝ/î parts of number
󷸗 ; tuple of ℝ/ĵ parts of quaternion
󷸖 ; tuple of ℝ/󷺈 parts of quaternion
󷸕 ; tuple of ℝ/î/ĵ/󷺈 parts of quaternion

¬ ; not
    Negates, can be from either side
¯ ; negate
    Strictly prefix unary operator
    "¯5" ⟶ 󷱂

⌃ ; exponential
    "5⌃2" ⟶ 25
󷷺 ; diamond exponential
    󷹇 Requested by Michael for future advanced math things

 ; splat function
    ƒ ≈ 𝚲ƒ(⠤𝔸󰌷, ⠶𝕂)
    󰤱˜ docs
∾ ; reverse function args
    ∾ƒ ≈ 𝚲ƒ(⠤𝔸ᴙ, ⠶𝕂)
    󰤱˜ docs
    
 ; call function without args
    i.e. "f" is the same as "f()"
󷹁 ; invert function
    If object has __inverse__ property will call it w/ modifier as args
    ƒ󷹁􊽹: returns inverse multimap by computing ƒ(x)∀x∈Ɗ
    󰤱˜ docs

󰻾 ; identify
    󰻾􋇜
        function that always returns the modifier value
        "󰻾⁵(22)" ⟶ 5
    "󰻾(x)" ⟶ x
    "󰻾(x1,x2)" ⟶ x1
ℵ ; magic namespace: iterates by pairs
    "ℵ(hi=22, joe=10)ʰⁱ" ⟶ 22
    "ℵ²(x=22)ʰ" ⟶ 2
    "ℵ([1⋄4,2⋄6,6⋄󷰿])ᴍ󰻾" ⟶ [(1, 4), (2, 6), (6, -2)]
    󰤱˜ docs
ℶ ; magic namespace: iterates by values
    󰤱 docs
∅ ; empty set
    "∅" ⟶ 𝑠()
    "∅³" ⟶ [𝑠(), 𝑠(), 𝑠()]
⍁ ; empty list
    "⍁" ⟶ []
    "⍁³" ⟶ [[], [], []]
® ; roots of unity
    "®²" ⟶ ∓1
    "®(2)" ⟶ ∓1

󰮈 ; signal delete element from iteration
    Many iteration operators disgard values if their operand function returns this.
    "[1,2,3,4,5]ᐵ>2⭜⟞⭝󰮈ᐸ" ⟶ [3,4,5]
    "[0,1,2,3,4,5,6]󰈲􍯏􊽮󷺹<4⭜✓⭝⟞>4⭜󰮈" ⟶ [0,1,4,9,4]
    󰤱˜ docs
𝗙 ; check if function
𝗜 ; check if iterable
𝗛 ; check if hashable, if so, return hashed value
􋐳 ; cos
    Function, Not an operator (yet...?)
􋐲 ; sin
    Function, Not an operator (yet...?)
􋐴 ; tan
    Function, Not an operator (yet...?)
􋑯 ; log
    Function, Not an operator (yet...?)
✓ ; true
ⴳ ; truthy function that always returns True
✗ ; false
ⴴ ; falsey function that always returns False
□ ; none
ᐦ ; empty string
∞ ; infinity
î ; imaginary unit
ℇ ; euler's number
τ ; tau
π ; ½τ
󷺍 ; ½π
󷺎 ; ½󷺍
󷺏 ; ½󷺎

𝔸 ; λ vargs
𝕂 ; λ kargs
𝓐 ; whisker vargs
𝓚 ; whisker kargs
⬤ ; dummy variable for currying
    See 

󰲡 ; λ function of x
󰲣 ; λ function of x,y
󰲥 ; λ function of x,y,z
󰲧 ; λ function of x,y,z,w
󰲩 ; λ function of x,y,z,w,v
󰲫 ; λ function of x,y,z,w,v,u
󰅂 ; close λ function

ᐳ ; left whisker no args
ᐸ ; right whisker no args
ᑀ ; left whisker apply, insert
ᑅ ; right whisker apply, insert
ᐵ ; left whisker apply to elt's, insert
ᑈ ; right whisker apply to elt's, insert
󷺹 ; left whisker function, insert
󷺽 ; right whisker function, insert
󷺺 ; left whisker function on elt's, insert
󷺾 ; right whisker function on elt's, insert
ᐒ ; left whisker apply, no insert
ᐘ ; right whisker apply, no insert
ᐖ ; left whisker apply to elt's, no insert
ᐛ ; right whisker apply to elt's, no insert
󷺻 ; left whisker function, no insert
󷺿 ; right whisker function, no insert
󷺼 ; left whisker function on elt's, no insert
󷻀 ; right whisker function on elt's, no insert
⟞ ; left-tack arg of left whisker
⟝ ; right-tack arg of right whisker

𝑒 ; Exception
𝑜 ; object
𝑑 ; dict
𝑏 ; bool
𝑙 ; list
𝑡 ; tuple
𝑠 ; set
ᔐ ; str
𝑖 ; int
𝑓 ; float
𝑦 ; bytes

´ ; neutralize operator
    Forces operator to act as regular variable
    i.e. "[1,2,3] ⨝ ⋅´" can parse fine but "[1,2,3] ⨝ ⋅" fails
꜠ ; duplicate operator arguments
    Forces binary operator to be unary, duplicating operands.
    "5+꜠" ⟶ 10
    "5+꜠+2" ⟶ 12
ᵜ ; swap operator arguments
    "2-ᵜ5" ⟶ 3
≺ ; operator prefix binary on list elements
    Forces binary operator to be unary, splats out operand.
    "[1,5]≺+" ⟶ 6
ᔨ ; correspondence modifier
    Indicates operator should indicate "where" it happens, sometimes called "select".
    "[5,2,3,0,0,1]󰈲ᔨ󷺹>1" ⟶ [0, 1, 2]
    "[5,2,4,6,1,1]𝌂ᔨ󷺹%2" ⟶ [[0], [1, 2, 3], [4, 5]]
    󰤱˜ docs

⟨ ; begin ugex
⟩ ; close ugex
⍮ ; ugex sep
    󰤱 docs
󷸴 ; ugex or
    󰤱 docs
⍈ ; ugex apply
    󰤱 docs
󷹗 ; ugex push
    𝑜 󷹗: Pushes 𝑜 onto ugex stack
    𝑜 󷹗ⁿ: Pushes n copies of 𝑜 onto ugex stack
    𝗜 󷹗􋔛: Extends ugex stack by 𝗜
󷹘 ; ugex pop
    󷹘: Pops off last element from ugex stack
    󷹘ⁿ􋁉􋀉􋁗󰁸􋔛󰁹: Pops off last n elements from ugex stack
⍖ ; ugex peek
    Same as 󷹘 but does not remove from ugex stack

‹ ; begin magic string
› ; close magic string
⟦ ; begin magic string sub-expr
⟧ ; close magic string sub-expr

𝗻 ; newline character
𝗿 ; carriage return character
𝘀 ; space character
𝘁 ; tab character

␛ ; escape character in string
  ; magic blue separator
  ; magic yellow separator
