 partition pua
 sup/sub partitioning

𝔦𝔪𝔭∘␛s

cmsr = 󰋺(⠤‹composer xcompose_from_seqs symmap generate_compose›⍭)

⨡ json
⮌ platform ⨡ uname
⮌ random ⨡ randint, seed
seed∘uname₁

pua = 0x100000 ⋄ 0x10FFFD  we own this plane

puaΔ = pua₀ + randint(0, puaᴙ ≺- →⋅.9 ⥉ 𝑖)
o≔pua₀⋄puaΔ⋄pua₁ ᴍhex →►← ‹Offset: ⟦o₀⟧ ≤ ⟦o₁⟧ < ⟦o₂⟧›☾

pua_fold = 𝐩𝐝 / ‹PuaMaps›
lm≔{} →►← pua_maps_in ≔ 𝑙∘pua_fold.glob("*.json") ␛
            →ᴍ 󰲡json.load(x.open) ␛
                →ᴍᴷ󰲡x.split∘␛| ᴍ󰲡𝑖(x,16)󰅂 ⥉𝑡󰅂 ␛
                →.items ꟿ󰲣x₀…x₁ζy ꟿ⥌l,c↦
                (c≡lmₗ ⨳ ‹⟦c⟧→⟦l⟧←⟦lmₗ⟧›) ¿l∈lm¡ lmₗ≔c
ml = lm ꟿᴰ 󰲣(y,x)

⊢ pua_conseq(𝔡):  ᔐs to be together
    global lm, ml
    𝔡 󰈳= 󰲡x∈ml
    𝕏 = puaΔ-1
    ➰𝕏+=1:
        ¿¬𝕏 ≔ (I ≔ 𝔡⭥ᴍ󰲡𝕏+x) 󰑅 󰲡x∈lm󰅂: ⇥
    lm |= 𝑑←Iζ𝔡
    ml |= 𝑑←𝔡ζI
    ↪ lm, ml

to_ranges = lm↦[
        s ≔ lm 󰒼 → ₀,
       ⠤s ᙧ 0⋄1 ꟿ󰲣x+1≠y∧(x+1,y)󰅂 󰈲⟤ Σ(),
        s₋₁+1
    ] ᙧ¹ ꟿ󰲣((x,y), x…yᴍ󰲡lmₓ󰅂)󰅂 ⥉ 𝑑

⊢ save_pua():
    lms = to_ranges(lm) ꟿᴷ󰲣‹⟦hex(x)⟧|⟦hex(y)⟧›
    t = time⋅100 ⥉𝑖
    pua_maps_in ᴍ 󰲡x.rename(y ≔ pua_fold/‹Old/⟦t⟧_⟦x.name⟧›) ► ‹Moved "⟦x⟧"↦"⟦y⟧"›☾
    json.dump(lms, (d≔pua_fold/‹pua_log.json›)→.open∘␛w)
    ‹Wrote pua mapping to "⟦d⟧"›☾
    ↪ lms

get_codepoints = ⥌C, p↦
    c ≔ pua_conseq(L≔Cᴍ󰲡‹⟦p⟧_⟦x⟧›)₁ ␛
    →►← Cζ(Lζ←cᴍ󰲡x∈L∧cₓ󰅂󰈲) ⥉𝑑

⊢ get_new_chars(force_include, no_scale, multichars,
                ignore_scripts, special_symkeys):
    𝒞 = generate_compose(no_write=ⴳ)
    
    ℭ = 𝒞.items 󰈲󰲡x₁🃌≡1󰅂 ꟿ󰲣(y,x)󰅂 ⥉ 𝑑
    
    get_seq = 󰲡x∈ℭ∧ℭₓ ∨ x∈symmap∧x
    
    supsub = (ℭ ∪ special_symkeys) ∖ ignore_scripts 󰒼
    sub = get_codepoints(supsubᴍ󰲡x₀, "sub") ꟿᴰ󰲣(x, (⠤y, y₁∈ℭ∧ℭₓ ∨← ␛/⋅(1+←x∉special_symkeys)+get_seq∘x, x∉no_scale))
    sup = get_codepoints(supsubᴍ󰲡x₀, "sup") ꟿᴰ󰲣(x, (⠤y, y₁∈ℭ∧ℭₓ ∨← ␛\⋅(1+←x∉special_symkeys)+get_seq∘x, x∉no_scale))
    mul = get_codepoints(multichars, "mul") ꟿᴰ󰲣(x, (⠤y, y₁∈ℭ∧ℭₓ ∨← ⋀(K≔xᴍget_seq) ∧ (Kᴍ󰲡x+␛𝕊󰅂Σᐦ)))
    
    S = sub⋄sup⋄mul
    ↪ 𝒞 | 𝑑(S ᴍ 𝑑.items ᴍ 𝑙 ſ+ 󰈲󰲡x₁ ₂󰅂 ꟿ󰲣(y₂,(chr←y₁,y₀))), ⠤S