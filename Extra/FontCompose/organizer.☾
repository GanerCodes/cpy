 partition pua
 sup/sub partitioning

𝔦𝔪𝔭∘␛s
⨡ json
⮌ platform ⨡ uname
⮌ random ⨡ randint, seed
seed∘uname₁

pua = 0x100000 ⋄ 0x10FFFD  we own this plane

puaΔ = pua₀ + randint(0, puaᴙ ≺- →⋅.9 ⥉ 𝑖)
o≔pua₀⋄puaΔ⋄pua₁ ᴍhex →►← ‹Offset: ⟦o₀⟧ ≤ ⟦o₁⟧ < ⟦o₂⟧›☾

pua_fold = 𝐩𝐝 / ‹PuaMaps›
lm≔{} →►← pua_maps_in ≔ 𝑙∘pua_fold.glob("*.json") ␛
            →ᴍ 󰲡json.load(x.open) ␛
                →ᴍᴷ󰲡x.split∘␛| ᴍ󰲡𝑖(x,16)󰅂 ⥉𝑡󰅂 ␛
                →.items ꟿ󰲣x₀…x₁ζy ꟿ⥌l,c↦
                (c≡lmₗ ⨳ ‹⟦c⟧→⟦l⟧←⟦lmₗ⟧›) ¿l∈lm¡ lmₗ≔c
ml = lm ꟿᴰ 󰲣(y,x)

⊢ find_pua_spots(⠤strs):  ᔐs to be together
    global lm, ml
    ∀𝕤∈strs:
        𝕤 󰈳= 󰲡x∈ml
        𝕏 = puaΔ-1
        ➰𝕏+=1:
            ¿¬𝕏 ≔ (I ≔ 𝕤⭥ᴍ󰲡𝕏+x) 󰑅 󰲡x∈lm󰅂: ⇥
        lm |= 𝑑←Iζ𝕤
        ml |= 𝑑←𝕤ζI
    ↪ lm

to_ranges = lm↦[
        s ≔ lm 󰒼 → ₀,
       ⠤s ᙧ 0⋄1 ꟿ󰲣x+1≠y∧(x+1,y)󰅂 󰈲⟤ Σ(),
        s₋₁+1
    ] ᙧ¹ ꟿ󰲣((x,y), x…yᴍ󰲡lmₓ󰅂)󰅂 ⥉ 𝑑

⊢ save_pua():
    lms = to_ranges(lm) ꟿᴷ󰲣‹⟦hex(x)⟧|⟦hex(y)⟧›
    t = time⋅100 ⥉𝑖
    pua_maps_in ᴍ 󰲡x.rename(pua_fold / ‹Old› / ‹⟦t⟧_⟦x.name⟧›)
    json.dump(lms, pua_fold / ‹pua_log.json›→.open∘␛w)

t = find_pua_spots(["jope","bbb"])
save_pua


 create_script(c, m, )
     m ∈ s⋄p