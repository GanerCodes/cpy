 partition pua
 sup/sub partitioning

𝔦𝔪𝔭∘␛s

cmsr = 󰋺(⠤‹composer xcompose_from_seqs symmap generate_compose›⍭)

⨡ json
⮌ platform ⨡ uname
⮌ random ⨡ randint, seed
seed∘uname₁

pua = 0x100000 ⋄ 0x10FFFD  we own this plane

puaΔ = pua₀ + randint(0, puaᴙ ≺- →⋅.9 ⥉ 𝑖)
o≔pua₀⋄puaΔ⋄pua₁ ᴍhex →►← ‹Offset: ⟦o₀⟧ ≤ ⟦o₁⟧ < ⟦o₂⟧›☾

pua_fold = 𝐩𝐝 / ‹PuaMaps›
lm≔{} →►← pua_maps_in ≔ 𝑙∘pua_fold.glob("*.json") ␛
            →ᴍ 󰲡json.load(x.open) ␛
                →ꟿᴷ󰲡x.split∘␛| ᴍ󰲡𝑖(x,16)󰅂 ⥉𝑡󰅂 ␛
                →.items ꟿ󰲣x₀…x₁ζy ꟿ⥌l,c↦
                (c≡lmₗ ⨳ ‹⟦c⟧→⟦l⟧←⟦lmₗ⟧›) ¿l∈lm¡ lmₗ≔c
ml = lm ꟿᴰ 󰲣(y,x)

⊢ pua_single(𝔡):
    global puaΔ
    ¿𝔡∈ml: ↪ lm, ml
    puaΔ -= 1
    ➰puaΔ+=1:
        ¿puaΔ∉lm: ⇥
    lm[puaΔ], ml[𝔡] = 𝔡, puaΔ
    ↪ lm, ml

⊢ pua_conseq(𝔡):  ᔐs to be together
    global lm, ml
    𝔡 󰈳= 󰲡x∈ml
    𝕏 = puaΔ-1
    ➰𝕏+=1:
        ¿¬𝕏 ≔ (I ≔ 𝔡⭥ᴍ󰲡𝕏+x) 󰑅 󰲡x∈lm󰅂: ⇥
    lm |= 𝑑←Iζ𝔡
    ml |= 𝑑←𝔡ζI
    ↪ lm, ml

to_ranges = lm↦[
        s ≔ lm 󰒼 → ₀,
       ⠤s ᙧ 0⋄1 ꟿ󰲣x+1≠y∧(x+1,y)󰅂 󰈲⟤ Σ(),
        s₋₁+1
    ] ᙧ¹ ꟿ󰲣((x,y), x…yᴍ󰲡lmₓ󰅂)󰅂 ⥉ 𝑑

⊢ save_pua():
    lms = to_ranges(lm) ꟿᴷ󰲣 ‹⟦hex(x₀)⟧|⟦hex(x₁)⟧›
    t = time⋅100 ⥉𝑖
    pua_maps_in ᴍ 󰲡x.rename(y ≔ pua_fold/‹Old/⟦t⟧_⟦x.name⟧›) ► ‹Moved "⟦x⟧"↦"⟦y⟧"›☾
    json.dump(lms, (d≔pua_fold/‹pua_log.json›)→.open∘␛w)
    ‹Wrote pua mapping to "⟦d⟧"›☾
    ↪ lms

get_codepoint = ⥌c,p↦pua_single(n≔‹⟦p⟧_⟦c⟧›) ►← (chr←mlₙ,n,c)
get_codepoints = ⥌C,p↦pua_conseq(N≔Cᴍ󰲡‹⟦p⟧_⟦x⟧›) ►← NζCꟿ󰲣(chr←mlₓ,x,y)󰅂

⊢ get_new_chars(force_include, no_scale, multichars,
                ignore_scripts, special_symkeys):
    𝒞 = generate_compose(no_write=ⴳ)
    
    ℭ = 𝒞.items 󰈲󰲡x₁🃌≡1󰅂 ꟿ󰲣(y,x)󰅂 ⥉ 𝑑
    get_seq = 󰲡x∈ℭ∧ℭₓ ∨ x∈symmap∧x
    
    supsub = (ℭ ∪ special_symkeys) ∖ ignore_scripts 󰒼
    sub = get_codepoints(    supsub, "sub") ꟿ󰲥 (x,y,z,x∈ℭ∧ℭₓ ∨←  (j≔get_seq←z) ∧ ␛/⋅(1+←z∉special_symkeys)+(z≡␛/∧␛𝕊∨j), x∉no_scale)
    sup = get_codepoints(    supsub, "sup") ꟿ󰲥 (x,y,z,x∈ℭ∧ℭₓ ∨←  (j≔get_seq←z) ∧ ␛\⋅(1+←z∉special_symkeys)+(z≡␛\∧␛𝕊∨j), x∉no_scale)
    mul = get_codepoints(multichars, "mul") ꟿ󰲥 (x,y,z,x∈ℭ∧ℭₓ ∨← ⋀(K≔zᴍget_seq) ∧ ␛ᴍ+(Kᴍ󰲡x+␛𝕊󰅂Σᐦ))
    S = sub⋄sup⋄mul
    ↪ 𝒞 | 𝑑(S ſ+ 󰈲󰲡x₃󰅂 ꟿ󰲧(w,(x,y))), ⠤S