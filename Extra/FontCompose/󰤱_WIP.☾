⮌ peggle ⨡ Parser
🌈 = 󰋺∘␛🌈
󰋺(␛𝐍, ␛𝐍)

GRAM = ␛
󰦥󰦥󰦥󰦥󰦥
main = 󰆴Ω? (rule 󰆴Ω?)*

rule = rule_macro ∨ ⠶rule_not_macro
rule_macro = ¡ (word) 󰆴W? ❗ (⠶(⟶ output_chars ∨ rule_not_macro ∨ body_recurse))

rule_not_macro = R_S_C ∨ R_S_0 ∨ R_C_S ∨ R_C ∨ R_S_1
R_S_C = ( ⠶style_hbra compose_head) (body_recurse ∨ ⠶compose_body_options)
R_S_0 = (  style_head             ) (body_recurse ∨ (sty output_chars))
R_C_S = (compose_head  ⠶style_hbra) (body_recurse ∨ ⠶compose_body_options)
R_C   = (compose_head             ) (body_recurse ∨ ⠶compose_body_options)
R_S_1 = ( ⠶style_hbra             ) (body_recurse ∨ ((sty? ✓) (⟶? ✓) output_chars))
compose_body_options = ((⟶? ✓) output_chars)
body_recurse = ⦑ ⠶main ⦒

style_hbra = ⦑ style_head ⦒ 󰆴w?
style_head = ⠶tuple
tuple = ((| (| ✓)*)? chain)+
pair  = ƨ(word) 󰆴W? ⦑ ⠶tuple? ⦒
chain = (pair ∨ word)+ 󰆴W?

macref = ⟨ (¡ ⯆ word) ⟩

output_chars = ( ⟦ (⠶output_chars ∨ 󰆴Ω)* ⟧
                 ∨ ((str ∨ ~‹[^"⟦⟧\t\n ]›) 󰆴w?)+ )+
compose_head = ⠶(
    ( (looper = ⟦ ⠶compose_head ⟧)
    ∨ (concat = ⁅ ⠶compose_head ⁆)
    ∨ macref ∨ lookup) 󰆴W?)+ 󰆴W?
lookup = ƨ(str ∨ chr ∨ '|')
word   = ƨ(str ∨ chr+)
str    = ƨ(esc ∨ (󰆴'"' ((esc ∨ ~‹[^"]›)*) 󰆴'"'))
sty    = 󰆴w? ↷ ~‹[𝔏ℜ]›
esc    = 󰆴‹␛␛› ~‹.?›

bad = ~‹[𝔏ℜ⟨⟩⟦⟧⁅⁆⦑⦒"|␠⟶\t\n ]›
chr = (¬bad) ~‹.›

(⟦=󰆴(W?↷'⟦'))(⟧=󰆴(W?↷'⟧'))(⁅=󰆴(W?↷'⁅'))(⁆=󰆴(W?↷'⁆'))
(⦑=󰆴(W?↷'⦑'))(⦒=󰆴(W?↷'⦒'))(⟨=󰆴(W?↷'⟨'))(⟩=󰆴(W?↷'⟩'))
(¡=󰆴(W?↷'¡'))(|=󰆴(W?↷'|'))(⟶=󰆴(W?↷'⟶'))

w = ~‹[ \t]+›
W = ~‹[ \t\n]+›
Ω = ~‹[ \t\n␠]+›
󰦥󰦥󰦥󰦥󰦥

dat = ␛
󰦥󰦥󰦥󰦥󰦥
a|bc ⦑c⦑A⦒|u⦒ ⟶ ❗RCS
¡ alp ⟶ ABC
¡ num ⦑
  abc ⦑c⦑1⦒⦒ ⟶ ❗RSC2
⦒

⦑c⦑A⦒⦒ abc ⟶ ❗RSC
abc        ⟶ ❗RC
⦑c⦑A⦒⦒     ⟶ ❗RS1_ex1
⦑c⦑A⦒⦒  ℜ  ⟶ ❗RS1_ex2
 c⦑|A⦒B⦑s|0⦒ ℜ    RS0 ␛␛␛""abccc" ⟦
         asdaaa
         asd asd asd ␛j
⟧
󰦥󰦥󰦥󰦥󰦥

 dat = 󰦥󰦥󰦥󰦥󰦥abc ⦑c⦑af|2||a⦒u|c⦑ff⦒u⦒ ⟶ ❗RSC2󰦥󰦥󰦥󰦥󰦥

 a⟦b⟧⟨alp⟩ ⦑c⦑f00⦒⦒ WEE
 c⦑f00⦒ ℜ aosidjiao

fargs = ƒ↦ƒ.__code__.co_varnames[:ƒ.__code__.co_argcount]
gen, gens = n↦ƒ↦gensₙ≔ƒ, {}
gen(␛c)←⥌x=□,y=□,z=□↦{ ⠶x∧{          "color": 🌈.h2hl←x}∨{},
                       ⠶y∧{"backgroundColor": 🌈.h2hl←y}∨{},
                       ⠶z∧{    "borderColor": 🌈.h2hl←z}∨{} }
gen(␛B)←⥌x,y=1,r=1↦ℵ(borderStyle  = ‹s solid d dashed›⍭⥉𝑑→ₓ,
                     borderWidth  = ‹⟦y⟧px›,
                     borderRadius = ‹⟦r⟧px›)
gen(␛b)←𝚲ℵ(fontStyle="bold")
gen(␛u)←⥌x=1↦ℵ(textDecoration=‹underline ⟦x⟧px›)
⊢ decor(n):
    R = []
    ∀n∈n:
        r = {}
        ∀t,v∈n₁:
            ¿t ≡ "word":
                r |= gens[v]
            ⸘t ≡ "pair":
                t, v = v
                v = v₁
                ə = v ꟿ󰲣□ ¿x≡␛✓¡ 𝘀.join(yꟿ󰲣y)
                ƒ = gensₜ
                r |= ƒ(⠶{k:v∀k,v∈fargs(ƒ)ζə¿k≇□})
        R += r⛶
    ↪ R

⊢ RCR(ι, f, r):
    ¿ιᐹ𝑡→¬: ↪ι
    ν = ι↦(ι₀, ι₁ ᴍ󰲡RCR(x,f,r) ¿xᐹ𝑙¡ x)
    ↪ r∘ι ¿f∘ι¡ ν∘ι

⊢ parse(dat, gram=Parser(GRAM)):
    dat = 𝗻.join←dat.split(𝗻)󰈳󰲡x.lstrip().startswith←␛󰅂
    root = gram(dat, DEBUG=✗)
    root = root.child_killer(󰲡xᵗ∈𝑠←‹ℜ¡|␛⟦␛⟧⁅⁆⦑⦒⟨⟩⟶›)
    root = root.find_replace(󰲡✓, 󰲡(xᵗ∧(xᵗ,xᶜ)∨(xᶜ,[])))
    root = (rep≔󰲡𝐍(x)¿xᐹᔐ¡𝐍(x₀,⠤x₁ᴍrep))∘root
    root.P☾
    
    
    exit
    root = root.frp(󰲡xᵗ≡"style_head", 󰲡x.copy(c=decor(xᶜ)))
    ↪ root

parse∘dat → ☾
 parse∘dat → ☾

 n = 𝐍.ft(("a", [
         ("b", "hello"),
         ("c", "asdas"),
         ("d", [
             ("", 1),
             ("k", "joe")
         ])
     ])).tt☾
 n.extract(󰲡xᵗ∈"k")☾


🟑
󰤱: extract out style regex exprs
󰤱: better macros
󰤱: make R_S/_?/C's same format
    ℵ(style={}, seq=ᐦ, data=[])
󰤱: finish 󰤱
🟑