⮌ peggle ⨡ Parser
🌈 = 󰋺∘␛🌈
󰋺(␛𝐍, ␛𝐍)

GRAM = ␛
󰦥󰦥󰦥󰦥󰦥
main = 󰆴Ω? ((rule ∨ ⠶body_recurse) 󰆴Ω?)*

rule = rule_macro ∨ ⠶rule_not_macro
rule_macro = ¡ word 󰆴W? (⠶(⟶ results ∨ rule_not_macro ∨ body_recurse))

rule_not_macro = R_S_C ∨ R_S_0 ∨ R_C_S ∨ R_C ∨ R_S_1
R_S_C = ( ⠶style_hbra compose_head) (body_recurse ∨ ✓         ⟶? results)
R_S_0 = (           ✓   style_head) (body_recurse ∨ sty       ⟶? results)
R_C_S = (compose_head  ⠶style_hbra) (body_recurse ∨ ✓         ⟶? results)
R_C   = (compose_head            ✓) (body_recurse ∨ ✓         ⟶? results)
R_S_1 = (           ✓  ⠶style_hbra) (body_recurse ∨ (sty ∨ ✓) ⟶? results)
body_recurse = ⦑ ⠶main ⦒

style_hbra = ⦑ style_head ⦒ 󰆴w?
style_head = ⠶tuple
tuple = ((| (| ✓)*)? chain)+
pair  = ƨ(word) 󰆴W? ⦑ ⠶tuple? ⦒
chain = (pair ∨ word)+ 󰆴W?

macref = ⟨ (¡ ⯆ word) ⟩

results = ( ⟦ (⠶output_chars ∨ 󰆴Ω)* ⟧
              ∨ macref
              ∨ ((str ∨ ~‹[^␠"⟦⟧⟨⟩\t\n ]›) 󰆴w?)+ )+
compose_head = ⠶(
    ( (looper = ⟦ ⠶compose_head ⟧)
    ∨ (concat = ⁅ ⠶compose_head ⁆)
    ∨ macref ∨ lookup) 󰆴W?)+ 󰆴W?
lookup = ƨ(str ∨ chr ∨ '|')
word   = ƨ(str ∨ chr+)
str    = ƨ(esc ∨ (󰆴'"' ((esc ∨ ~‹[^"]›)*) 󰆴'"'))
sty    = 󰆴w? ↷ ~‹[𝔏ℜ]›
esc    = 󰆴‹␛␛› ~‹.?›

bad = ~‹[𝔏ℜ⟨⟩⟦⟧⁅⁆⦑⦒"|¡␠⟶\t\n ]›
chr = (¬bad) ~‹.›

(⟦=󰆴(W?↷'⟦'))(⟧=󰆴(W?↷'⟧'))(⁅=󰆴(W?↷'⁅'))(⁆=󰆴(W?↷'⁆'))
(⦑=󰆴(W?↷'⦑'))(⦒=󰆴(W?↷'⦒'))(⟨=󰆴(W?↷'⟨'))(⟩=󰆴(W?↷'⟩'))
(¡=󰆴(W?↷'¡'))(|=󰆴(W?↷'|'))(⟶=󰆴(W?↷'⟶'))

w = ~‹[ \t]+›
W = ~‹[ \t\n]+›
Ω = ~‹[ \t\n␠]+›
󰦥󰦥󰦥󰦥󰦥

dat = ␛
󰦥󰦥󰦥󰦥󰦥

⦑c⦑A00⦒⦒ c ⦑
    w ⟶ ➰ ␠ c𝕊 ⟶ ↨
⦒

󰦥󰦥󰦥󰦥󰦥

🟑dat = 󰦥󰦥󰦥󰦥󰦥
¡ abc ⟶ abcdefg
ᴍabc ⟶ hi␛aa"aaa"⟨mac1¡mac2⟩joe
󰦥󰦥󰦥󰦥󰦥🟑
 dat = 󰦥󰦥󰦥󰦥󰦥 a⟦A⁅⟦abc⟧⟦cd⟧⟨mac⟩⁆⟧ ⟶ 0123 󰦥󰦥󰦥󰦥󰦥


fargs = ƒ↦ƒ.__code__.co_varnames[:ƒ.__code__.co_argcount]
gen, gens = n↦ƒ↦gensₙ≔ƒ, {}
gen(␛c)←⥌x=□,y=□,z=□↦{ ⠶x∧{          "color": 🌈.h2hl←x}∨{},
                       ⠶y∧{"backgroundColor": 🌈.h2hl←y}∨{},
                       ⠶z∧{    "borderColor": 🌈.h2hl←z}∨{} }
gen(␛B)←⥌x,y=1,r=1↦ℵ(borderStyle  = ‹s solid d dashed›⍭⥉𝑑→ₓ,
                     borderWidth  = ‹⟦y⟧px›,
                     borderRadius = ‹⟦r⟧px›)
gen(␛b)←𝚲ℵ(fontStyle="bold")
gen(␛u)←⥌x=1↦ℵ(textDecoration=‹underline ⟦x⟧px›)
⊢ decor(n):
    R = []
    ∀n∈n:
        r = {}
        ∀n∈n:
            t, v = nᵗ, nᶜ
            ¿t ≡ "word":
                r |= gens[v₀ᵗ]
            ⸘t ≡ "pair":
                t, c = v₀ᵗ, v₁ᶜ
                ə = c ᴍ󰲡□ ¿xᵗ≡␛✓¡ 𝘀.join(x.extract(󰲡¬xᶜ,Δ=✗)ᴍ󰲡xᵗ)
                ƒ = gensₜ
                r |= ƒ(⠶{k:v∀k,v∈fargs(ƒ)ζə¿k≇□})
        R += r⛶
    ↪ R

⊢ RCR(ι, f, r):
    ¿ιᐹ𝑡→¬: ↪ι
    ν = ι↦(ι₀, ι₁ ᴍ󰲡RCR(x,f,r) ¿xᐹ𝑙¡ x)
    ↪ r∘ι ¿f∘ι¡ ν∘ι

⊢ parse_compose_node(n):
    ¿nᵗ≡"lookup": ↪ [n₀ᵗ]
    ¿nᵗ≡"macref": ↪ [␛λ]
    seqs = n ᴍ parse_compose_node
    ¿nᵗ≡"looper": ↪ seqsΣ[]
    ↪ [ᐦ⛶,⠤seqs]ſ󰲣x⨉yꟿ+

head_types = ‹R_S_C R_S_0 R_C_S R_C R_S_1›⍭
⊢ parse(dat, gram=Parser(GRAM)):
    dat = 𝗻.join←dat.split(𝗻)󰈳󰲡x.lstrip().startswith←␛󰅂
    root = gram(dat, DEBUG=✗)
    root = root.child_killer(󰲡xᵗ∈𝑠←‹ℜ¡|␛⟦␛⟧⁅⁆⦑⦒⟨⟩⟶›)
    root = root.find_replace(󰲡✓, 󰲡(xᵗ∧(xᵗ,xᶜ)∨(xᶜ,[])))
    root = (rep≔󰲡𝐍(x)¿xᐹᔐ¡𝐍(x₀,⠤x₁ᴍrep))∘root
    root = root.ftrp("str word"⍭, 󰲡x.copy(xᵗ, c=[𝐍(xᴍ󰲡xᵗ󰅂Σᐦ)]))
    root = root.ftrp("R_S_C"⍭, 󰲡x.copy(c=[x₁,x₀,⠤x₂﹕]))
    root = root.ftrp("results"⍭,
        󰲡x.ftrp("str", 󰲡𝐍(x₀ᵗ))␛
          .ftrp("macref", 󰲡x.copy(c=xᴍ󰲡x₀)))
    
    ⊢ adjust_headhead(n):
        c, s, ⠤n = n
        ↪ 𝐍("head",
            𝐍([ᐦ] ¿cᵗ≡␛✓¡ parse_compose_node(c)),
            𝐍({ } ¿sᵗ≡␛✓¡ decor(s)),
            ⠤n)
    root = root.ftrp(head_types, adjust_headhead, ✓)
    root, rgx_rules = root.extract(󰲡xᵗ≡"rule" ∧ (α≔x₀)ᵗ≡"head" ∧ (α≔α₂→ ᵗ)≡"sty" ∧ α₀ᵗ≡␛ℜ, Δ=✓)
    rgx_rules ᴍ= 󰲡(α≔𝑙∘x₀)₁ᵗ⋄α₃
    
    root.P☾
    root = root.ftrp("head"⍭, 󰲡x.copy(c=[xᶜ₀,xᶜ₁,xᶜ₃]))
    
     󰤱 stuff ⓦ rgx_rules
    ↪ root

parse∘dat→ ᴾ☾
🟑
󰤱: new regex style
    
󰤱: extract out style regex exprs
󰤱: better macros
󰤱: make R_S/_?/C's same format
    ℵ(style={}, seq=ᐦ, data=[])
󰤱: finish 󰤱
🟑