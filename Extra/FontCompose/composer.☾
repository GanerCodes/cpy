𝔦𝔪𝔭←␛s
⨡ string as 𝐒
⮌ peggle ⨡ Parser, Node

symmap = {
        ␛(: "parenleft"  , ␛): "parenright"  ,
        ␛{: "braceleft"  , ␛}: "braceright"  ,
        ␛[: "bracketleft", ␛]: "bracketright",
        ␛<: "less"       , ␛>: "greater"     ,
        ␛+: "plus"       , ␛-: "minus"       ,
        ␛/: "slash"      , ␛\: "backslash"   ,
        ␛!: "exclam"     , ␛?: "question"    ,
        ␛.: "period"     , ␛,: "comma"       ,
        ␛:: "colon"      , ␛;: "semicolon"   ,
        ␛&: "ampersand"  , ␛%: "percent"     ,
        ␛=: "equal"      , ␛*: "asterisk"    ,
        ␛_: "underscore" , ␛|: "bar"         ,
        ␛^: "asciicircum", ␛~: "asciitilde"  ,
        ␛#: "numbersign" , ␛$: "dollar"      ,
        ␛': "apostrophe" , ␛": "quotedbl"    ,
        ␛𝕊: "space"      , ␛ᴍ: "Multi_key"   ,
        ⠶𝑑(𝐒.ascii_letters+𝐒.digits ᴍ󰲡x⋄꜠) }
xcompose_from_seqs = 󰲡x.itemsꟿ󰲣y≔←y¿yᐹ𝑡¡y⛶ᵀ→►‹⟦␛ᴍ+xᴍ󰲡‹<⟦symmapₓ⟧>›󰅂Σ⟧:"⟦y₀⟧" # ⟦𝘀.join←y₀ᴍhex○ord⟧⟦‹ ; ⟦y₁⟧›¿y🃌>1¡ᐦ⟧𝗻›󰅂 󰒼󰲡x🃌⋄x󰅂 Σ
⊢ generate_compose(out=ᗜ, pcomp="compose.✍⚙"  ⥉𝐩,
                          pgram="compose.gram"⥉𝐩, no_write=ⴴ):
    ⨳ no_write∨out≇ᗜ
    Ω 𝔥:
        __init__ = 󰲣x.x≔←y.x¿yᐹ𝔥¡y→►□
        __iter__ = 󰲡x⛶⥉iter
    ⊢ gen_rule(n):
        ¿nᵗ≡"letter": ↪n.txt ⥉ 𝔥
        ¿nᵗ≡"macref": ↪macs[n.txt]
        ¿nᵗ≡"concat": ↪nᶜ ᴍgen_rule →⨉→ ᴍ𝔥
        ¿nᵗ≡"looper": ↪nᶜ ᴍgen_rule ſ󰁺󰁻 󰲣x+(y⛶¿yᐹ𝔥¡y)
    p = pgram⋄pcompᴍ󰲡x.open.read󰅂 ſᴾᵃʳˢᵉʳ ∘ ␛
          ᴍ󰲡y≔xᶜ→₀⋄(y₁ᶜᴍ󰲡x ¿xᐹᔐ¡ x.txt)
    macs = p󰈲󰲡x₀ᵗ≡"mac_head"󰅂 ꟿ󰲣(x.txt, yᴍ𝔥)󰅂 ⥉𝑑
    seqs = p󰈲󰲡x₀ᵗ≡"seq_head"󰅂 ꟿ󰲣(Node("concat",xᶜ), y)
    red = 󰲣y.append(x) ¿xᐹ𝔥∧(x≔xˣ)ᐹᔐ¡ xᴍ󰲡red(x,y)󰅂
    seqs = (seqs ꟿ󰲣yζ(gen_rule∘x ᴍ󰲡red(x,y≔[])►y󰈳󰲡x≡␛ᐦ)󰅂 Σ)ᴍᴙ
    seqsord = 𝑑.fromkeys(seqsꟿ󰲣y⥉𝑡󰅂)⥉𝑙
    nseqs, S = [], {}
    ➰ seqs:
        Δ = 0
        ∀o ∈ (x≔seqs.pop∘0)₀🃌⭥:
            o, y = o + Δ, x₀ 󰂼
            ¿yᐹ𝑖: ↺
            ¿y∈symmap:
                x₀ 󰂼 = ord∘y
            ⸘y∈S:
                x₀ 󰂼﹕󰂼₊₁ = S
                Δ += S🃌-1
            ¡:
                seqs += x⛶
                ⇥
        ¡:
            nseqs += x⛶
            S[x₁] = x₀
    nseqs = nseqs ꟿ 󰲣(xᴍchrΣ, y)󰅂 ␛
                  󰒼 󰲡seqsord.index(x₁⥉𝑡)󰅂 ⥉ 𝑑
    
    ¿¬no_write: out⥉𝐩→.open(␛w).write(xcompose_from_seqs ∘ nseqs 󰒼)
    ↪nseqs

¿ __name__≡"__main__": xcompose_from_seqs(generate_compose(no_write=ⴳ)) ☾