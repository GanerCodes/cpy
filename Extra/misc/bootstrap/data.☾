GRAM = 󰦥󰦥󰦥󰦥󰦥
parser_main = exprs
parser_comment = (⠶str ∨ 󰆴comment ∨ ~‹.|\n›)*

exprs = 𝗪? (⠶expr 𝗪?)*
expr = (
    (kw_pfx_colon_expr =  ⠶vkw_pfx_colon 󰆴Æ? (expr_not_colon? 󰆴Æ? 󰆴':') M:✓ 󰆴E? expr?)
        ∨ (kw_pfx_expr =  ⠶vkw_pfx 󰆴E? expr?)
          ∨ (norm_expr = (⠶norm_expr_atom)+))

expr_not_colon = (¬':' ⠶norm_expr_atom)+
expr_not_comma = (¬',' ⠶norm_expr_atom)+

vkw_pfx_colon = ⮞kw_spec kw_pfx_colon ∨ kw_pfx_colon ⮞text_breaker
vkw_pfx       = ⮞kw_spec kw_pfx       ∨ kw_pfx       ⮞text_breaker
vkw           = ⮞kw_spec kw           ∨ kw           ⮞text_breaker

norm_expr_atom = (⠶lambs ∨ ⠶gen_expr_atom) 󰆴E?
gen_expr_atom = group ∨ ⠶str ∨ var_spec ∨ number ∨ oper ∨ ⠶vkw ∨ ⠶script ∨ var
number = pos_num ∨ neg_num
pos_num = ƨ(~‹0([bB][01]+|[oO][0-7]+|[xX][0-9a-fA-F]+)|([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)(e[+\-]?[0-9]+)?›)
neg_num = ƨ(~‹󷰽([󷱈󷱐][󷰽󷰾]+|[󷱍󷱕][󷰽-󷱄]+|[󷱎󷱖][󷰽-󷱆󷱇-󷱌󷱏-󷱔]+)|([󷰽-󷱆]+(\.[󷰽-󷱆]*)?|[󷰽-󷱆]*\.[󷰽-󷱆]+)(󷱋[+\-]?[󷰽-󷱆]+)?›)

var = ƨ(¬𝗪 ¬oper ¬var_spec ¬script ¬(~‹󰦥{5}›) ~‹[^⟥⟤⭡⭣𝗮-𝘇ᐸᐳᑅᑀᐘᐒᑈᐵᐛᐖ󷺹-󷻀𝚲⥌↦󰲡󰲣󰲥󰲧󰲩󰲫󰅂$"'\[\](){}⁅⁆⟦⟧⟨⟩‹ ␛␛␛›]›)+

group = ~‹[\[({⁅⟦]› (𝗪? ↷ exprs) ~‹[\])}⁆⟧]›

script = ((supscript = ƨ(SUPSCRIPT)) ∨ (subscript = ƨ(SUBSCRIPT)))

oper = (
    (oper_mod_l = ~‹[⟥≺]*›)
     oper_lit
    (oper_mod_r = ƨ((~‹[´꜠ᵜ𐞑⟤]+› ∨ supscript)*)))

lambs = lamb_tacit ∨ lamb
lamb = (
    (   (lamb_h_py = 󰆴"lambda" ⮞text_breaker 󰆴Æ ⠶expr_not_colon 󰆴':')
      ∨ (lamb_h_normal = (
            󰆴('⥌' Æ?)
            ((¬lamb_h_implicit lamb) ∨ ⠶gen_expr_atom 󰆴Æ?)*
            󰆴'↦' ))
      ∨ (lamb_h_preset = ~"[𝚲󰲡󰲣󰲥󰲧󰲩󰲫]")
      ∨ (lamb_h_implicit = var 󰆴(Æ? '↦'))) 󰆴Æ?
    (lamb_b = ((exprs 󰆴'󰅂') ∨ expr_not_comma)))
lamb_tacit = (
      (⠶LTL exprs ⠶LTR)
    ∨ (⠶LTL expr_not_comma ✓ ✓))
LTL = (‹⟥›∨✓) ~‹[ᐳᑀᐒᐵᐖ󷺹󷺻󷺺󷺼]› 󰆴Æ?
LTR = ~‹[ᐸᑅᐘᑈᐛ󷺽󷺿󷺾󷻀]› (‹⟤›∨✓)

str = str_star ∨ Ʀsection ∨ str_cpy ∨ str_$ ∨ str_py ∨ str_escape ∨ str_spec_char
str_$ = 󰆴('$' 𝘄?) (ƨ(supscript) ∨ ✓) 󰆴𝘄? (⠶str_cpy_inner ∨ '›')* 󰆴(𝘄? '󷹹')
str_star = (󰆴(~‹󰦥{5}›)) ~‹((?!󰦥{5})(.|\n))*› 󰆴((~‹󰦥{5}›) ∨ ✓)
str_cpy = 󰆴'‹' (⠶str_cpy_inner ∨ '󷹹')* 󰆴'›'
str_cpy_inner = (str_escape ∨ str_sub ∨ str_spec_char ∨ str_guts)
str_sub = 󰆴'⟦' exprs 󰆴'⟧'
str_spec_char = ~‹[𝗮-𝘇]›
str_guts = ~"[^𝗮-𝘇⟦␛␛›󷹹]+"
str_escape = 󰆴"␛␛" ~‹.›
str_py = ((‹"› (str_py_sub ∨ ~‹[^"\\]+›)* ‹"›)
       ∨  (‹'› (str_py_sub ∨ ~‹[^'\\]+›)* ‹'›))

str_py_sub = ~‹\\.›

Ʀexpr = (⠶Ʀatom ∨ Ʀop ∨ 󰆴𝗪)*
Ʀatom = Ʀsection ∨ Ʀrange ∨ ƦESC ∨ ƦCHR

Ʀrange   = 󰆴(‹⁅› 𝗪?) (Ʀcharset ∨ Ʀrchar)+ 󰆴(𝗪? ‹⁆›)
Ʀsection = 󰆴(‹⟨› 𝗪?) Ʀmat_name (󰆴𝗪? ↷ Ʀmat_body) Ʀmat_func 󰆴(𝗪? ‹⟩›)

Ʀmat_name = ƨ((󰆴𝗪 ∨ ƦESC ∨ ƦCHR)*) 󰆴‹⭡› ∨ ✓
Ʀmat_body = Ʀexpr
Ʀmat_func = 󰆴‹⭣› exprs ∨ ✓

Ʀcharset = ⠶Ʀrchar ↷ 󰆴(𝗪? ↷ "…")
Ʀrchar = ⠶ƦESC ∨ ~‹[^…⁆]›

Ʀop = Ʀrrepeat ∨ ~‹[→¿⌐⨁⨀∨]›
Ʀrrepeat = (  󰆴(‹⟮› 𝗪?) (
                ((ƦINT∨✓) ↷ 󰆴(𝗪? ↷ ‹,›))
                ∨ ƦINT
           ) 󰆴(𝗪? ‹⟯›) )

ƦESC = 󰆴"␐" ~‹.›
ƦINT = ~‹[0-9]+›
ƦCHR = ~‹[^ \n\t⭣⭡⁅⁆⟨⟩⟮⟯∨→⌐¿⨁⨀]›

𝘄 = ~‹([ \t]*␛␛\n[ \t]*)+|[ \t]+›
𝗪 = ~‹[ \t\n]+›
text_breaker = ⮞(E ∨ kw_spec ∨ var_spec ∨ ¬var)
E = 𝘄 ∨ ~‹␛␛\n›
Æ = 𝗪 ∨ ~‹␛␛\n›

comment = ~‹((|#)[^\n]*(?=\n|\Z))|(🟑[^🟑]*(🟑|\Z))|(֎[^֎]*(֎|\Z))›
󰦥󰦥󰦥󰦥󰦥

OPERATORS = 󰦥󰦥󰦥󰦥󰦥
⨡ᴺᴾ󰁔
;ᴺᴾ󰁔 ,ᴺᴾ󰁔
=ᴺᴾ󰁔 ⮂ᴺᴾ󰁔 ↪ᴺᴾ󰁔 ⮌ᴺᴾ󰁔 ↺ᴺ󰁔 ⇥ᴺ󰁔 ➰ᴺᴾ󰁔 ∀ ␛
    ⠤ᴾ󰁔󰁞 ⠶ᴾ󰁔󰁞 :ᴮᴾᴺ󰁏󰁔
␀ARW_1ᴵᴮ
⭝ᴺᴮᴵ󰁜 ␉ ⭜ᴮᴵ󰁜
␀ARW_2ᴵᴮ
¡ᴮᴵ󰁜 ␉ ⸘ᴺᴾ󰁔 ¿ᴺᴮᴵ󰁜
␀ASGN_MRK_Lᴮ ≔ᴮ󰁜 ␀ASGN_MRK_Rᴮ ≕ᴮ󰁜
␀ARW_3ᴵᴮ
⨳ᴮᴾ󰀒ᴺ
∨ᴮᴺ ⩔ᴮᴺ 󷺥ᴮᴺ 󷺫ᴮᴺ 󷺤ᴮᴺ 󷺦ᴮᴺ
∧ᴮᴺ ⩓ᴮᴺ 󷺒ᴮᴺ 󷺬ᴮᴺ
≡ᴮᴺ󰁖󰁍 ==ᴮᴺ󰁖󰁍 !=ᴮᴺ󰁖󰁍 ≠ᴮᴺ󰁖󰁍 ∣ᴮᴺ󰁖  ∤ᴮᴺ󰁖 ␛
      <=ᴮᴺ󰁖󰁍  ≤ᴮᴺ󰁖󰁍 <ᴮᴺ󰁖󰁏 >ᴮᴺ󰁖󰁏 ≥ᴮᴺ󰁖󰁍 >=ᴮᴺ󰁖󰁍 ␛
       ⊄ᴮᴺ󰁖   ⊊ᴮᴺ󰁖  ⊂ᴮᴺ󰁖  ⊃ᴮᴺ󰁖  ⊋ᴮᴺ󰁖   ⊅ᴮᴺ󰁖 ␛
       ∉ᴮᴺ󰁖   ∈ᴮᴺ󰁖  ∋ᴮᴺ󰁖  ∌ᴮᴺ󰁖
␀TACᴮ
ꟿᴮᴺ ᴍᴮᴺ   ſᴮᴺ   Ϝᴮᴺ   Σᴮᴾ󰀒ᴺ Πᴮᴾ󰀒ᴺ ⨀ᴮᴾ󰀒ᴺ ⨁ᴮᴾ󰀒ᴺ ␛
    󰈲ᴮᴾ󰀒ᴺ 󰈳ᴮᴾ󰀒ᴺ 󰒼ᴮᴾ󰀒ᴺ 󰒽ᴮᴾ󰀒ᴺ ᙎᴮ󰀒ᴺ  ᙡᴮ󰀒ᴺ  ᗢᴮ󰀒ᴺ  ␛
    ᙧᴮ󰀒ᴺ  ᴮᴾ󰀒ᴺ
ᐹᴮᴾ󰀒ᴺ󰁖 ᐴᴮᴾ󰀒ᴺ󰁖 󷹵ᴮᴺ󰁖 󷹴ᴮᴺ󰁖 ζᴮᴾ󰀒ᴺ 󱑼ᴮᴾ󰀒ᴺ ᴮᴾ󰀒ᴺ󰁘 󱅏ᴮᴾ󰀒ᴺ󰁘 ᴮᴾ󰀒ᴺ󰁘
|ᴮᴺ ␉ ^ᴮᴺ ␉ &ᴮᴺ
<<ᴮᴺ >>ᴮᴺ ⪡ᴮᴺ ⪢ᴮᴺ
∓ᴾᴮᴺ ±ᴾᴮᴺ +ᴾᴮᴺ -ᴾᴮᴺ
∘ᴮᴺ ○ᴮᴺ   󰀒ᴺ   ᴮᴾ󰀒ᴺ 󰔶ᴮᴾ󰀒ᴺ ᴮᴾ󰀒ᴺ ␛
    ᣆᴮᴾ󰀒ᴺ ⊚ᴮᴾ󰀒ᴺ ⊜ᴮᴾ󰀒ᴺ 🟕ᴮᴾ󰀒ᴺ 🟖ᴮᴾ󰀒ᴺ
◄ᴮᴺ󰁏 ►ᴮᴺ󰁏
⋄ᴮᴺ
∪ᴮᴺ ␉ ∩ᴮᴺ ␉ ⨉ᴾ󰀒ᴮᴺ ⊞ᴾ󰀒ᴮᴺ ∖ᴮᴺ
//ᴮᴺ /ᴮᴺ   *ᴮᴺᴾ󰁞 ␛
     ≅ᴮᴺ󰁍  ≇ᴮᴺ󰁍   ⋅ᴮᴺ    ÷ᴮᴺ   ⹏ᴮᴺ   %ᴮᴺ  ␛
     ⋀ᴾ󰀒ᴺ  ⋁ᴾ󰀒ᴺ   ⫰ᴾ󰀒ᴺ   ⫯ᴾ󰀒ᴺ  @ᴮᴾᴺ󰁞 √ᴾᴺ  ␛
     ⟕ᴮᴾ󰀒ᴺ ⨝ᴮᴾ󰀒ᴺ  ⟗ᴮᴾ󰀒ᴺ  ⟖ᴮᴾ󰀒ᴺ !󰁏󰀒ᴺ  ☾ᴾ󰀒ᴺ ␛
     󷸹ᴮᴾ󰀒ᴺ 󷸸ᴮᴾ󰀒ᴺ  󷸻ᴮᴾ󰀒ᴺ  󷸺ᴮᴾ󰀒ᴺ ⍭ᴾ󰀒ᴺ  ⍉ᴾ󰀒ᴺ ␛
     󷹓ᴮᴺ󰀒  󰑅ᴮᴺ󰀒   󷹔ᴮᴺ󰀒   󷹕ᴮᴺ󰀒  󷹖ᴮᴺ󰀒  ⛶ᴾ󰀒ᴺ ␛
     ⬓ᴾ󰀒ᴺ  ▢ᴮᴾ󰀒ᴺ  ⬒ᴾ󰀒ᴺ   󰸵ᴮᴺ   󰸷ᴮᴺ   🃌ᴾ󰀒ᴺ ␛
     ⤈ᴮᴾ󰀒ᴺ 󷹄ᴮᴾ󰀒ᴺ󰁢 ⤉ᴮᴾ󰀒ᴺ  ↨ᴾ󰀒ᴺ  ⭥ᴾ󰀒ᴺ  ⴵᴾ󰀒ᴺ ␛
     󷹌ᴮᴾ󰀒ᴺ 󷹍ᴮᴾ󰀒ᴺ  󷹎ᴮᴾ󰀒ᴺ  𝌂ᴮᴾ󰀒ᴺ ᴙᴾ󰀒ᴺ  ᚤᴮᴾ󰀒ᴺ␛
     ⬄ᴮᴾ󰀒ᴺ 󰌷ᴮᴾ󰀒ᴺ  󰛔ᴮᴾ󰀒ᴺ󰁢
¬ᴾ󰀒ᴺ󰁜 ¯ᴾᴺ
␀CATᴮᴺ
**ᴵᴮᴾ󰁞 …ᴮᴺ ⌃ᴵᴮᴺ
ᴵᴾᴺ ᴺ󰀒
󰻾ᴺ ℵᴺ ℶᴺ
.ᴮ󰁏󰁔
...ᴺ

      ｜␀TACIT  ᴺ󰀒  󰁏󰁜｜
␀TAC  ｜␀TACITL ᴺ󰀒  󰁏󰁜｜
      ｜␀TACITR ᴺᴾ  󰁏󰁜｜␀TAC
␀TAC  ｜␀TACITLRᴺᴾ󰀒ᴮ󰁏󰁜｜␀TAC
      ｜          ⬅ᴾ󰁏󰁜｜␀ARW_1
␀ARW_1｜          ➡󰀒󰁏󰁜｜
      ｜          ←ᴾ󰁏󰁜｜␀ARW_2
␀ARW_2｜          ⥉ᴮ󰁏󰁜｜␀ARW_2
␀ARW_2｜          →󰀒󰁏󰁜｜
      ｜          ⭠ᴾ󰁏󰁜｜␀ARW_3
␀ARW_3｜          ⭢󰀒󰁏󰁜｜
󰦥󰦥󰦥󰦥󰦥

OPS_BUILTIN = ℵ(
    S=⍭‹›,
    N=⍭‹; : , if elif else for›,
    P=⍭‹+ - * ~ ** not yield›,
    B=⍭‹+ - * @ ** // < > % . & ^ | / != == << >> >= <= in not in is is not or and›)
SWAP_TABLE     = ⍭‹¯ - ÷ / ⋅ * ⠤ * ⹏ // ≠ != ≔ := ≡ == ≤ <= ≥ >= ⌃ ** ⪢ >> ⠶ ** ¿ if ∈ in ∨ or ≅ is ⪡ << ∀ for ¬ not ∧ and ⊢ def 󰆴 del ␀CAT * ¡ else ⸘ elif ⮌ from ➰ while ⇥ break ⮂ yield Ω class 󱀘 class ≇ is not ⨡ import ↪ return ∉ not in ↺ continue›
kw_pfx_colon   = ⍭‹if elif else for while try except finally class match case def with›
kw_neverswouce = ⍭‹if elif else for yield›
kw_inline      = ⍭‹in is is not not in or and not›
kw_pfx         = ⍭‹return continue break pass import global nonlocal raise assert del async›
var_spec       = 𝑠∘‹ⴳⴴ✓✗□∅󰮈⬤∞îℇτπ󷺍󷱯󷱪󷱫󷱬󷱭󷱮ᐦ↉½⅓¼⅕⅙⅐⅛⅑⅒⅔⅖¾⅗⅜⅘⅚⅝⅞›