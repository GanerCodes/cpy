⮌ parsimonious.grammar ⨡ Grammar
⨡ string as S

char_mapping = {
    "(": "parenleft"  , ")": "parenright"  ,
    "{": "braceleft"  , "}": "braceright"  ,
    "[": "bracketleft", "]": "bracketright",
    "=": "equal", "<": "less", ">": "greater",
    "*": "asterisk", "+": "plus", "-": "minus",
    "/": "slash", "\\": "backslash", '_': "underscore",
    '^': "asciicircum", "!": "exclam", "?": "question",
    ".": "period", ":": "colon", ";": "semicolon",
    ",": "comma", "#": "numbersign", "~": "asciitilde",
    "|": "bar", "&": "ampersand", "$": "dollar",
    "%": "percent",
    " ": "space", "'": "apostrophe", '"': "quotedbl"
} | { "␛𝕊": "space", "␛ᴍ": "Multi_key" } | { x:x ∀x∈(S.ascii_letters+S.digits) }

R = ⑴open(x).read()
⊢ trim_tree(t):
    n = t.expr_name
    ¿n∈⍭⨯"line_sep w": ↪
    ¿n∧n∉⍭⨯"expressions logic_expr statement char_seq string_literal ignores":
        ↪ [ℵ(V=n, T=t.text, C=Σ(trim_tree|ᴍ|t.children,[]))]
    ↪ Σ([y∀x∈t.children ¿(y≔trim_tree(x))], [])

Χ = 𝚲[[x]∀x∈𝔸₀] ¿🃌⨯𝔸≡1¡ Σ([[[x]+y∀y∈Χ(⠤𝔸₁﹕)]∀x∈𝔸₀],[])
⊢ get_combos(h, m):
    ¿h.V≡"macro_sub": ↪m[h.C₀.T]
    ¿h.V≡"char": ↪[h.T]
    ch = [get_combos(x,m)∀x∈h.C]
    ↪ Σ(ch) ¿h.V≡"combo_for"¡ [Σ(x)∀x∈Χ(⠤ch)]

⊢ parse_outset(k):
    r = []
    ∀x∈k.C:
        ¿x.V≡"string": r+=[x.T]
        ⸘x.V≡"nonterms": r+=[c∀c∈x.T¿c∉" \n"]
        ¡: » 𝔽
    ↪ r

⊢ gen_sub(t, s, m):
    h,b = t.C
    ∀a,b∈get_combos(ℵ(V="combo_cat", C=h.C), m) ζ parse_outset(b):
        s[b]=a

⊢ gen_file(t, S=□):
    S=[]¿S≡□¡S
    »t.V ≡ "file"
    seqs, macros = {}, {}
    ∀x∈t.C:
        ¿¬x: ↺
        ¿ x.V≡"macro" : macros[x.C₀.T]=𝓁⨯Σ(y.T ∀y∈x.C₁.C)
        ⸘ x.V≡"subdef": gen_sub(x, seqs, macros)
        ¡: » 𝔽
    
    ➰𝕋: 🟑Find fixed point🟑
        b=𝕋
        ∀k,v∈seqs.items():
            s = (𝓈⨯v).intersection(seqs.keys()) - 𝓈⨯'␛ᴍ␛𝕊␛ᐦ'
            ¿¬s: ↺
            seqs[k]=reduce(⑵x.replace(y,seqs[y]), s, v)
            b=𝔽
        ¿b: ⇥
    
    open('.XCompose',w❟).write(
        ‹#Autogenerated; I don't suggest editing this file.\n\n{'\n'.join(‹{ᐦ.join(‹<{char_mapping[x]}>› ∀x∈'␛ᴍ'+s.replace('␛ᐦ',ᐦ))}:"{c.replace('\\','\\\\')}\"›∀c,s∈seqs.items())}›)

gen_file(trim_tree(Grammar(R("compose.gram")).parse(R("compose.✍⚙️")))₀)