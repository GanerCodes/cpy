GRAM=󰦥󰦥󰦥󰦥󰦥
    main = (str ∨ script ∨ 󱀝 ∨ λ_zap_head ∨ special ∨ grp ∨ num ∨ var ∨ 𝗪)*
    script  = (sub   = ~‹%SCRIPTD%+› ) ∨ (sup   = ~‹%SCRIPTU%+› )
    special = (opert = ~‹%CONSTANTS%›) ∨ (const = ~‹%OPERATORS%›)

    λ_zap_head = 󰆴'⥌' main 󰆴'↦'
    grp = ~‹[[{(]› main ~‹[\]})]›
    num = pos_num ∨ neg_num
    pos_num = ƨ(~‹0([bB][01]+|[oO][0-7]+|[xX][0-9a-fA-F]+)|([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)(e[+\-]?[0-9]+)?›)
    neg_num = ƨ(~‹󷰽([󷱈󷱐][󷰽󷰾]+|[󷱍󷱕][󷰽-󷱄]+|[󷱎󷱖][󷰽-󷱆󷱇-󷱌󷱏-󷱔]+)|([󷰽-󷱆]+(\.[󷰽-󷱆]*)?|[󷰽-󷱆]*\.[󷰽-󷱆]+)(󷱋[+\-]?[󷰽-󷱆]+)?›)

    var = ¬(~‹[0-9]›) ƨ((¬script ¬special ~‹[^\]\-\\␛‹␛›^[\n\t ⥌↦⟦⟧(){}⟨⟩󱀝!%@&+|`'"#$,.:;?*/<>~=]›)+)
    str = ᔐ_star ∨ ᔐ_☾ ∨ ᔐ_basic ∨ ᔐ_escape ∨ ᔐ_spec_char
    ᔐ_star = (󰆴(~‹󰦥{5}›)) ~‹((?!󰦥{5})(.|\n))*› 󰆴((~‹󰦥{5}›) ∨ ✓)
    ᔐ_☾   = 󰆴'‹' (⠶ᔐ_☾_inner)* 󰆴'›'
    ᔐ_sub = 󰆴'⟦'      main     󰆴'⟧'
    ᔐ_☾_inner = ᔐ_escape ∨ ᔐ_sub ∨ ᔐ_spec_char ∨ ᔐ_guts ∨ 𝗪
    ᔐ_spec_char = ~‹[𝗮-𝘇]› ∨ 󰆴'󷺗'
    ᔐ_guts = ~‹[^𝗮-𝘇󷺗⟦␛␛␛›]+›
    ᔐ_escape = 󰆴"␛␛" ~‹.›
    ᔐ_basic = ((‹"› (ᔐ_basic_sub ∨ ~‹[^"\\]+›)* ‹"›)
             ∨ (‹'› (ᔐ_basic_sub ∨ ~‹[^'\\]+›)* ‹'›))
    ᔐ_basic_sub = ~‹\\.›
    
    󱀝_inj   = str ∨ 󱀝_code
    󱀝_pair  = 󱀝_pairk 󰆴(CLN ∨ 𝗪) 󱀝_pairv
    󱀝_pairk = ⠶󱀝_inj ∨ fix:(~‹[^\n\t :]+›)
    󱀝_pairv = ⠶󱀝_inj ∨ fix:(~‹[^}⍮]+›)
    󱀝_ə_nam = ⠶󱀝_inj ∨ (fix:~‹[^[{\n\t ]+›) ∨ ✓
    󱀝_ə_val = ⠶󱀝_inj ∨ 󱀝_brack
    󱀝_brack = 󰆴('[' 𝗪?) (󱀝_kid        󰆴(𝗪?))* 󰆴(𝗪? ']')
    󱀝_curly = 󰆴('{' 𝗪?)  󱀝_pair? (󰆴⍮ 󱀝_pair)* 󰆴(𝗪? '}')
    󱀝_code  = 󰆴'⟦' main 󰆴'⟧'
    󱀝_kid   = ⠶󱀝_inj ∨ 󱀝
    󱀝 = 󰆴('󱀝' 𝗪?) 󱀝_ə_nam 󰆴𝗪? (󱀝_curly ∨ ✓) 󰆴𝗪? (󱀝_ə_val ∨ ✓)

    CLN = (𝗪?) ↷ ':'
    ⍮   = (𝗪?) ↷ '⍮'
    
    𝘄 = ~‹[ \t]+›
    𝗪 = ~‹[ \t\n]+›
    comment = ~‹((|#)[^\n]*(?=\n|\Z))|(🟑[^🟑]*(🟑|\Z))|(֎[^֎]*(֎|\Z))›
󰦥󰦥󰦥󰦥󰦥

reps = 󰦥󰦥󰦥󰦥󰦥
    𝑖 int © const ⎉ let
    ᐦ ""
    ✓ true ✗ false ␀ null
    ¿ if ⸘ else if ¡ else
    ⌾ switch ᐂ case ⊳ default
    ⇥ break ↺ continue
    ➰ while ∀ for ↪ return
    ⎔ of ∈ in ☾ print
    ↦ => ⠤ ...
    ¬ ! ⭜ ? ⭝ : ⋅ * ∧ && ∨ || ⪢ >> ⪡ << ≠ != ≡ == ≥ >= ≤ <=
󰦥󰦥󰦥󰦥󰦥.strip󷺻𝗻󰛔􍪵␛ ᐸ⍭ᐵ.strip󷹎¹𝘀ᐸ⥉ℵ

󰋺("kots", *)
󰋺("peggle2", ⠤‹peggle2 Ń›⍭)
cd(@)
󰋺("rgx_golfatron", "rgx_golfatron")
cd()
⮌ util ⨡ SCRIPT, UPSIDEDOWNSYNDROME
⨡ os, shutil

CONSTANTS = ‹ⴳⴴ✓✗□ᐦ󰮈⬤îĵ󷺈ℇτπ󷺍󷺏∞󷱪󷱽󷱾󷱫󷱬󷱭󷱮󷱯󷱰󷱩↉½⅓¼⅕⅙⅐⅛⅑⅒⅔⅖¾⅗⅜⅘⅚⅝⅞›
OPERATORS = ‹=== == => // ++ -- && ?? ||›⍭→󰌷←𝑙∘‹©?⎔!%&*/+-,.:;<=>@^|¡¬¯±¿÷ſϜᐴᐹᗢᙎᙡᙧᚤᣆᴙℵℶ↨↪↺⇥∀∅∈∉∋∌∓∖∘√∣∤∧∨∩∪∾≅≇≔≕≠≡≤≥⊂⊃⊄⊅⊊⊋⊚⊛⊜⊞⋀⋁⋄⋅⌃⍁⍉⍜⍟⍭▢►◄○☾⛶➰⟕⟖⟗⠤⠶⤈⤉⨀⨁⨉⨝⨡⨳⩓⩔⪡⪢⫯⫰⬄⬒⬓⭜⭝⭥⮂⮌ⴵ⸘⹏ꟿ𝌂🃌🟕🟖󰈲󰈳󰌷󰑅󰒼󰒽󰔶󰛔󰬩󰬫󰸵󰸷󰻾󱅏󱑼󱖘󱖚󷸉󷸊󷸋󷸌󷸍󷸎󷸕󷸖󷸗󷸘󷸙󷸚󷸛󷸜󷸸󷸹󷸺󷸻󷹄󷹅󷹌󷹍󷹎󷹓󷹔󷹕󷹖󷹜󷹝󷹴󷹵󷺒󷺤󷺥󷺦󷺫󷺬›
bp = SCRIPT󰀂ᴴᴬᴿ􋕟󰀒ᵁᴮ⋄SCRIPT󰀂ᴴᴬᴿ􋕟󰀒ᵁᴾ⋄CONSTANTS⋄OPERATORS ᴍ rgx_golfatron
ll = ‹SCRIPTD SCRIPTU CONSTANTS OPERATORS›⍭ᐵ⛶⟗␛%
GRAM = ll 󰛔ᴳᴿᴬᴹ bp
gram = peggle2(GRAM)

𝚃 = ℵ(T=✓)
𝔗 = 󷺻Ń(⟞, e=𝚃)
mkgrp = 󰲡Ń("grp", 𝔗(x₀), ⠤𝔸, 𝔗(x₁))

𝚜 = 𝔗(𝘀)
rep_t = ⥌󱁕,ƒ↦󱁕.copy(c=󱁕.as_txt⥉ƒ⥉𝔗→⛶)
⊢ proc(x, n=∞):
    󱁕 = gram(x)
    ¿n<0:↪󱁕
    
    @(󱁕.ftrp("sub sup"⍭, ⬤))
    ⊢ ƒ(󱁕):
        t = SCRIPT.nrm(󱁕.as_txt)
        ¿󱁕ᵗ≡"sub": ↪ mkgrp(␛[␛], proc(t, 0))
        ¡        : ↪ Ń("expr", Ń("opert", 𝔗(␛.)), Ń("var", 𝔗(t)))
    
    ¿n<1:↪󱁕
    󱁕.ftrp("script"⍭, 󷺹₀, pre=✓)
    󱁕.ftrp("λ_zap_head"⍭, 󷺻Ń("expr", mkgrp(␛(␛), ⟞), Ń("opert", 𝔗(␛↦))))
    
    @(󱁕.ftrp("󱀝_pairk 󱀝_pairv 󱀝_ə_nam"⍭, ⬤))
    ⊢ ƒ(󱁕):
        ¿‹fix›∈󱁕ᵉ:
            t = 󱁕.as_txt
            󱁕 = Ń(󱁕ᵗ, 𝔗(‹`⟦␛$ 󰛔ᵗ ␛\␛$⟧`›))
        ⸘󱁕ᵗ≡"󱀝_ə_nam"∧¬󱁕.as_txt: 󱁕ᶜ = 𝔗("false")⛶
        ¿󱁕ᵗ≡"󱀝_pairk": 󱁕ᶜ = mkgrp(␛[␛], ⠤󱁕)⛶
        ↪ 󱁕
    
    @(󱁕.ftrp("󱀝_brack"⍭, ⬤, pre=✓))
    ⊢ ƒ(󱁕):
        󱁕ᶜ = [mkgrp(␛[␛], ⠤󱁕ᐖmkgrp(␛(␛), ⟞)ᐸ⨝Ń("opert", 𝔗(␛,)))]
        ↪ 󱁕
    
    󱁕.ftrp("󱀝_pair" ⍭, 󱁕↦󱁕.copy(c=󱁕⨝Ń("opert", 𝔗(␛:))), pre=✓)
    󱁕.ftrp("󱀝_curly"⍭, 󱁕↦󱁕.copy(c=mkgrp(␛{␛}, ⠤󱁕⨝Ń("opert", 𝔗(␛,)))), pre=✓)
    󱁕.ftrp("󱀝"⍭, 󱁕↦Ń("expr",
        Ń("var", 𝔗("mkə")),
        mkgrp(␛(␛), ⠤󱁕ᐵᵗ≡␛✓⭜𝔗("false")⭝⟞ᐸ⨝Ń("opert", 𝔗(␛,)))), pre=✓)
    
    󱁕.ftrp("opert const"⍭, 󷺻Ń("grp", 𝚜, ⟞, 𝚜))
    󱁕.ftrp(      "ᔐ_sub"⍭, 󱁕↦mkgrp(‹${ }›⍭, ⠤󱁕), pre=✓)
    󱁕.ftrp(    "neg_num"⍭, 󱁕↦Ń("expr",
                                Ń("opert", 𝔗(␛-)),
                                Ń("number", 𝔗(UPSIDEDOWNSYNDROME.flip(󱁕.as_txt)))))
    󱁕.ftrp(        "ᔐ_☾"⍭, 󱁕↦mkgrp(␛`␛`, ⠤󱁕))
    
    @(󱁕.ftrp("var const opert"⍭, ⬤))
    ⊢ ƒ(󱁕):
        ¿󱁕.as_txt≕α∈reps:
            󱁕ᶜ=Ń(reps󰃤, e=𝚃)⛶
        ↪ 󱁕
    
    mp = 󷺹≕h󷹝ᑀ≤128∨h.isidentifier() ⭜h⭝ ⟞󷹜¹⁶5⭢+ᵜ␛þ
    󱁕.ftrp("var opert const"⍭, 󱁕↦󱁕.copy(c=[Ń(󱁕₀ᵗᴍmp→⨝ᐦ, e=𝚃)]))
    
    ↪ 󱁕

transpile = 󷺹⥉proc→.as_txt
⊢ transpile_dir(idir, odir, fhead=‹/* AUTOGENERATED, DO NOT EDIT */›):
    idir󷸊∘ᵜ𝐩 ; odir󷸊∘ᵜ𝐩
    odir.exists ¬ ⨳
    shutil.copytree(idir, odir)
    odir.glob(‹**/*.j☾›)ᐖ(⟞.parent/‹⟦⟞.stem⟧.js›, fhead+transpile(∘⟞)) ► ⟞.unlink

⮌ sys ⨡ argv as 𝔸
¿𝔸🃌≡2:
    transpile(𝔸₁)☾
    exit
¿𝔸🃌≡3:
    transpile_dir(𝔸₁, 𝔸₂)
    exit

transpile(‹joe𝗻⥌x,y↦x+y›☾)☾ →►← exit

 transpile(󰦥󰦥󰦥󰦥󰦥x = 2₂ᶠ+2
 ‹TEST›⋅‹t⟦egg⟧est›
 HAM
 5⋅5+󷱂󰦥󰦥󰦥󰦥󰦥)☾

 transpile(󰦥󰦥󰦥󰦥󰦥
 󱀝 div{}[‹egg›]
 󰦥󰦥󰦥󰦥󰦥)☾

 transpile(‹∀(x ⎔ y) ☾(x)›☾)☾

 transpile("󱀝 div [‹egg›]")
 transpile("󱀝 div [‹AAA› ‹BBB›]")

 transpile(󰦥󰦥󰦥󰦥󰦥
 󱀝 div [
     󱀝 header [
         ‹some cool txt›
         ⟦code⟧
     ]
     󱀝 thing{a:b}[
         ‹some col text›
     ]
 ]
 󰦥󰦥󰦥󰦥󰦥)☾

 transpile(󰦥󰦥󰦥󰦥󰦥
 const myepicelement = 󱀝 div [
     󱀝 h4 [
         ‹sonic i have an announcement, 2 pluz 2 is ⟦2⋅2 ⎔ 222⟧›
         󱀝 h6{𝑆:‹color:red;›} ‹hi im red im ¬blue›
     ]
    
     󱀝 video{src:https://website.gov/cool.mp4 ⍮ 𝐶:coolvideo ⍮ 𝑆:width:1000px; height:1000px;}
 ];
 󰦥󰦥󰦥󰦥󰦥)☾