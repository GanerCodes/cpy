parse_ot = 󰻾  󰤱

OP_TIERS = "󷰜󷰝󷰞󷰟󷰠󷰡󷰢󷰣󷰤󷰥󷰦󷰧󷰨󷰩󷰪󷰫󷰬󷰭󷰮󷰯󷰰󷰱"
OPS = 󰦥󰦥󰦥󰦥󰦥
󷰧 +    𝚡󷸏􊽨𝚢
󷰧 -    𝚡󷸏􊽨𝚢
󷰭 ⋅    𝚡∧􊽨𝚢
󰦥󰦥󰦥󰦥󰦥

OPS = (OPS⬄𝘀𝗻󷹎𝗻ᐵ⬄𝘀𝗻𝌂󷺹≡𝘀⭜󰮈⭝✓)␛
      ꟿ󰲥OP_TIERS󰑅ᔨx, y, parse_ot(z)󰅂
OPS☾
exit

 
 l, ⟨;⟩, r
 

_OP_TYPES = "NPSB"
_or  = 󰲣x | 1⪡_OP_TYPES.index(y)
_and = 󰲣x & 1⪡_OP_TYPES.index(y)
󱀘 OP:
    __slots__ = [⠤"tvFLRf"]
    
    ⊢ __init__(𝕊, t, v=ᐦ, L=□, R=□, f=print):
        v, F = 𝑠(v󰈳󰲡x∈_OP_TYPES), 𝑠(v󰈳󰲡x∉_OP_TYPES)
        𝕊ᵗ, 𝕊ᵛ, 𝕊󰀅 = t, vſ⁰|´, F
        𝕊ᴸ, 𝕊ᴿ, 𝕊ᶠ = L∨𝑠(), R∨𝑠(), f
    ⊢ __contains__(𝕊,v): ↪ v∈𝕊󰀅
    ⊢ __repr__(𝕊): ↪ ‹⟨⟦𝕊ᵗ⟧│⟦bin(𝕊ᵛ)₂﹕.zfill(_OP_TYPES🃌)﹕﹕􍨄⟧⟦(𝕊󰀅⭜␛│+ᔐ(𝕊󰀅)⭝ᐦ) + ␛⟩⟧›
    ⊢ __eq__(𝕊, n):
        O = L, base, R = 𝕊.is_op(n)
        ↪ base.as_txt()≡𝕊.t ⭜O⭝ ✗
    ⊢ __call__(𝕊, L, R, op_):
        𝕊.check_args(L, R) ⨳ ‹Invalid args for op!›
        ↪ 𝕊.f(L, R, op_)
    ⊢ __getattr__(𝕊, a):
        ¿a≡␛M: ↪ 𝕊ᴾ∧𝕊󰀒
        ¿aᐵ∈_OP_TYPESᐸ⋀:
            ↪ 𝕊ᵛ⛶􋕟ᴼᴾ􋕟ᵀ󰀘ᴾᴱ󰀒􋌵ᐵ∧ᑈa → ⋁
        raise AttributeError
    
    copy = ⥌𝕊  ↦(ᐹ𝕊)(𝕊ᵗ, 𝕊ᵛ, 𝕊ᴸ.copy(), 𝕊ᴿ.copy(), 𝕊ᶠ)
    mod  = ⥌𝕊,v↦(ᐹ𝕊)(𝕊ᵗ, v, 𝕊ᴸ, 𝕊ᴿ, 𝕊ᶠ)
    
    @𝒞ℳ
    ⊢ TND(ℂ, s, l=ᐦ, r=ᐦ):
        ↪ Ń("oper", ("oper_mod_l", l), ("oper_lit", s), ("oper_mod_r", r))
    
    @𝒞ℳ
    ⊢ is_op(ℂ, n, ops=□):
        ¿n󷹵Node ∨ nᵗ≠"oper": ↪✗
        
        L, base, R = O = n.C
        base = base.as_txt()
        
        ¿R󰀒 ∧ ␛´∈R.as_txt(): ↪ ✗
        ↪ L, base, R
    
    ⊢ check_args(𝕊, L=□, R=□):
        l, r = L≇□, R≇□
        ¿l∧r: ↪ 𝕊ᴮ
        ¿l∨r: ↪ 𝕊ᴾ∧R ∨ L∧𝕊󰀒
        ↪ 𝕊ᴺ
    
    ⊢ part(𝕊, nodes, d, op_man):
        d∈"lr" ⨳
        
        i = 0
        ¿d≡␛r:  󷹇 this code is scary!!1
            stack = [𝕊ᴿ]
            ∀i,n in nodes↨:
                ¿𝕊.is_op(n)≕O¬: ↺
                l, op_t, r = O
                ➰stack:
                    pretend_op = op_t
                    ¿␛≺ ∈ l.as_txt():
                        pretend_op = ␛ᴍ  󷹇 stupid
                    ¿pretend_op ∈ stack􍨄:
                        stack 󷸊+ [op_manₙᴿ]
                        ⇥
                    
                     󷹇 weird
                    ¿ (𝕊ᴾ ∨ (𝕊ᴮ ∧ ¬𝕊󰀒)) ␛
                          ∧ op_manₙᵗ ∈ op_man.table􊯛􊱵ᴿ ␛
                          ∧ op_manₙᴾ ∧ i≡0:
                        stack 󷸊+ [op_manₙᴿ]
                        ⇥
                    stack.pop()
                ¡:
                    ⇥
            ¡:
                i 󷸊+ 1
        ⸘d≡␛l:
            ∀i,n ∈ nodes↨﹕﹕􍨄:
                ¿𝕊.is_op(n)≕O¬: ↺
                l, op_t, r = O
                ¿op_t ∉ 𝕊ᴸ: ⇥
        ↪ nodes﹕ᵢ, nodesᵢ﹕
        
    ⊢ apply(𝕊, L, R, op_man, op_):
         ‹⟦L=⟧ ⟦op_=⟧ ⟦R=⟧›☾
        ll, lr = 𝕊.part(L, ␛l, op_man)
        rl, rr = 𝕊.part(R, ␛r, op_man)
         ‹ll=⟦ll⟧›☾
         ‹lr=⟦lr⟧›☾
         ☾(𝕊)
         ‹rl=⟦rl⟧›☾
         ‹rr=⟦rr⟧›☾
        
        ¿rl: rl = op_man.parse_expr(rl)
        
        ¿𝕊ᴮ ∧ lr ∧ rl: ↪ ll + [𝕊(lr, rl, op_)], rr  Binary
        ¿𝕊󰀒 ∧ lr     : ↪ ll + [𝕊(lr,  □, op_)], R   Suffix
        ¿𝕊ᴾ      ∧ rl: ↪ L  + [𝕊(□ , rl, op_)], rr  Prefix
        ¿𝕊ᴺ          : ↪ L  + [𝕊(□ ,  □, op_)], R   Nullary
        
        ✗⨳‹"Unable to apply operator ⟦𝕊⟧: ⟦ll=⟧; ⟦lr=⟧; ⟦rl=⟧; ⟦rr=⟧›

󱀘 OP_Manager:
    __slots__ = "table", 

    ⊢ __init__(𝕊, table):
        𝕊.table = table
    ⊢ __repr__(𝕊):
        ↪ ‹⟦(ᐹ𝕊).__name__⟧[table=⟦𝕊.table⟧]›
    ⊢ __getitem__(𝕊, n):
        ¿¬n≔OP.is_op(n): ↪
        L, op_t, R = n
        op = 𝕊.table󰂼ₚ􋕞ₜ
        ↪ 𝕊.gen_op(L, op, R)
    
    ⊢ gen_op(𝕊, l, op, r):
        lᵗ≡"oper_mod_l" ⨳
        ∀u∈l.as_txt():
            ¿u≡␛⟥:
                opᴮ ⨳
                op = op.mod(opᴺ⋅␛N + ␛P)
            ⸘u≡␛≺:
                opᴮ ⨳
                op = op.mod(opᴺ⋅␛N + ␛S)
            ¡:
                ✗⨳
        
        ¿rᵗ≠"oper_mod_r": ↪ op
        
        ∀u∈r.as_txt():
            ¿u≡␛꜠:
                opᴮ ⨳
                op = op.mod(opᴺ⋅␛N + ␛P␛S)
            ⸘u≡␛ᵜ:
                ¿opᴾ ∨ op󰀒:
                    op = op.mod(opᴺ⋅␛N + opᴾ⋅␛S + op󰀒⋅␛P + opᴮ⋅␛B, opᴿ, opᴸ)
            ⸘u≡␛⟤:
                opᴮ ⨳
                op = op.mod(opᴺ⋅␛N + ␛S)
             󷹇 postfix modifiers can be dynamic
        ↪ op
    
    ⊢ parse_expr(𝕊, n):
         print("parse_expr:")
         ∀x∈n: x.print()
         PD(1, "PARSE", n)
        L, R = [], n.copy()
        ➰R:
            c = R.pop(0)
             PD(0, f"STACKS: {L=} │{c}│ {R=}")
            ¿OP.is_op(c): L, R = 𝕊.apply(L, R, 𝕊, c)
            ¡           : L 󷸊+ [c]
         PD(-1, L+R)
        ↪ L + R