exec("from math import *")
󰆴 factorial, e, pi, tau, sqrt, cbrt, pow
𝑒,𝑜,𝑑,𝑏,𝑙,𝑡,𝑠,ᔐ,𝑖,𝑓,𝑦 = Exception, object, dict, bool, list, tuple, set, str, int, float, bytes
⮌ py_naming_tools ⨡ py_escape_var as PEV
⮌ functools ⨡ reduce
⮌ itertools ⨡ chain, filterfalse, product, accumulate, zip_longest
⮌ random ⨡ shuffle, choice, uniform, randint
⮌ types ⨡ UnionType
⮌ util ⨡ cpy_dir

LITERAL_OPS_ = {
      ␛*:󰲣x⋅y,  ␛/:󰲣x/y,  ␛<:󰲣x <y,  ␛>:󰲣x >y,
      ␛|:󰲣x|y,  ␛&:󰲣x&y,  ␛^:󰲣x ^y,  ␛%:󰲣x %y,
      ␛∧:󰲣x∧y,  ␛∨:󰲣x∨y,  ␛@:󰲣x @y,
    ␛/␛/:󰲣x⹏y,␛*␛*:󰲣x⌃y,␛<␛<:󰲣x<<y,␛>␛>:󰲣x>>y,
    ␛=␛=:󰲣x≡y,␛!␛=:󰲣x≠y,␛<␛=:󰲣x ≤y,␛>␛=:󰲣x ≥y,
      ␛+:𝚲𝔸ᵥ􊮝₀≅␀∨𝔸🃌≡1∨𝔸ᵥ􊮝₁≅␀ ⭜ +𝔸ᵥ ⭝ 𝔸₀+𝔸₁,
      ␛-:𝚲𝔸ᵥ􊮝₀≅␀∨𝔸🃌≡1∨𝔸ᵥ􊮝₁≅␀ ⭜ -𝔸ᵥ ⭝ 𝔸₀-𝔸₁,
   "and":󰲣x∧y, "or":󰲣x∨y, "not":󰲡¬x,
    "is":󰲣x≅y, "is not":󰲣x≇y,
    "in":󰲣x∈y, "not in":󰲣x∉y }

⊢ RET_L(x,y): ↪ x
⊢ RET_R(x,y): ↪ y
SETATTR = 󰲧w≡0⭜    setattr  (x,y,z)∨z⭝    setattr  (y,z,x)∨x
SETITEM = 󰲧w≡0⭜x.__setitem__(y  ,z)∨z⭝y.__setitem__(z  ,x)∨x
GETATTR = 󰲣    getattr  (x,y)
GETITEM = 󰲣x.__getitem__(  y)
þSTACK = []
þPSH, þPOP = 󰲡þSTACK.append(x)∨x, 󰲡þSTACK.pop(x)
def þPOPNR(): 󰆴 þSTACK[-1]

␀,⬤,󰮈 = NULL≔𝑜(), 𝑜(), 𝑜()
✓,✗,□,ᐦ = True, False, None, ''
𝒞ℳ, 𝒮ℳ = classmethod, staticmethod
½,⅓,¼,⅕,⅙,⅐,⅛,⅑,⅒,⅔,⅖,󷶲,󷶷,¾,⅗,󷶳,⅜,󷷆,⅘,󷶴,󷷂,⅚,󷶵,⅝,󷶹,󷶶,⅞,󷶺,󷷇,󷶻,󷷈,↉,󷷉 = 1÷2,1÷3,1÷4,1÷5,1÷6,1÷7,1÷8,1÷9,1÷10,2÷3,2÷5,2÷7,2÷9,3÷4,3÷5,3÷7,3÷8,3÷10,4÷5,4÷7,4÷9,5÷6,5÷7,5÷8,5÷9,6÷7,7÷8,7÷9,7÷10,8÷9,9÷10,0,1÷100
π, ℇ = 3.14159265358979323, 2.71828182845904523
∞, î, τ,    󷺍, 󷺎, 󷺏 = inf, complex(0, 1), 2π, ½π, ¼π, ⅛π
󷱩, 󷱪, 󷱬, 󷱭, 󷱮, 󷱯, 󷱰, 󷱫 = ¯∞, ¯î, ¯τ, ¯π, ¯󷺍, ¯󷺎, ¯󷺏, ¯ℇ
􋐳, 􋐲, 􋐴, 􋑯 = cos, sin, tan, log
ↀ = 2³􊿙

OP_DUPER_ = ƒ↦󰲡ƒ(x,x,⠤𝔸,⠶𝕂)  ꜠
OP_SWAPA_ = ƒ↦𝚲ƒ(⠤𝔸﹕﹕􍨄 ,⠶𝕂)  ᵜ
OP_LNULL_ = ƒ↦󰲡ƒ(␀,x,⠤𝔸,⠶𝕂)  ⟥
OP_RNULL_ = ƒ↦󰲡ƒ(x,␀,⠤𝔸,⠶𝕂)  ⟤
OP_BSTAR_ = ƒ↦󰲡ƒ(⠤x ,⠤𝔸,⠶𝕂)  ≺
⊢ OP_CORSP_(op, op_m=␀, cor=␀):
    𝙾 = (op_m≅␀ ⭜op⭝ op[op_m])(𝘪=✓)
    ⊢ ƒ(⠤𝔸, ⠶𝕂):
        I = 𝙾(⠤𝔸, ⠶𝕂)
        ¿cor≇␀: ↪ cor󷸻(I ᣆᴵ􀸳􋊪 ⛶)
        ↪ I
    ↪ ƒ
⊢ ´(ƒ):
    ⊢ 𝒻(⠤𝜶,⠶𝜿):
        ⊢ 𝑓(⠤𝔸,⠶𝕂):
            𝓐, 𝔸 = [⠤𝜶], [⠤𝔸]
            𝓚 = [⠤𝜿.items()]
            a, k = [], {}
            ➰𝓐:
                x = 𝓐.pop(0)
                a.append(x≅⬤ ⭜𝔸.pop(0)⭝ x)
            ➰𝓚:
                x, y = 𝓚.pop(0)
                kₓ = y≅⬤ ⭜𝔸.pop(0)⭝ y
            ↪ ƒ(⠤a+𝔸,⠶k|𝕂)
        ↪ 𝑓
    ↪ 𝒻
⊢ OPWRAP_(ƒ, ⠤𝔸):
    ¿𝔸:
        ⊢ f(ꬶ):
            ∀x∈(ƒ,⠤𝔸):
                globals()󰂢󰂗󰂨₍ₓ₎ = OPWRAP_(ꬶ(x))
        ↪ f
    󱀘 ω:
        __slots__ = ()
        ⊢ __call__(𝕊, x=␀, y=␀, ⠶𝕂):
            ¿x≅␀: x,y = y,x
            ↪ x≅␀ ⭜ƒ(⠶𝕂)⭝ y≅␀ ⭜ƒ(x,⠶𝕂)⭝ ƒ(x,y,⠶𝕂)
        __getitem__ = ⥌𝕊,s↦𝚲𝕊(⠤𝔸, s=s, ⠶𝕂)
    ω􊽺 = 𝒮ℳ(ƒ)
    ↪ ω()
󱀘 𝑐𝑑(𝑑):
    ⊢ __init__(𝕊, ƒ, ⠤𝔸, 𝑔=□, ⠶𝕂):
        𝕊􊽺, 𝕊.𝑔 = ƒ, 𝑔
        super().__init__(⠤𝔸,⠶𝕂)
    __call__ = 𝕊↦𝕊􊽺(⠤𝔸,⠶𝕂)
    __repr__ = 𝕊↦"__repr__"∈𝕊 ⭜super().__getitem__("__repr__")(𝕊)⭝ super().__repr__()
    __getitem__ = ⥌𝕊,x↦𝗛(x)∧super().__contains__(x) ⭜super().__getitem__(x)⭝ 𝕊􋇕(x)

⊢ _map_d(x,y,n=1):
    mapwd = 󰲣[𝕩 ∀z∈x ¿y(z)≕𝕩≇󰮈]
    ⊢ _get_depths(x):
        ¿¬𝗜(x): ↪{0}
        ¿xᐹᔐ: ↪{1}
        ↪ {w+1 ∀z∈x ∀w∈_get_depths(z)}
    ⊢ _map_neg_d(x,y,n):  kinda weird ngl
        ¿xᐹᔐ: ↪ n≡1 ⭜y(x)⭝ n ⭜x⭝ mapwd(x,y)
        ¿0∈d≔_get_depths(x): ↪n ⭜x⭝ y(x)
        x = mapwd(x, 󰲡_map_neg_d(x,y,n))
        ↪ n∈d ⭜y(x)⭝ x
    ⊢ _map_pos_d(x,y,i):
        ¿¬i: ↪y(x)
        ¿xᐹᔐ: ↪mapwd(x,y)
        ↪ 𝗜(x) ⭜mapwd(x, 󰲡_map_pos_d(x,y,i-1))⭝ y(x)
    ↪ n<0 ⭜ _map_neg_d(x,y,󷰾-n) ⭝ _map_pos_d(x,y,n≡∞⭜ↀ⭝n)

@OPWRAP_(⠤‹󰔶›)
⊢ _(t, ƒ=␀, 𝑔=␀, s=𝑒):
    𝑇 = s
    v = 𝕣((ƒ, 𝑔))
    ¿v🃌≡1:
        ƒ = v₀
        ¿t≡␛: raise ƒ
    ⊢ r(⠤𝔸, ⠶𝕂):
        try:
            ↪ ƒ(⠤𝔸, ⠶𝕂)
        except 𝑇 as ε:
            ¿v🃌≡1:
                ¿t≡␛󰔶: ↪ 𝔸⭜𝔸₀⭝□
                ¿t≡␛: ↪ ε
            ¿t≡␛: ↪ 𝑔
            ¿t≡␛󰔶: ↪ 𝑔(⠤𝔸, ⠶𝕂)
            ¿t≡␛: ↪ 𝑔(ε)
    ↪ r

@OPWRAP_(⠤‹󷸹󷸺󷸸󷸻›)
⊢ _(𝕏, x=␀, y=␀, s=␀, 𝘪=✗):
    x≇␀∨␀≇y ⨳ ‹Range missing both values!›
    ¿𝔰≔s≅␀: s=1
    
    v = x≅␀ ⭜y⭝ y≅␀ ⭜x⭝ ␀
    ¿v≅␀∧x≇␀∧␀≇y∧xᐹ𝑖ᐴy ∨ v≇␀∧vᐹ𝑖:
        ¿v≇␀: x,y = 0,v
        
         󰤱 𝑓/ℂ/ℍ
         s>0: x→y, step size `s`
         s<0: x→y, `s` divisions
        
        ¿𝕏≡␛󷸹: ↪ [⠤range(x  ,y  ,s)]
        ¿𝕏≡␛󷸺: ↪ [⠤range(x+1,y+1,s)]
        ¿𝕏≡␛󷸸: ↪ [⠤range(x+1,y  ,s)]
        ¿𝕏≡␛󷸻: ↪ [⠤range(x  ,y+1,s)]
    ¿v≇␀:
        vᐹ𝗜 ⨳
        v=[⠤v]
        ¿𝕏≡␛󷸸: ↪ (v₀, v₁﹕􍨄﹕ₛ, v􍨄)
        ¿𝔰: s=0
        ¿𝕏≡␛󷸹: ↪ v₀₊ₛ
        ¿𝕏≡␛󷸺: ↪ v􍨄₋ₛ
        ¿𝕏≡␛󷸻: ↪ v₀₊ₛ, v􍨄₋ₛ
    ¿𝘪:
        ¿xᐹ𝗜: x󷸊⭥
        ⸘yᐹ𝗜: y󷸊⭥
    ¿𝗜∘x ∧ 𝗜∘y:
        ↪ [xₕ﹪􊹳ₓ∀h∈y﹕﹕ₛ]
    ¿𝗜∘x ∧ yᐹ𝑖:
        ¿𝕏≡␛󷸹: ↪ x􋘲﹕􋘲􋘲﹕ₛ
        ⸘𝕏≡␛󷸺: ↪ x₁﹕₊₁﹕ₛ
        ⸘𝕏≡␛󷸸: ↪ x₁﹕􋘲􋘲﹕ₛ
        ⸘𝕏≡␛󷸻: ↪ x􋘲﹕₊₁﹕ₛ
    ¿xᐹ𝑖 ∧ 𝗜∘y:
        ¿𝕏≡␛󷸹: ↪ yₓ􋘲􋘲﹕􍨄﹕ₛ
        ¿𝕏≡␛󷸺: ↪ yₓ₊₁﹕􊱃﹕ₛ
        ¿𝕏≡␛󷸸: ↪ yₓ₊₁﹕􍨄﹕ₛ
        ¿𝕏≡␛󷸻: ↪ yₓ􋘲􋘲﹕􊱃﹕ₛ
    ✗⨳‹Invalid arguments! ⟦ᐹx⟧ ⟦ᐹy⟧›

@OPWRAP_(⠤‹󰈳󰈲›)
⊢ _(𝕏, x=␀, y=␀, s=␀, 𝘪=✗):
    ¿𝘪: s≅␀ ⨳ ‹Filter modifier not valid under ᔨ›
    y=y≅␀ ⭜󰻾⭝ yᐹ𝗙 ⭜y⭝ yᑀ≡󷺽
    ¿𝕏≡␛󰈳: y = ¬○y
    ¿𝘪   : ↪ [i∀i,z∈x↨¿y(z)≕𝕩∧𝕩≇󰮈]
    ¿s≅␀ : ↪ [z∀  z∈x ¿y(z)≕𝕩∧𝕩≇󰮈]
    ¿s≡* : ↪ [𝕩∀  z∈x ¿y(z)≕𝕩∧𝕩≇󰮈]
    ¿s󷹵𝗙 : s = 󰻾ˢ
    ↪ [𝕩 ⭜s(z)⭝ z ∀z∈x¿y(z)≕𝕩≇󰮈]

@OPWRAP_(⠤‹⨝⟕⟖⟗›)
⊢ _(𝕏, x=␀, y=␀, s=ᐦ, LR_def=□, bound_mode=␀):
    x≇␀∨␀≇y ⨳‹Join missing both values!›
    ¿x≅␀: x,y = y,x
    ¿sᐹ𝑡:
        ¿s₀ᐹ𝑖: bound_mode, 𝕏 = s
        ¡    : 𝕏, bound_mode = s
        𝕏ᐹᔐ ∧ bound_modeᐹ𝑖 ⨳ ‹Bad modifiers!›
    ⸘sᐹ𝑖:
        s, bound_mode = ᐦ, s
    ¿bound_mode≅␀: bound_mode = 𝕏≡␛⟗∧1∨0
    ¿x≅␀: x,y = y,x
    ¿y≅␀:
        𝗜(x) ⨳ ‹Single-arg ⟦t⟧ needs an iterable›
        ↪ 𝗻⋅(𝕏∈␛⟕␛⟗)+ᐦ.join(xᴍᔐ)+(␛⟗␛⟖∋𝕏)⋅𝗻 → ᣆ􋂝ᴸ􋁉ˢ 𝑙
    
    Y = y
    ¿y󷹵𝗙: y=󰻾ʸ
    
    x, R = [⠤x], []
    ¿x🃌≡0 ∧ (𝕏≠␛⨝ ∨ bound_mode>0):
        ¿y(LR_def, LR_def)≕v≅󰮈: R = []
        ¿𝕏∈␛⟕␛⟖ ∨ bound_mode≡1: R = [v]
        ¡                     : R = [v,v]
    ¡:
        ¿𝕏∈␛⟕␛⟗ ∧ 󰮈≇𝕩≔y(LR_def, x₀): R.append(𝕩)
        ∀i∈x🃌󷸸 :
            R.extend(y(xᵢ₋₁, xᵢ)≕𝕩≅󰮈 ⭜ [xᵢ₋₁] ⭝ [xᵢ₋₁, 𝕩])
        ¿  x🃌  :                     R.append(x􍨄)
        ¿𝕏∈␛⟖␛⟗ ∧ 󰮈≇𝕩≔y(x􍨄, LR_def): R.append(𝕩)
    
    ↪ ␛L∉s∧Yᐹᔐ ⭜ ᐦ.join(Rᴍᔐ) ⭝ R

@OPWRAP_(⠤‹󷹌󷹍󷹎›)
⊢ _(𝕏, x=␀, y=␀, s=󷰾):  󰤱􊽨 ᔨ
    ¿sᐹ𝑡: n, L = s₀≡𝑙 ⭜ sᴙ  ⭝ s
    ¡   : n, L = s ≡𝑙 ⭜ 󷰾⋄✓ ⭝ s⋄✗
    ¿x≅␀∨¬𝗜(x): x,y = y,x
    
    ¿¬L∧xᐹᔐ∧(y≅␀∨yᐹᔐ):
        𝓐 = y≅␀ ⭜ () ⭝ (y,)
        ¿𝕏≡␛󷹎: ↪x.split(⠤𝓐, maxsplit=n) 󰈲
    
    ¿y≅␀: y=¬
    
    ¿yᐹᔐ≕YS∧¬L: x, y, Y, Δ = xᙡ0⋄(y🃌-1)ᴍ󷺹󰈲→⨝,yᑀ≡ᑅ, y🃌, y🃌-1
    ¡         : x, y,    Δ = 𝑙(x), 𝗙(y) ⭜y⭝ (yᑀ≡ᑅ), 0
    r, b = [], []
    ι, σ = 󷰾, 0
    last_v = ✗
    ➰(ι󷸊+1→<x🃌) ∧ σ<(n≡󷰾 ⭜∞⭝ n):
        𝓿 = x󰃬
        ¿y(𝓿)≕𝕩:
            ¿b∨𝕏≠␛󷹎:
                ¿𝕏≡␛󷹎:
                    r.append(b)
                ⸘𝕏≡␛󷹌 ∨ 𝕏≡␛󷹍∧¬last_v:
                    r.extend(𝕩≅󰮈⭜[b]⭝b⋄𝓿)
                    last_v = ✓
            b = [] ; ι󷸊+Δ ; σ󷸊+1
        ⸘𝕩≇󰮈:
            b.append(𝓿)
            last_v = ✗
    ¿b∨𝕏≠␛󷹎:
        b.extend(x󰃬﹕)
        r.append(b)
    ⸘x󰃬﹕:
        r.append(x󰃬﹕)
    ↪ YS ⭜ (rᐵᐹ𝑙⭜⟞ᐵ₀ᐸ⨝⭝⟞) ⭝ r

@OPWRAP_(⠤‹⊚⊜🟕🟖⊛⍟›)
⊢ _(𝕏, ƒ=␀, 𝑔=␀, s=∞):  󰤱 inconsistant as heck, fix b4 js moment
    ¿¬𝗙(ƒ): ƒ,𝑔 = 𝑔,ƒ
    ¿𝑔≅␀           : 𝑔=󰻾
    ⸘𝑔ᐹ𝑖 ∧ 𝕏∈␛⊚␛⊛␛⍟: 𝑔=Ticker(𝑔+1)
    ⊢ r(⠤𝔸,⠶𝕂):
         n, g = s, 𝑔(ƒ(⠤𝔸,⠶𝕂)≕f)
        n, f, g = s, 𝔸⭜𝔸₀⭝□, 𝑔(⠤𝔸, ⠶𝕂)
                         ↑ 󰤱 sensable?
        ¿𝕏≡␛⊚:
            ¿g: ↪f
            ➰0<n󷸊-1:
                ¿   𝑔(ƒ(f)≕f)    : ↪f
        ⸘𝕏≡␛⊜:
            ➰0<n󷸊-1:
                ¿g≡(𝑔(ƒ(f)≕nf)≕g): ↪f
                f = nf
        ⸘𝕏∈␛⊛␛⍟:
            rf = [f]
            ¿g: ↪ 𝕏≡␛⊛ ⭜rf⭝ []
            ➰0<n󷸊-1:
                𝑔(ƒ(f)≕f)≕g
                ¿¬g∨𝕏≡␛⊛: rf.append(f)
                ¿g      : ↪ rf
        ⸘𝕏∈␛🟕␛🟖:
            rf, rg = [f], [g]
            ➰0<n󷸊-1:
                ¿𝑔(ƒ(f)≕f)≕g∈rg:
                    ¿𝕏≡␛🟖: ↪ rf
                    ↪ (rg 󰑅ᔨ 󰲡x≡g) 󷸻 rf
                rf.append(f)
                rg.append(g)
        ↪□
    ↪ r

@OPWRAP_
⊢ 𝌂´(x, y=␀, s=ↀ, 𝘪=✗):  󰤱 xᐹ𝑖 ⇒ x≔x⭥
    ¿¬x: ↪ []
    ¿xᐹ𝑖: x=x⭥
    ¿y≅␀: y=𝑏
    ¿𝘪:
        ↪ x⭥ 𝌂ˢ (yᐹ𝗙 ⭜i↦y(xᵢ)󰅂⭝ y)
    ⸘yᐹ𝑖: ↪ [x﹕, x﹕]
    ⸘¬𝗙(y):
        𝗜(y)⨳
        y = 𝑠(y󰈲􍯏⁺􊿁ˣ􋌵󷺹<0)
        R,𝑅 = [],[]
        ∀𝕚,𝕧∈↨x:
            ¿𝕚∈y:
                𝑅.append(R)
                R = []
            R.append(𝕧)
        ¿R: 𝑅.append(R)
        ↪ 𝑅
    𝑟,R,𝑅 = y(𝟘≔x₀),[𝟘]⋅(𝟘≇󰮈),[]
    ∀𝕚,𝕧∈(↨x)₁﹕:  superscript only matters at this point
        ¿y(𝕧)≕r≠𝑟:
            𝑅.append(R)
            𝑟,R = r,[]
            ¿¬s󷸊-1:
                𝑅.append(x[𝕚+(r≅󰮈):])
                ⇥
        ¿r≇󰮈: R.append(𝕧)
    ¿R: 𝑅.append(R)
    𝑅 = 𝑅󰈳󷺹≡[]
    ¿xᐹᔐ: 𝑅 = 𝑅󰈲􍫟􌿑􊾖󷺹󷹵ᔐ
    ↪ 𝑅

@OPWRAP_(⠤‹󱅏›)
⊢ _(𝕏,x=␀,y=␀,s=␀):
    ⊢ ƒ():
        ¿𝕏≡␛:
            𝗜(x)∨𝗜(y) ⨳ 
            𝒾, n = 𝗜(x) ⭜(x,y)⭝ (y,x)
            ¿n≅␀: ↪shuffle(𝕩≔𝑙∘𝒾) ► 𝕩
            ↪ n⭥ᴍ𝚲choice(𝒾)
        ¿␀≅x∧y≅␀: ↪uniform(⠤𝕏≡␛⭜∓1⭝0⋄1)
        ƒ = 𝕏≡␛ ⭜uniform⭝ randint
        ¿␀≇x∧y≇␀: ↪ƒ(x,y)
        ¿𝗜(𝕩≔𝕣(x⋄y)₀): ↪ƒ(⠤𝕩)
        ¡            : ↪ƒ(0,𝕩)
        ⨳✗
    ↪ s≅␀ ⭜ƒ⭝ ⍁⛶⋅sꟿƒ

󱀘 Ticker:
    __slots__ = ␛i,
    __init__ = ⥌𝕊,i↦𝕊ⁱ≔i→►□
    __call__ = 𝕊↦𝕊ⁱ󷸊-1→►𝕊
    __bool__ = 𝕊↦¬𝕊ⁱ
    __repr__ = 𝕊↦‹Ticker[i=⟦𝕊ⁱ⟧]›
󱀘 TimerState:
    __init__ = ⥌𝕊,𝖲↦𝕊􋊡≔𝖲→►□
    __bool__ = 𝕊↦𝕊􋊡 ˢ
    __call__ = 𝕊↦𝕊 ⭜𝕊􋊡 ʳ⭝ 𝕊􋊡 ʳ.copy
    __repr__ = 𝕊↦‹Timer[⟦"ID"􊶊􌋄􋘲􊫀􊮥₀⟧; ⟦𝕊􋊡 ʸ⫰⟧s; ⟦‹Running Completed›⍭→􊴎􊮎􊶊⟧; ⟦𝕊􋊡 ⁿ⟧ Remaining loops]=⟦𝕊􋊡 ʳ⟧›

@OPWRAP_(⠤‹󰔛󱫩›)
⊢ _(𝕏,𝚡=1,𝚢=1,𝚜=␀):
    ¿𝚡ᐹ𝑖|𝑓: ↪PL_SLEEP(𝚡)
    ⨳ 𝚡ᐹ𝗙
    (𝚢ᐹî∧𝚢󷸚)≕𝔱𝔪 ⭜ 𝚢≔𝚢󷸚
    𝖲 = ℵ(n=𝚜≅␀⭜1⭝𝚜, y=𝚢, s=✗, r=⍁, 𝔱𝔪=𝔱𝔪)
    ⊢ ƒ():
        𝖲ʸ>0 ⭜ PL_SLEEP(𝖲ʸ⫰)
        ➰𝖲ⁿ󷸋-1:
            ¿𝖲􋈹􋈲:  retarded
                j=ℵ(t=0)
                𝖲ʳ.append(𝔗(󷺻󰻾⊚ᐳjᵗᐸ∘0→►𝖲ʳ􍪴≔𝚡, 𝖲ʳ🃌))
                jᵗ=1
            ¡: 𝖲ʳ.append(𝚡)
            𝖲ⁿ ⭜ PL_SLEEP(𝖲ʸ⫰)
        𝖲ˢ≔✓
        ↪ 𝚜≅␀⭜𝖲ʳ₀⭝𝖲ʳ
    ↪ 𝕏≡␛󱫩 ⭜𝔗(ƒ)►TimerState(𝖲)⭝ ƒ

𝕣 = 󰲡[y∀y∈x¿y≇␀]
🃌´ = len
ᐹ´ = ⥌x=␀,y=␀↦x≅␀∨␀≅y⭜type(x≅␀⭜y⭝x) ␛
              ⭝y∈TYPELIKE_⭜ y(x) ␛
              ⭝isinstance(x, isinstance(y,type|UnionType) ␛
                             ⭜y⭝ type(y))
ᐴ´,󷹵´,󷹴´ = ⥌x=␀,y=␀↦yᐹx, 󰲣xᐹy→¬, 󰲣yᐹx→¬
𝗙, 𝗜, 𝗛 = callable, 󰲡hasattr(x, "__iter__"), hash  ✗
TYPELIKE_ = { 𝗙, 𝗜, 𝗛 }
𝑀 = ⥌x,y="utf-8"↦xᐹᔐ ⭜x.encode(y,⠤𝔸,⠶𝕂)⭝ x.decode(y,⠤𝔸,⠶𝕂)
∘´ = OPWRAP_(⥌𝑓,y,s=1↦ 𝑓(⠤(y,)⋅s))
○´ = OPWRAP_(⥌𝑓,𝑔,s=1↦𝚲𝑓∘ˢ𝑔(⠤𝔸,⠶𝕂))  replaced later in file lol 󰤱
󰻾´ = 𝑐𝑑(      𝚲𝔸⭜𝔸₀⭝□, __repr__=𝚲␛󰻾,
        𝑔=󰲡𝑐𝑑(𝚲x     , __repr__=𝚲‹󰻾∘⟦x⟧›))
☾´ = 𝑐𝑑(ƒ≔ 𝚲print(⠤𝔸, ⠶{"flush":✓   }|𝕂)∨𝔸∧𝔸₀,
        𝑔=󰲡𝚲   ☾´(⠤𝔸, ⠶{"end"  :ᔐ(x)}|𝕂))
√´ = OPWRAP_(⥌x=␀,s=2↦xˢ􍩯)
®´ = 𝑐𝑑(ƒ≔󰲡x⭥ᐖ􋐳(τ⟞/x)+î􋐲(τ⟞/x), 𝑔=ƒ)
؆´ = OPWRAP_(⥌x,s=2↦®ˢᐵ⋅xˢ􍩯)
´ = 𝑐𝑑(t≔ƒ↦𝚲ƒ(⠤𝔸ᴍ𝑙⨁[], ⠶𝕂), 𝑔=t)
∾´ = ƒ↦𝚲ƒ(⠤𝔸ᴙ,⠶𝕂)
󱀘 ⴳ(𝑖): __new__,__call__,__repr__ = ℂ↦𝑖.__new__(ℂ,1), 𝚲ⴳ, 𝕊↦␛ⴳ
󱀘 ⴴ(𝑖): __new__,__call__,__repr__ = ℂ↦𝑖.__new__(ℂ,0), 𝚲ⴴ, 𝕊↦␛ⴴ
ⴳ, ⴴ = ⴳ(), ⴴ()

ſ´ = OPWRAP_(⥌x,y,s=␀↦reduce    (y,x,⠤s≅␀⭜()⭝(s,)         )  )
Ϝ´ = OPWRAP_(⥌x,y,s=␀↦accumulate(x,y,⠶s≅␀⭜{}⭝{"initial":s})⥉𝑙)
󰸵´ = OPWRAP_(⥌x,y,s=␀↦(y-x🃌≕l>0 ⭜  ([s≅␀ ⭜xᐹᔐ∧𝘀∨✗⭝ s]⋅l)󰌷x⭝ x) ᣆˣ􊾗􊾚 ⨝)
󰸷´ = OPWRAP_(⥌x,y,s=␀↦(y-x🃌≕l>0 ⭜x󰌷([s≅␀ ⭜xᐹᔐ∧𝘀∨✗⭝ s]⋅l)  ⭝ x) ᣆˣ􊾗􊾚 ⨝)
󰛔´ = OPWRAP_(⥌x,y,s=␀↦   R≔󷺹≅␀ ⭜ᐦ⛶⭝ ⟞ᐹᔐ ⭜⟞⛶⭝ ⟞ᚤᴍᔐᐸ             ␛
                      →► ƒ≔󷺻(󷺹󱑼􍪹􍦡󷺽○²R)(x,y) ſ􍪵 󰲣x.replace(⠤y)ᐸ ␛
                      →► (s≅␀⭜ƒ⭝ƒ∘s))

@OPWRAP_(⠤‹ᴍꟿ›)
⊢ _(𝕏, x=␀, ƒ=␀, s=1):
    𝙼 = 𝕏≡␛ᴍ ⭜_map_d⭝ 󰲥_map_d(x,󰲡y(⠤xᐹ𝗜 ⭜x⭝ (x,)),z)
    ¿sᐹᔐ:
        ¿s≡␛D: ↪(xᐹ)(         𝙼(x.items(), ƒ, 1))
        ⸘s≡␛K: ↪(xᐹ)(         𝙼(x.items(), ƒ, 1)󱑼x.values())
        ⸘s≡␛V: ↪(xᐹ)(x.keys()󱑼𝙼(x.items(), ƒ, 1))
    ¿𝕏≡␛ᴍ: ↪ _map_d(x,ƒ,s)
    ¡    : ↪ _map_d(x,󰲡ƒ(⠤xᐹ𝗜 ⭜x⭝ (x,)),s)

@OPWRAP_
⊢ ´(x=␀, y=␀, s=␀):
    ⊢ worker():
        ➰ tsks:
            try : ƒ = tsks.pop
            except IndexError: ↪
            except 𝑒 as ε:
                raise ε ◄← ‹Error in thread! ⟦ε⟧›☾
            ƒ
    ¿s≅␀: s = PL_CPU_COUNT_
    ¿y≅␀: y = 
    vals = x⭥ ; tsks = x↨ꟿ󷺻ᐳvals􍪴≔y(⟝)ᐸ󷺿
    (𝚲PL_THREAD_∘worker,)⋅(x🃌⤈s)ᴍᴍ
    ↪ vals

⊢ ⨳´(α=␀, β=␀):
    ¿α≅␀: α,β = β,α
    assert α, β≅␀ ⭜"Assertion failed!"⭝ β
    ↪ α

⊢ _wherest(𝕏, ƒ=𝑏, 𝘪=✗):
    ¿ƒ≅␀: ƒ=𝑏
    ∀i,x∈↨𝕏:
        ¿ƒ(x): ↪𝘪⭜i⭝x
󰑅´ = 𝑐𝑑(_wherest, I=𝚲_wherest(⠤𝔸,𝘪=✓)) ; 󰑅´􊯛􍺫=󰑅´􊯛󰂛

@OPWRAP_(⠤‹󷹓󷹔󷹕󷹖›)
⊢ _(𝕏,x,ƒ=𝑏,s=␀,𝘪=✗):  󰤱 make "last" versions of these. also ᔐ?
    ¿xᐹᔐᐴƒ: ƒ=󰲡x≠ƒ
    𝚒 = x󰑅ᔨƒ
    ¿𝚒≅□:
        ¿s≇␀: ↪s
        ↪ ¬𝘪∧xᐹᔐ ⭜ᐦ⭝ ⍁
    ¿𝘪: x󷸊⭥
    ¿𝕏≡␛󷹓: ↪ x   ﹕􀲪₊₁
    ⸘𝕏≡␛󷹔: ↪ x  􀲪﹕
    ⸘𝕏≡␛󷹕: ↪ x   ﹕􀲪
    ⸘𝕏≡␛󷹖: ↪ x₁₊􀲪﹕

⩔´,⩓´, = ∨´,∧´
󷺫´ = 󷺥´ = 󰲣x∨y→¬
󷺬´ = 󷺒´ = 󰲣x⭜(y⭜✗⭝x)⭝y⭜y⭝✓
󷺤´ = 󰲣x⭜(y⭜✗⭝x)⭝y
󷺦´ = 󰲣x⭜(y⭜y⭝✗)⭝y⭜✗⭝✓
∖´ = 󰲣xᐹ𝑠 ⭜x-𝑠(y)⭝ [z∀z∈x¿z∉y]
∪´ = 󰲣xᐹ𝑠 ⭜𝑠(x)|𝑠(y)⭝ [⠤x,⠤(z∀z∈y¿y∉x)]
∩´ = 󰲣xᐹ𝑠 ⭜𝑠(x)&𝑠(y)⭝ [z∀z∈x¿z∈y]
⨉´ = OPWRAP_(⥌x=␀,y=␀,s=␀↦product(⠤y≅␀∧s≇␀⭜[x]⋅s⭝(y≅␀⭜x⭝[x,y])⋅(s≅␀⭜1⭝s))ᴍ𝑙)
⊞´ = OPWRAP_(⥌⠤𝔸,s=1↦(ƒ≔⥌⠤𝔸,n=1,r=[]↦𝔸⋅nᑀ₀ᴍ󰲡⟞🃌>1 ⭜ƒ(⠤⟞₁﹕,r=r+[x])⭝ r+[x])(⠤𝔸, n=s))
ᣆ´ = 𝑐𝑑(ƒ ≔ 󰲣(𝔸🃌⭜𝔸₀∘x⭝x)⭜y∘x⭝x, 𝑔=a↦󰲣ƒ(x,y,𝗙(a)⭜a⭝󰻾ᵃ))
⛶´ = 𝑐𝑑(𝚲𝑙(𝔸), S=𝚲𝑠(𝔸), T=𝚲𝑡(𝔸), 𝑔=n↦𝚲n≥0 ⭜𝑙(𝔸)⋅n⭝ ⛶´⊚n⫰∘𝑙(𝔸))
ᴙ´ = 𝑐𝑑(󰲡xᐹ𝑖     ⭜󷹜xᴙ󷹜⭝ ␛
         xᐹᔐ|𝑙|𝑡 ⭜x﹕﹕􍨄⭝ ␛
         hasattr(x,"__reversed__") ⭜x.__reversed__()⭝ ␛
         [⠤x]﹕﹕􍨄󰅂,
        L=󰲡[⠤x]﹕﹕􍨄)

⍭´ = 󰲡␛ ∈x⭜x.split(␛ )ᴍ⍭⭝x.split(␛ )
ⴵ´ = 󰲡x>0⭜1⭝x∧󷰾∨0
▢´,⬓´,⬒´ = 𝚲round(⠤𝕣(𝔸)), floor○𝑓, ceil○𝑓
!´ = 󰲡󷸺x⨀1
…´ = 󰲣𝑙←range(x,y)
∓´,±´ = 𝚲-´⋄+´ᐵ(⠤𝕣(𝔸)), 𝚲+´⋄-´ᐵ(⠤𝕣(𝔸))
⪢´ = OPWRAP_(⥌x,y=1↦xᐹᔐ|𝑙|𝑡 ⭜x∧←x􍈼﹪􊹳ₓ􍪪ᵢ﹕+x﹕ᵢ⭝ x >> y)
⪡´ = OPWRAP_(⥌x,y=1↦xᐹᔐ|𝑙|𝑡 ⭜x∧←x ⪢ ¯y       ⭝ x << y)
◄´,►´ = RET_L, RET_R
⊊´,⊋´ = 󰲣(α≔𝑠←x).issubset(β≔𝑠←y)∧α≠β, 󰲣(α≔𝑠←y).issubset(β≔𝑠←x)∧α≠β
⊂´,⊃´ = 󰲣𝑠(x).issubset(𝑠←y), 󰲣𝑠(y).issubset(𝑠←x)
⊄´,⊅´ = 󰲣¬(x⊂y), 󰲣¬(x⊃y)
∋´,∌´ = 󰲣y∈x, 󰲣y∉x
∣´,∤´ = 󰲣gcd(x,y)≡x, 󰲣gcd(x,y)≠x
↨´,⭥´ = 󰲡𝑙(enumerate(x)), 󰲡𝑙←range(xᐹ𝗜 ⭜x🃌⭝ 𝑖(x))
󷸛´,󷸚´,󷸜´ = 󰲡x.real, 󰲡x.imag, 󰲡(x.real, x.imag)  󰤱
⫰´,⫯´,󷹒´ = 󰲡xᐹᔐ⭜x.upper()⭝+abs(x), 󰲡xᐹᔐ⭜x.lower()⭝¯abs(x), 󰲡xᐹᔐ⭜x.swapcase()⭝¯x
󷹄´ = OPWRAP_←⥌x,y,s=␀↦(R≔s↦x⤉s⤈y)►(s≅␀⭜R⭝R(s))
⍉´ = 𝑐𝑑(󰲡x󱑼, 𝑔=󰲡y↦y󱑼ˣ)
󷹝´ = OPWRAP_←⥌x=␀,s=␀↦xᐹ𝑖 ⭜chr(x)⭝ xᐹᔐ∧(x🃌≡1∧s≠␛L) ⭜ord(x)⭝ (xᴍ󷹝) ᣆˣ􊿥􊾗􋇖 ⨝

@OPWRAP_
⊢ 󷹜´(x=␀,y=␀,s=␀):
    y≅␀ ⭜ y≔(xᐹᔐ⭜10⭝1)
    s≅␀ ⭜ s≔10
    ¿xᐹᔐ: ↪𝑖(x∨␛0,y)
    ℕ𝓑 = 󷺻 󷺹⹏🃌⟝ᐸ⍟¬∘⟞ ᐖ⟝􍪴﹪􊹳􍪸ᐸ ᴙ ⨝ 󷺿
    ℤ𝓑 = 󷺹<0→⋅␛-→+←ℕ𝓑(⟞⫰,⟝)󰸵􍪹􊿥𝓐₀ 󷺿
    ↪ ℤ𝓑(x, 48󷸻57󷹝+65󷸻90󷹝→󷸹s, y)

@OPWRAP_(⠤‹⤉⤈›)
⊢ _(𝕏, x=␀, y=␀, s=␀, 𝘪=✗):
    𝑓 = 𝕏≡␛⤉⭜<⭝>
    
    ¿y≅␀: v,ƒ = x    , 󰻾
    ⸘yᐹ𝗙: v,ƒ = x    , y
    ¡   : v,ƒ = [x,y], 󰻾
    
    𝔟=𝔵=𝔦=␀
    ∀𝚒,𝚋∈v↨:
        ¿ƒ(𝚋)≕𝚡≅󰮈: ↺
        ¿𝔵≇␀ ∧ ¬𝑓(𝔵,𝚡): ↺
        𝔟,𝔵,𝔦 = 𝚋,𝚡,𝚒
    ↪ 𝔟≇␀ ⭜(𝘪⭜𝔦⭝𝔟)⭝ s≇␀ ⭜s⭝ ValueError

@OPWRAP_
⊢ ⬄´(x=␀,y=␀,s=␀):  󰤱
    ¿xᐹᔐ ∧← y≅␀ ∨ yᐹᔐ:
        ↪x.strip(⠤𝕣((y,)))
    ✗⨳  󰤱

⊢ ⋀´(𝑋, v=✓):
    ∀v∈𝑋:
        ¿¬v:⇥
    ↪v
⊢ ⋁´(𝑋, v=✗):
    ∀v∈𝑋:
        ¿ v:⇥
    ↪v

@OPWRAP_(⠤‹󱑼󷹅›)
⊢ _(𝕏, x=␀, y=␀, s=␀):
    𝙰 = (y≅␀ ⭜x⭝ (x,y))ᴍ𝑙
    ¿s≅␀:
        ¿𝕏≡␛󷹅: 𝙰󷸊ᐵ􍪴􊹳₋􍪸﹕ᐘ⤈⭠𝙰ᴍ🃌
    ¡:
        l = 𝙰ᴍ🃌→⤉
        𝙰 󷸊 ᴍ(𝕏≡␛󱑼⭜ 󷺹󰸷ˢlᐸ ⭝ 󷺹󰸵ˢlᐸ)
    ↪ zip(⠤𝙰)ᴍ𝑙

@OPWRAP_(⠤‹󰒼󰒽›)
⊢ _(𝕏, 𝚡=␀, 𝚢=󰻾, s=␀, 𝘪=✗):
    𝚡 = [⠤𝚡]
    𝚇 = (𝚡ᴍ𝚢)󱑼(𝚡⭥)󰈳󰲡x₀≅󰮈
    𝚇.sort(reverse=𝕏≡␛󰒽)
    ↪ 𝚇ᴍ󰲡 𝘪⭜x₁⭝ 𝚡ₓ􊬤

@OPWRAP_
⊢ ´(𝚡,ƒ=𝑏,s=␀):
    ¿ƒ󷹵𝗙: ƒ=󷺹≡ᑅƒ ֎ ƒ󷸊ᑀ≡󷺽 ֎
    ¿s≇␀:
        ¿s≡␛S: ↪(𝚡ƒ).items 󰒼 → ᴍ󰲡x₁
        ⸘s≡␛B: ↪{✓:[],✗:[],⠶𝚡ƒ}󷸻⭥2
        ✗ ⨳ ‹Invalid modifier for !›
    r = {}
    ∀z∈𝚡:
        ¿ƒ(z)≕𝕩≅󰮈: ↺
        ¿𝕩∈r: r􊶨.append(z)
        ¡   : r􊶨 = z⛶
    ↪ r

󱀘 𝑙𝑙(𝑙): □
⊢ ⋄´(x,y):
    ¿xᐹ𝑙𝑙: ↪ y≅󰮈 ⭜x⭝ 𝑙𝑙(x+[y])
    v = 𝑙𝑙()
    ¿x≇󰮈: v.append(x)
    ¿y≇󰮈: v.append(y)
    ↪ v
⊢ ´(ƒ,⠤𝔸,⠶𝕂):
    ¿𝗙(ƒ): ↪ ƒ(⠤𝔸,⠶𝕂)
    ¿𝗜(ƒ):
        ∀x∈ƒ: pass
        ↪ ƒ
    ✗⨳‹⟦ƒ⟧ is not iterable or callable.›

@OPWRAP_
⊢ ᚤ´(x, y=󰻾, 𝘪=✗):
    s, r = [], []
    ∀i,z∈x↨:
        ¿(v≔y(z))∈s ∨ v≅󰮈: ↺
        s.append(v)
        r.append(𝘪⭜i⭝z)
    ↪ r

@OPWRAP_
⊢ 󰌷´(x=␀, y=␀, s=␀):
    ¿x≇␀ ∧ y≇␀ ∧ xᐹ𝑖ᐴy:
        ↪ ‹⟦x⫰󷹜⟧⟦y⫰󷹜⟧›󷹜⋅←xⴵ⋅ⴵy∨1
    ¿s≅␀: s = 1
    ¿y≇␀: x = [x, y]
    v = [⠤chain(⠤x)]
    ¿s>1: ↪ v󰌷ˢ⁻¹
    ↪ v

@OPWRAP_
⊢ 󷹁´(x, s=␀):
    ƒ = hasattr(x,"__inverse__") ⭜getattr(x,"__inverse__")⭝ ␀
    ¿s≅␀:
        ¿ƒ≅␀:
            ¿xᐹ(ᐹî)|𝑖|𝑓: ↪x􍨅
            ✗⨳‹whom›
        ↪ x.__inverse__()
    ¿hasattr(x, "__inverse__"):
        ↪ s≅␀⭜ƒ()⭝ƒ(s)
    ¿𝗜(s):
        d = sᴍx→󱑼s→󰲡x₀󰅂ꟿⱽ󰲣yᴍ󰲡x₁
        ↪ 𝚲𝔸🃌≡0⭜d⭝d.get(𝔸₀,[])
    ✗⨳‹No __inverse__ for ⟦x⟧ nor valid domain provided.›

@OPWRAP_
⊢ ᕋ´(𝚡,𝚢=␀,s=␀):  󰤱 strings, chaining multiple
    𝚡ᐹ𝗜 ⨳ ‹⟦𝚡⟧󷹵𝗜›
    𝚜≇␀ ⨳ ‹ᕋ requires modifier›
    𝚡 = (𝚡ᐹᔐ ≕ is_str) ⭜𝚡󰌷⭝ 𝚡.copy
    𝚢 = 𝚢≅␀ ⭜⍁⭝ 𝚢 ᣆ􀳋􀸳􋊪 ⛶
    𝚜 = sᐹ𝑖 ⭜slice(s󷸊%🃌𝚡, s+1)⭝ s
    ¿𝚜ᐹslice:
        𝚡􀲾 = 𝚢
    ⸘𝚜ᐹ𝗜:
        ∀i,(z,n) ∈ 𝚜ᐵ%🃌𝚡ᐸ󰒽⭢𝌂󰻾ᐵ₀⋄⟞🃌ᐸ↨:
            ¿𝚢≅␀ ∨ i≥🃌𝚢: 󰆴𝚡
            ¡          : 𝚡﹕₊₁ = 𝚢ᵢ⛶ⁿ
    ¡:
        ✗ ⨳ ‹Modifier 󷹵 slice|𝑖|𝗜›
    ↪ is_str⭜𝚡⨝ᐦ⭝𝚡

@OPWRAP_
⊢ ᖘ´(𝚡=␀,𝚢=␀,s=␀):  󰤱􊽨 allow s󷹵𝗙
    ¿𝚢≅␀: 𝚡,𝚢 = 𝚢,𝚡
    𝚢≇␀ ⨳ ‹ᖘ needs right side›
    ⊢ ƒ(𝚡):
        𝚡 = (𝚡ᐹᔐ ≕ is_str) ⭜𝚡󰌷⭝ 𝚡.copy
        ids = s(𝚡)
        idsᐖ⟝≇󰮈⭜𝚡􍪴≔ᑈ𝚢(𝚡󷸻ids)
        ↪ is_str ⭜𝚡⨝ᐦ⭝ 𝚡
    ↪ 𝚡≅␀ ⭜ƒ⭝ ƒ(𝚡)

⊢ WINDOW_(𝕏, l=1, r=1, m=✓, s=□, Δ=1):  s≠␀ should mean Δ=1
    ¿lᐹ𝑓: l=𝑖(𝑓)
    ¿rᐹ𝑓: r=𝑖(𝑓)
    ¿Δᐹ𝑓: Δ=𝑖(𝑓)
    c = [⠤𝕏]≕𝕏🃌
    ¿s≅␀: ↪ 𝕏⭥ₗ﹕₋ᵣ﹕󰃏ᴍ󰲡𝕏ₓ₋ₗ﹕ₓ + 𝕏ₓ⛶⋅𝑏(m) + 𝕏ₓ₊₁﹕ₓ₊ᵣ₊₁
    V = s⛶⋅l +𝕏+ s⛶⋅r
    r = 𝕏⭥﹕﹕󰃏ᴍ󰲡Vₓ﹕ₓ₊ₗ + Vₓ₊ₗ⛶⋅𝑏(m) + Vₓ₊ₗ₊₁﹕ₓ₊ₗ₊ᵣ₊₁
    ¿s≅󰮈: ↪ rᴍ²󰻾
    ↪ r
@OPWRAP_(⠤‹ᙎᙡᗢᙧ›)
⊢ _(𝕏, x=␀, y=␀, s=␀):
    chnk = 1
    ¿𝗜(y)∧y🃌>2: ⠤y, chnk = y
    ¿y≇␀   : 𝟙,𝟚 = yᐹ𝑖 ⭜(y,y)⭝ y
    ⸘𝕏∈"ᙎᙡ": 𝟙,𝟚 =      (1,1)
    ⸘𝕏∈"ᗢᙧ": 𝟙,𝟚 = s≅␀ ⭜(1,1)⭝ (0,s)
    𝟛 = 𝕏∈"ᙡᙧ"
    𝟜 = 𝕏∈"ᙎᙡ" ⭜(s≅␀⭜□   ⭝s  )⭝ ␀
    𝟝 = 𝕏∈"ᗢᙧ" ⭜(s≅␀⭜chnk⭝s+1)⭝ chnk
    ↪ WINDOW_(x,𝟙,𝟚,𝟛,𝟜,𝟝)

⨁´,⨀´ = (+,⋅) ᴍ ƒ↦OPWRAP_(⥌x,y=␀,s=␀↦ſ´.ƒ(x,ƒ,⠤𝕣((y,s))))
∅´,⍁´ = (𝚲𝑠(), 𝚲[]) ᴍ ƒ↦OPWRAP_(⥌s=␀↦s≅␀ ⭜ƒ()⭝ s⭥ᴍƒ)

⊢ TACITM(λ, m):
    ↪ m≡1 ⭜(⥌x,⠤𝓐,⠶𝓚↦xᴍ󰲡λ(x,⠤𝓐,⠶𝓚))⭝ λ
⊢ TACITB(λ, m1, m2, d=□):
    ⊢ ƒ(l=␀, r=␀, ⠤𝓐, ⠶𝓚):
        ¿l≇␀∧r≇␀: □
        ⸘l≅␀∧r≅␀: ↪ ƒ
        ⸘d≡␛r   : ↪ ƒ(⬤,l¿r≅␀¡r,⠤𝓐,⠶𝓚)
        ¡       : ↪ ƒ(l¿r≅␀¡r,⬤,⠤𝓐,⠶𝓚)

        ¿m1≡1≡m2: ↪ l󱑼r ᴍ 󰲡λ(⠤x ,⠤𝓐,⠶𝓚)
        ⸘m1≡1   : ↪ l   ᴍ 󰲡λ(x,r,⠤𝓐,⠶𝓚)
        ⸘   1≡m2: ↪   r ᴍ 󰲡λ(l,x,⠤𝓐,⠶𝓚)
        ¡       : ↪        λ(l,r,⠤𝓐,⠶𝓚)
    ↪ ƒ

󱖔´ = OPWRAP_(⥌x=␀,y=␀,s=␀↦s≅␀ ⭜ƒ↦ƒ(⠤𝕣(x⋄y))󰅂⭝ s(⠤𝕣(x⋄y)))

TAC_ = ⥌x,d=□↦x₁≡󷰾∨x₂≡󷰾 ⭜TACITM(x₀,x₁₊􊭨ₓ􊬤􊮢􍨄)⭝ TACITB(⠤x,d=d)
␀TACIT´   = 𝑐𝑑(𝚲✗⨳, 𝑔= TAC_)
␀TACITL´  = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TAC_(x,␛l))
␀TACITR´  = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TAC_(x,␛r))
␀TACITLR´ = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TACITB(⠤x))

@OPWRAP_(⠤‹○⍜󰬫󰬩›)
⊢ _(𝕏,𝑓,𝑔,s=1):
    ¿𝕏∈"󰬩󰬫":
        s≡+󷺥-≡s → ⨳ ‹󰤱 generalize›
        
        ¿¬s ∨ 𝑔ᐹ𝗜:
            ⊢ ƒ(⠤𝔸):
                ¿s≡0:
                    𝙰 = [(𝑔ᣆ􋇕􊾗􋊧⛶)ᴍ, 𝔸]
                ¡:
                    𝚗 = 𝑔🃌⋅S≔⫰s
                    ¿s<0: 𝔸 󷸊⪢ 𝔸🃌-𝚗
                    ¿𝕏≡␛󰬫: α,β = 𝔸 𝌂        𝚗  → 󰸷󰁺󰁻 2
                    ⸘𝕏≡␛󰬩: β,α = 𝔸 𝌂 (𝔸🃌-𝚗→⤉0) → 󰸵󰁺󰁻 2
                    𝙰 = [(s<0⭜󱑼⭝󷹅)󰄗󰄘(αᙡ􍭓0⋄(S-1)⋄S, 𝑔) ᐵ₁(⠤⟞₀), β]
                ↪ 𝙰 ᣆ􋉑􋁤􋂝􍮡 ᴙ → 󰌷
        ¡:
            ⊢ ƒ(⠤𝔸):
                𝚊 = 𝔸🃌⹏(s⫰≕S∨1)→⋅S
                α, β = 𝔸⭥𝌂(𝕏≡␛󰬫 ⭜𝚊⭝ 𝔸🃌-𝚊)
                ¿α∧s<0: α, β = αᐵ+β🃌, β⭥
                α,β = 𝔸󷸻α, 𝔸󷸻β
                ¿𝕏≡␛󰬫: ↪ (⠤αᙧ󰀒⁻¹􋀬􋄫⁰ꟿ𝑔, ⠤β)
                ⸘𝕏≡␛󰬩: ↪ (⠤α, ⠤βᙧ󰀒⁻¹􋀬􋄫⁰ꟿ𝑔)
    ⸘𝑔ᐹ𝗙:
        ⊢ ƒ(⠤𝔸):
            n, m = 𝔸🃌≕L⹏S≔s⫰, L%S
            n≠0 ⨳ ‹󰤱 generalize›
            
            𝙰 = (𝕏≡␛○⭜󰸷⭝󰸵)􊲀(𝔸, L+(n-m)%n)
            v = 𝙰 ᙧⁿ⁻¹
            ¿m≠0:
                α,β = 𝕏≡␛○⭜(󷰾,0)⭝(0,󷰾)
                ¿𝕏≡␛⍜ 󷺤 s<0: v󰃤 = v󰃤𝌂󷺹≅⬤ᐸᴙ󰌷
                v󰃤 = v󰃤 ᐵ≇⬤⭜⟞⭝ᑈ v󰃥
            ↪ vꟿ𝑔
    ⸘𝑔ᐹ𝗜:
        ⊢ ƒ(⠤𝔸):
            𝔸🃌≥(𝑔🃌⋅S≔⫰s) ⨳ ‹󰤱 generalize›
            s>0          ⨳ ‹󰤱 generalize›
            𝕏≠␛⍜         ⨳ ‹󰤱 generalize›
            l, r = 𝔸𝌂←𝑔🃌⋅S≔⫰s
            𝙰 = lᙧ󰀒⁻¹ᐵ󰌷ᑅr
            ↪ 𝙰󱑼𝑔 ꟿ󰲣y(⠤x)
    ↪ 𝚲𝑓(⠤ƒ(⠤𝔸), ⠶𝕂)

⊢ ⓦ(⠤𝔸, 𝐀=□):
    𝐀󷸊∨⍁
    ⠤𝔸, ƒ = 𝔸
    ¿¬𝔸: ↪ƒ(⠤𝐀)
    𝕒, ⠤𝔸 = 𝔸
    with 𝕒 as 𝐚:
        𝐀.append(𝐚)
        ↪ ⓦ(⠤𝔸, ƒ, 𝐀=𝐀)

 dbg_wrap = 𝑓↦𝚲☾´(‹⟦𝑓.__name__⟧: 𝔸=⟦𝔸⟧, 𝕂=⟦𝕂⟧ ↓›) ► 𝑓(⠤𝔸,⠶𝕂)☾