exec ← "from math import *"
󰆴 factorial, e, pi, tau, sqrt, cbrt, pow
𝑜,𝑑,𝑏,𝑙,𝑡,𝑠,ᔐ,𝑖,𝑓 = object, dict, bool, list, tuple, set, str, int, float
⮌ py_naming_tools ⨡ py_escape_var as PEV
⮌ functools ⨡ reduce
⮌ itertools ⨡ chain, filterfalse, product, accumulate, zip_longest
⮌ random ⨡ shuffle, choice, uniform, randint
⮌ types ⨡ UnionType

LITERAL_OPS_ = {
      ␛*:󰲣x⋅y,  ␛/:󰲣x/y,  ␛<:󰲣x <y,  ␛>:󰲣x >y,
      ␛|:󰲣x|y,  ␛&:󰲣x&y,  ␛^:󰲣x ^y,  ␛%:󰲣x %y,
      ␛∧:󰲣x∧y,  ␛∨:󰲣x∨y,
    ␛/␛/:󰲣x⹏y,␛*␛*:󰲣x⌃y,␛<␛<:󰲣x<<y,␛>␛>:󰲣x>>y,
    ␛=␛=:󰲣x≡y,␛!␛=:󰲣x≠y,␛<␛=:󰲣x ≤y,␛>␛=:󰲣x ≥y,
      ␛+:𝚲𝔸ᵥ􊮝₀≅␀∨𝔸🃌≡1∨𝔸ᵥ􊮝₁≅␀ ⭜ +𝔸ᵥ ⭝ 𝔸₀+𝔸₁,
      ␛-:𝚲𝔸ᵥ􊮝₀≅␀∨𝔸🃌≡1∨𝔸ᵥ􊮝₁≅␀ ⭜ -𝔸ᵥ ⭝ 𝔸₀-𝔸₁,
   "and":󰲣x∧y, "or":󰲣x∨y, "not":󰲡¬x,
    "is":󰲣x≅y, "is not":󰲣x≇y,
    "in":󰲣x∈y, "not in":󰲣x∉y }

SETATTR = 󰲧w≡0⭜    setattr  (x,y,z)∨z⭝    setattr  (y,z,x)∨x
SETITEM = 󰲧w≡0⭜x.__setitem__(y  ,z)∨z⭝y.__setitem__(z  ,x)∨x
GETATTR = 󰲣    getattr  (x,y)
GETITEM = 󰲣x.__getitem__(  y)

þSTACK = []
þPSH, þPOP = 󰲡þSTACK.append(x)∨x, 󰲡þSTACK.pop(x)
def þPOPNR(): 󰆴 þSTACK[-1]

␀,⬤,󰮈 = NULL≔𝑜(), 𝑜(), 𝑜()
✓,✗,□,ᐦ = True, False, None, ''
𝒞ℳ, 𝒮ℳ = classmethod, staticmethod
↉,½,⅓,¼,⅕,⅙,⅐,⅛,⅑,⅒ = 0,1÷2,1÷3,1÷4,1÷5,1÷6,1÷7,1÷8,1÷9,1÷10
⅔,⅖,¾,⅗,⅜,⅘,⅚,⅝,⅞ = 2÷3,2÷5,3÷4,3÷5,3÷8,4÷5,5÷6,5÷8,7÷8
π, ℇ = 3.14159265358979323, 2.71828182845904523
∞, î, τ, 󷺍 = inf, complex(0, 1), 2π, ½π
󷱯, 󷱪, 󷱬, 󷱮, 󷱭, 󷱫 = ¯∞, ¯î, ¯τ, ¯󷺍, ¯π, ¯ℇ
􋐳, 􋐲, 􋐴, 􋑯 = cos, sin, tan, log
ↀ = 2³􊿙

OP_DUPER_ = ƒ↦󰲡ƒ(x,x,⠤𝔸,⠶𝕂) # ꜠
OP_SWAPA_ = ƒ↦󰲣ƒ(y,x,⠤𝔸,⠶𝕂) # ᵜ
OP_LNULL_ = ƒ↦󰲡ƒ(␀,x,⠤𝔸,⠶𝕂) # ⟥
OP_RNULL_ = ƒ↦󰲡ƒ(x,␀,⠤𝔸,⠶𝕂) # ⟤
OP_BSTAR_ = ƒ↦󰲡ƒ(⠤x ,⠤𝔸,⠶𝕂) # ≺

⊢ 𝑏𝑔(ƒ):
    󱀘 ω:
        __slots__ = ()
        __call__ = 𝕊↦ƒ(⠤𝔸)
        __getitem__ = ⥌𝕊,z↦󰲣ƒ(x,y,z)
    ↪ ω()
⊢ OPWRAP_(ƒ):
    󱀘 ω:
        __slots__ = ()
        ⊢ __call__(𝕊, x=␀, y=␀, ⠶𝕂):
            ¿x≅␀: x,y = y,x
            ↪ x≅␀ ⭜ƒ(⠶𝕂)⭝ y≅␀ ⭜ƒ(x,⠶𝕂)⭝ ƒ(x,y,⠶𝕂)
        __getitem__ = ⥌𝕊,s↦𝚲𝕊(⠤𝔸, s=s, ⠶𝕂)
    ↪ ω()
⊢ ERRTRI_(t, ƒ=␀, 𝑔=␀, s=Exception):
    𝑇 = s
    v = 𝕣((ƒ, 𝑔))
    ¿v🃌≡1:
        ƒ = v₀
        ¿t≡␛: raise ƒ
    ⊢ r(⠤𝔸, ⠶𝕂):
        try:
            ↪ ƒ(⠤𝔸, ⠶𝕂)
        except 𝑇 as ε:
            ¿v🃌≡1:
                ¿t≡␛󰔶: ↪ 𝔸⭜𝔸₀⭝□
                ¿t≡␛: ↪ ε
            ¿t≡␛: ↪ 𝑔
            ¿t≡␛󰔶: ↪ 𝑔(⠤𝔸, ⠶𝕂)
            ¿t≡␛: ↪ 𝑔(ε)
    ↪ r
⊢ _map_d(x,y,n=1):
    mapwd = 󰲣[𝕩 ∀z∈x ¿y(z)≕𝕩≇󰮈]
    ⊢ _get_depths(x):
        ¿¬𝗜(x): ↪{0}
        ¿xᐹᔐ: ↪{1}
        ↪ {w+1 ∀z∈x ∀w∈_get_depths(z)}
    ⊢ _map_neg_d(x,y,n):  kinda weird ngl
        ¿xᐹᔐ: ↪ n≡1⭜y(x)⭝n⭜x⭝mapwd(x,y)
        ¿0∈d≔_get_depths(x): ↪n⭜x⭝y(x)
        x = mapwd(x, 󰲡_map_neg_d(x,y,n))
        ↪ n∈d⭜y(x)⭝x
    ⊢ _map_pos_d(x,y,i):
        ¿¬i: ↪y(x)
        ¿xᐹᔐ: ↪mapwd(x,y)
        ↪ 𝗜(x) ⭜ mapwd(x, 󰲡_map_pos_d(x,y,i-1)) ⭝ y(x)
    ↪ n<0 ⭜ _map_neg_d(x,y,󷰾-n) ⭝ _map_pos_d(x,y,n≡∞⭜ↀ⭝n)
⊢ WINDOW_(𝕏, l=1, r=1, m=✓, s=□, Δ=1):  s≠␀ should mean Δ=1 
    c = 𝑙(𝕏)≕𝕏🃌
    ¿s≅␀: ↪ 𝕏⭥ₗ﹕₋ᵣ﹕󰃏ᴍ󰲡𝕏ₓ₋ₗ﹕ₓ + 𝕏ₓ⛶⋅𝑏(m) + 𝕏ₓ₊₁﹕ₓ₊ᵣ₊₁
    V = s⛶⋅l +𝕏+ s⛶⋅r
    r = 𝕏⭥﹕﹕󰃏ᴍ󰲡Vₓ﹕ₓ₊ₗ + Vₓ₊ₗ⛶⋅𝑏(m) + Vₓ₊ₗ₊₁﹕ₓ₊ₗ₊ᵣ₊₁
    ¿s≅󰮈: ↪ rᴍ²󰻾
    ↪ r
⊢ RANGE_(𝕏, x=␀, y=␀, s=␀):
    x≇␀∨␀≇y ⨳ ‹Range missing both values!›
    ¿𝔰≔s≅␀: s=1
    
    v = x≅␀⭜y⭝y≅␀⭜x⭝␀
    ¿(v≅␀ ∧ (x≇␀∧xᐹ𝑖) ∧ (y≇␀∧yᐹ𝑖)) ∨ (v≇␀∧vᐹ𝑖):
        ¿v≇␀: x, y = 0, v
        ¿𝕏≡␛󷸹: ↪ [⠤range(x  ,y  ,s)]
        ¿𝕏≡␛󷸺: ↪ [⠤range(x+1,y+1,s)]
        ¿𝕏≡␛󷸸: ↪ [⠤range(x+1,y  ,s)]
        ¿𝕏≡␛󷸻: ↪ [⠤range(x  ,y+1,s)]
    ¿v≇␀:
        𝗜(v) ⨳
        v=𝑙(v)
        ¿𝕏≡␛󷸸: ↪ (v₀, v₁﹕􍨄﹕ₛ, v􍨄)
        ¿𝔰: s=0
        ¿𝕏≡␛󷸹: ↪ v₀₊ₛ
        ¿𝕏≡␛󷸺: ↪ v􍨄₋ₛ
        ¿𝕏≡␛󷸻: ↪ v₀₊ₛ, v􍨄₋ₛ
    ¿𝗜∘x ∧ 𝗜∘y:
        ↪ [xₕ∀h∈y﹕﹕ₛ]
    ¿𝗜∘x ∧ yᐹ𝑖:
        ¿𝕏≡␛󷸹: ↪ x[   :y  :s]
        ¿𝕏≡␛󷸺: ↪ x[0+1:y+1:s]
        ¿𝕏≡␛󷸸: ↪ x[0+1:y  :s]
        ¿𝕏≡␛󷸻: ↪ x[   :y+1:s]
    ¿xᐹ𝑖 ∧ 𝗜∘y:
        ¿𝕏≡␛󷸹: ↪ y[slice(x  ,󷰾,s)]
        ¿𝕏≡␛󷸺: ↪ y[slice(x+1,□,s)]
        ¿𝕏≡␛󷸸: ↪ y[slice(x+1,󷰾,s)]
        ¿𝕏≡␛󷸻: ↪ y[slice(x  ,□,s)]
    ✗⨳‹Invalid arguments! ⟦ᐹx⟧ ⟦ᐹy⟧›
⊢ FILTER_(x=␀, y=␀, s=␀, neg=✗):
    y=y≅␀⭜󰻾⭝𝗙(y)⭜y⭝(yᑀ≡ᑅ)
    ¿neg: y=¬○y
    ¿s≡*: ↪ [𝕩∀z∈x¿y(z)≕𝕩∧𝕩≇󰮈]
    ¿s≅␀: ↪ xᴍ󰲡y(x)≕𝕩∧𝕩≇󰮈⭜x⭝󰮈
    s = 𝗙(s)⭜s⭝󰻾ˢ
    ↪ x ᴍ 󰲡y(x)≕𝕩≅󰮈⭜󰮈⭝𝕩⭜s(x)⭝x
⊢ JOIN_(𝕏, x=␀, y=␀, s=ᐦ, LR_def=□, bound_mode=␀):
    x≇␀∨␀≇y ⨳‹Join missing both values!›
    ¿x≅␀: x,y = y,x
    ¿sᐹ𝑡:
        ¿s₀ᐹ𝑖: bound_mode, 𝕏 = s
        ¡    : 𝕏, bound_mode = s
        𝕏ᐹᔐ ∧ bound_modeᐹ𝑖 ⨳ ‹Bad modifiers!›
    ⸘sᐹ𝑖:
        s, bound_mode = ᐦ, s
    ¿bound_mode≅␀: bound_mode = 𝕏≡␛⟗∧1∨0
    ¿x≅␀: x,y = y,x
    ¿y≅␀:
        𝗜(x) ⨳ ‹Single-arg ⟦t⟧ needs an iterable›
        ↪ 𝗻⋅(𝕏∈␛⟕␛⟗)+ᐦ.join(xᴍᔐ)+(␛⟗␛⟖∋𝕏)⋅𝗻 → ᣆ􋂝ᴸ􋁉ˢ 𝑙
    
    Y = y
    ¿¬𝗙(y): y=󰻾ʸ
    
    x, R = 𝑙(x), []
    ¿x🃌≡0 ∧ (𝕏≠␛⨝ ∨ bound_mode>0):
        ¿y(LR_def, LR_def)≕v≅󰮈: R = []
        ¿𝕏∈␛⟕␛⟖ ∨ bound_mode≡1: R = [v]
        ¡                     : R = [v,v]
    ¡:
        ¿𝕏∈␛⟕␛⟗ ∧ 󰮈≇𝕩≔y(LR_def, x₀): R.append(𝕩)
        ∀i∈x🃌󷸸 :
            R.extend(y(xᵢ₋₁, xᵢ)≕𝕩≅󰮈 ⭜ [xᵢ₋₁] ⭝ [xᵢ₋₁, 𝕩])
        ¿  x🃌  :                     R.append(x􍨄)
        ¿𝕏∈␛⟖␛⟗ ∧ 󰮈≇𝕩≔y(x􍨄, LR_def): R.append(𝕩)
    
    ↪ ␛L∉s∧Yᐹᔐ ⭜ ᐦ.join(Rᴍᔐ) ⭝ R
⊢ SPLIT_(𝕏, x=␀, y=␀, s=󷰾):
    ¿sᐹ𝑡: n, L = s₀≡𝑙 ⭜ sᴙ  ⭝ s
    ¡   : n, L = s ≡𝑙 ⭜ 󷰾⋄✓ ⭝ s⋄✗
    ¿x≅␀∨¬𝗜(x): x,y = y,x
    
    ¿¬L∧xᐹᔐ∧(y≅␀∨yᐹᔐ):
        𝓐 = y≅␀ ⭜ () ⭝ (y,)
        ¿𝕏≡␛󷹎: ↪x.split(⠤𝓐, maxsplit=n) 󰈲
    
    ¿y≅␀: y=¬
    
    ¿yᐹᔐ≕YS∧¬L: x, y, Y, Δ = xᙡ0⋄(y🃌-1)ᴍ⟥ᑀ󰈲→⨝, (yᑀ≡ᑅ), y🃌, y🃌-1
    ¡         : x, y,    Δ = 𝑙(x), 𝗙(y)⭜y⭝(yᑀ≡ᑅ), 0
    r, b = [], []
    ι, σ = 󷰾, 0
    last_v = ✗
    ➰(ι+=1→<x🃌) ∧ σ<(n≡󷰾⭜∞⭝n):
        𝓿 = x󰃬
        ¿y(𝓿)≕𝕩:
            ¿b∨𝕏≠␛󷹎:
                ¿𝕏≡␛󷹎:
                    r.append(b)
                ⸘𝕏≡␛󷹌 ∨ 𝕏≡␛󷹍∧¬last_v:
                    r.extend(𝕩≅󰮈⭜[b]⭝b⋄𝓿)
                    last_v = ✓
            b = [] ; ι += Δ ; σ += 1
        ⸘𝕩≇󰮈:
            b.append(𝓿)
            last_v = ✗
    ¿b∨𝕏≠␛󷹎:
        b.extend(x󰃬﹕)
        r.append(b)
    ⸘x󰃬﹕:
        r.append(x󰃬﹕)
    ↪ YS ⭜ (rᐵᐹ𝑙⭜⟞ᐵ₀ᐸ⨝⭝⟞) ⭝ r
⊢ FBALZ_(t, ƒ=␀, 𝑔=␀, s=∞):
    ¿¬𝗙(ƒ): ƒ,𝑔 = 𝑔,ƒ
    ¿𝑔≅␀       : 𝑔=󰻾
    ⸘t≡␛⊚ ∧ 𝑔ᐹ𝑖: 𝑔=Ticker(𝑔)
    ⊢ r(⠤𝔸,⠶𝕂):
        n, g = s, 𝑔(ƒ(⠤𝔸,⠶𝕂)≕f)
        ¿t≡␛⊚:
            ¿g: ↪f
            ➰0<n-=1:
                ¿   𝑔(ƒ(f)≕f)   : ↪f
        ⸘t≡␛⊜:
            ➰0<n-=1:
                ¿g≡(𝑔(ƒ(f)≕f)≕g): ↪f
        ⸘t∈␛🟕␛🟖:
            rf, rg = [f], [g]
            ➰0<n-=1:
                ¿𝑔(ƒ(f)≕f)≕g∈rg:
                    ¿t≡␛🟖: ↪ rf
                    ↪ (rg 󰑅ᴵ 󰲡x≡g) 󷸻 rf 
                rf.append(f)
                rg.append(g)
        ↪□
    ↪ r
@OPWRAP_
⊢ 𝌂´(x, y=␀, s=ↀ):
    ¿¬x: ↪ []
    ¿y≅␀: y=𝑏
    ⸘yᐹ𝑖: ↪ [x﹕, x﹕]
    ⸘¬𝗙(y):
        𝗜(y)⨳
        y = 𝑠(y)
        R,𝑅 = [],[]
        ∀𝕚,𝕧∈↨x:
            ¿𝕚∈y:
                𝑅.append(R)
                R = []
            R.append(𝕧)
        ¿R: 𝑅.append(R)
        ↪ 𝑅
    𝑟,R,𝑅 = y(𝟘≔x₀),[𝟘]⋅(𝟘≇󰮈),[]
    ∀𝕚,𝕧∈(↨x)₁﹕:  superscript only matters at this point
        ¿y(𝕧)≕r≠𝑟:
            𝑅.append(R)
            𝑟,R = r,[]
            ¿¬s-=1:
                𝑅.append(x[𝕚+(r≅󰮈):])
                ⇥
        ¿r≇󰮈: R.append(𝕧)
    ¿R: 𝑅.append(R)
    𝑅 = 𝑅󰈳⟥ᑀ≡[]
    ¿xᐹᔐ: 𝑅 = 𝑅󰈲􍫟􌿑􊾖⟥ᑀ󷹵ᔐ
    ↪ 𝑅

⊢ RANDOM_(𝕏,x=␀,y=␀,s=␀):
    ⊢ ƒ():
        ¿𝕏≡␛:
            𝗜(x)∨𝗜(y) ⨳ 
            𝒾, n = 𝗜(x) ⭜(x,y)⭝ (y,x)
            ¿n≅␀: ↪ shuffle(𝕩≔𝑙∘𝒾) ► 𝕩
            ↪ n⭥ᴍ𝚲choice(𝒾)
        ¿␀≅x∧y≅␀: ↪uniform(⠤𝕏≡␛⭜∓1⭝0⋄1)
        ƒ = 𝕏≡␛ ⭜uniform⭝ randint
        ¿␀≇x∧y≇␀: ↪ƒ(x,y)
        ¿𝗜(𝕩≔𝕣(x⋄y)₀): ↪ƒ(⠤𝕩)
        ¡            : ↪ƒ(0,𝕩)
        ⨳✗
    ↪ s≅␀ ⭜ƒ⭝ []⛶⋅sꟿƒ
        
󱀘 Ticker:
    __slots__ = ␛i,
    __init__ = ⥌𝕊,i↦𝕊ⁱ≔i→►□
    __call__ = 𝕊↦𝕊ⁱ-=1→►𝕊
    __bool__ = 𝕊↦¬𝕊ⁱ
    __repr__ = 𝕊↦‹Ticker[i=⟦𝕊ⁱ⟧]›
󱀘 𝑐𝑑(𝑑):
    ⊢ __init__(𝕊, ƒ, ⠤𝔸, 𝑔=□, ⠶𝕂):
        𝕊.ƒ, 𝕊.𝑔 = ƒ, 𝑔
        super().__init__(⠤𝔸,⠶𝕂)
    __call__ = 𝕊↦𝕊.ƒ(⠤𝔸,⠶𝕂)
    __repr__ = 𝕊↦super().__getitem__("__repr__")(𝕊) ¿"__repr__"∈𝕊¡ super().__repr__()
    __getitem__ = ⥌𝕊,x↦super().__getitem__(x) ¿𝗛(x)∧super().__contains__(x)¡ 𝕊.𝑔(x)

🃌´ = len
𝕣 = 󰲡[y∀y∈x¿y≇␀]
𝗙, 𝗜, 𝗛 = callable, 󰲡hasattr(x,"__iter__"), ERRTRI_(␛, hash, ✗)
TYPELIKE_ = { 𝗙, 𝗜, 𝗛 }

∘´ = OPWRAP_(⥌𝑓,y,s=1↦ 𝑓(⠤(y,)⋅s))
○´ = OPWRAP_(⥌𝑓,𝑔,s=1↦𝚲𝑓∘ˢ𝑔(⠤𝔸,⠶𝕂))  replaced later in file lol 󰤱
ᐹ´ = ⥌x=␀,y=␀↦x≅␀∨␀≅y ␛
              ⭜type(x≅␀⭜y⭝x)      ␛
              ⭝y∈TYPELIKE_⭜ y(x) ␛
              ⭝isinstance(x, isinstance(y,type|UnionType) ⭜y⭝ type(y))
ᐴ´,󷹵´,󷹴´ = ⥌x=␀,y=␀↦yᐹx, 󰲣xᐹy→¬, 󰲣yᐹx→¬
󰻾´ = 𝑐𝑑(      󰲡x, __repr__=𝚲␛󰻾,
        𝑔=󰲡𝑐𝑑(𝚲x, __repr__=𝚲‹󰻾∘⟦x⟧›))
☾´ = 𝑐𝑑(ƒ≔ 𝚲print(⠤𝔸, ⠶{"flush":✓   }|𝕂)∨𝔸∧𝔸₀,
        𝑔=󰲡𝚲   ☾´(⠤𝔸, ⠶{"end"  :ᔐ(x)}|𝕂))

󰈳´ = OPWRAP_(𝚲FILTER_(⠤𝔸,⠶𝕂,neg=✓))
󰈲´ = OPWRAP_(FILTER_)

⊢ ´(ƒ):
    ⊢ 𝒻(⠤𝜶,⠶𝜿):
        ⊢ 𝑓(⠤𝔸,⠶𝕂):
            𝓐, 𝔸 = 𝑙(𝜶), 𝑙(𝔸)
            𝓚 = 𝑙(𝜿.items())
            a, k = [], {}
            ➰𝓐:
                x = 𝓐.pop(0)
                a.append(𝔸.pop(0) ¿x≅⬤¡ x)
            ➰𝓚:
                x, y = 𝓚.pop(0)
                kₓ = 𝔸.pop(0) ¿y≅⬤¡ y
            ↪ ƒ(⠤a+𝔸,⠶k|𝕂)
        ↪ 𝑓
    ↪ 𝒻
´ = 𝑐𝑑(t≔ƒ↦𝚲ƒ(⠤𝔸ᴍ𝑙⨁[], ⠶𝕂), 𝑔=t)
∾´ = ƒ↦𝚲ƒ(⠤𝔸ᴙ,⠶𝕂)

󱀘 ⴳ(𝑖): __new__,__call__,__repr__ = ℂ↦𝑖.__new__(ℂ,1), 𝚲ⴳ, 𝕊↦␛ⴳ
󱀘 ⴴ(𝑖): __new__,__call__,__repr__ = ℂ↦𝑖.__new__(ℂ,0), 𝚲ⴴ, 𝕊↦␛ⴴ
ⴳ, ⴴ = ⴳ(), ⴴ()

ſ´ = 𝑏𝑔←⥌x,y,z=␀↦reduce    (y,x,⠤(z,)⋅←z≇␀)
Ϝ´ = 𝑏𝑔←⥌x,y,z=␀↦accumulate(x,y,⠶{}¿z≡␀¡{"initial":z})⥉𝑙
󰸵´ = 𝑏𝑔←⥌x,y,z=␀↦(y-x🃌≕l>0 ⭜  (z≅␀⭜xᐹᔐ∧𝘀∨✗⭝z➡⛶⋅l)󰌷x⭝ x) ᣆˣ􊾗􊾚 ⟥ᑀ⨝ᐦ
󰸷´ = 𝑏𝑔←⥌x,y,z=␀↦(y-x🃌≕l>0 ⭜x󰌷(z≅␀⭜xᐹᔐ∧𝘀∨✗⭝z➡⛶⋅l)  ⭝ x) ᣆˣ􊾗􊾚 ⟥ᑀ⨝ᐦ
󰛔´ = 𝑏𝑔←⥌x,y,z=␀↦  R≔(ᑀ≅␀ ⭜ᐦ⛶⭝ ⟞ᐹᔐ ⭜⟞⛶⭝ ⟞ᚤᴍᔐ) ␛
                 →►ƒ≔(ᐒR∘xᑀ󱑼􍪹􍦡ᑅR∘y →ſ􍪵 󰲣x.replace(⠤y)) ␛
                 →►(z≅␀⭜ƒ⭝ƒ∘z)󰅂

󱀘 ᴍ´:
    ƒ = 𝒮ℳ(_map_d)
    ⊢ __getitem__(𝕊, i):
        S, ƒ = 𝑠←i ¿iᐹ𝑡¡ (i,), □
        ¿S∋s≔␛D: ƒ = f↦󰲣type(x)←f(x.items(),y)
        ⸘S∋s≔␛K: ƒ = f↦󰲣type(x)←f(x.items(),y)󱑼x.values()
        ⸘S∋s≔␛V: ƒ = f↦󰲣type(x)←x.keys()󱑼f(x.items(),y)
        ¿ƒ:
            S.discard(s)
            ↪ ƒ(S ∧ 𝕊[S.pop()] ∨ 𝕊)
        ↪ ⥌x,y,i=i↦𝕊.ƒ(x,y,i)
    __call__ = ⥌𝕊,x,y↦𝕊.ƒ(x,y,1)
󱀘 ꟿ´(ᴍ´):
    ƒ = 𝒮ℳ(⥌x,y,i↦_map_d(x,󰲡y(⠤𝗜(x)⭜x⭝(x,)),i))

@OPWRAP_
⊢ ´(x=␀, y=␀, s=␀):
    ⊢ worker():
        ➰ tsks:
            try : ƒ = tsks.pop
            except IndexError: ↪
            except Exception as ε:
                raise ε ◄← ‹Error in thread! ⟦ε⟧›☾
            ƒ
    ¿s≅␀: s = PL_CPU_COUNT_
    vals = x⭥ ; tsks = x↨ꟿ󷺻ᐳvals􍪴≔y(⟝)ᐸ󷺿
    (𝚲PL_THREAD_∘worker,)⋅(x🃌⤈s)ᴍᴍ
    ↪ vals

󱀘 √´:
    __getitem__ = ⥌𝕊,x↦⥌y↦yˣ􍩯
    __call__ = ⥌𝕊,x↦x􊽲
√´,ᴍ´,ꟿ´ = √´(),ᴍ´(),ꟿ´()

⊢ ⨳´(α=␀, β=␀):
    ¿α≅␀: α,β = β,α
    assert α, "Assertion failed!"¿β≅␀¡β
    ↪ α

⊢ _wherest(𝕏, ƒ=𝑏, I=ⴴ):
    ¿ƒ≅␀: ƒ=𝑏
    ∀i,x∈↨𝕏:
        ¿ƒ(x): ↪I⭜i⭝x

∖´ = 󰲣x-𝑠(y) ¿xᐹ𝑠¡ [z∀z∈x¿z∉y]

 a⨉b = a⨉¹b
 A⨉ = ⨉(⠤A) = ⨉¹(⠤A)
 a⨉²b = [a,b]⨉² ∴  a⨉²b

⨉´ = OPWRAP_(⥌x=␀,y=␀,s=␀↦product(⠤y≅␀∧s≇␀⭜[x]⋅s⭝(y≅␀⭜x⭝[x,y])⋅(s≅␀⭜1⭝s))ᴍ𝑙)
⊞´ = OPWRAP_(⥌⠤𝔸,s=1↦(ƒ≔⥌⠤𝔸,n=1,r=[]↦𝔸⋅nᑀ₀ᴍ󰲡ƒ(⠤⟞₁﹕,r=r+[x]) ¿⟞🃌>1¡ r+[x])(⠤𝔸, n=s))
󷺥´ = 󰲣𝑏(x)∨𝑏(y)→¬
󷺤´ = 󰲣x⭜(y⭜✗⭝x)⭝y
󷺒´ = 󰲣x⭜(y⭜✗⭝x)⭝y⭜y⭝✓
󷺦´ = 󰲣x⭜(y⭜y⭝✗)⭝y⭜✗⭝✓
⩔´,󷺫´,⩓´,󷺬´ = ∨´,󷺥´,∧´,󷺒´

ᣆ´ = 𝑐𝑑(ƒ ≔ 󰲣(𝔸🃌⭜𝔸₀∘x⭝x)⭜y∘x⭝x, 𝑔=a↦󰲣ƒ(x,y,𝗙(a)⭜a⭝󰻾ᵃ))
󰑅´ = 𝑐𝑑(_wherest, I=𝚲_wherest(⠤𝔸,I=✓))
󷹓´ = OPWRAP_(⥌x,ƒ=𝑏,s=□↦x󰑅ᴵƒ≕ω≅□⭜s⭝x﹕󰃼₊₁)
󷹔´ = OPWRAP_(⥌x,ƒ=𝑏,s=□↦x󰑅ᴵƒ≕ω≅□⭜s⭝x󰃼﹕)
󷹕´ = OPWRAP_(⥌x,ƒ=𝑏,s=□↦x󰑅ᴵƒ≕ω≅□⭜s⭝x﹕󰃼)
󷹖´ = OPWRAP_(⥌x,ƒ=𝑏,s=□↦x󰑅ᴵƒ≕ω≅□⭜s⭝x󰃼₊₁﹕)
ᴙ´ = 𝑐𝑑(󰲡(xᐹᔐ⭜x⭝𝑙(x))﹕﹕₋₁, L=󰲡𝑙(x)﹕﹕₋₁)  reverse; ᴙᴸ to force 𝑙
⍭´ = 󰲡␛ ∈x⭜x.split(␛ )ᴍ⍭⭝x.split(␛ )
ⴵ´ = 󰲡x>0⭜1⭝x∧¯1∨0
⛶´ = 𝑐𝑑(𝚲𝑙(𝔸), S=𝚲𝑠(𝔸), T=𝚲𝑡(𝔸))
▢´ = 𝚲round(⠤𝕣(𝔸))
!´ = 󰲡󷸺x⨀1
…´ = 󰲣𝑙←range(x,y)
∓´,±´ = 𝚲-´⋄+´ᐵ(⠤𝕣(𝔸)), 𝚲+´⋄-´ᐵ(⠤𝕣(𝔸))
◄´,►´ = 󰲡x, 󰲣y
∪´,∩´ = 󰲣𝑠(x) | 𝑠(y), 󰲣𝑠(x) & 𝑠(y)
⊊´,⊋´ = 󰲣(α≔𝑠←x).issubset(β≔𝑠←y)∧α≠β, 󰲣(α≔𝑠←y).issubset(β≔𝑠←x)∧α≠β
⊂´,⊃´ = 󰲣𝑠(x).issubset(𝑠←y), 󰲣𝑠(y).issubset(𝑠←x)
⊄´,⊅´ = 󰲣¬(x⊂y), 󰲣¬(x⊃y)
∋´,∌´ = 󰲣y∈x, 󰲣y∉x
∣´,∤´ = 󰲣gcd(x,y)≡x, 󰲣gcd(x,y)≠x
⫰´,⫯´ = 󰲡+abs(x), 󰲡¯abs(x)
↨´,⭥´ = 󰲡𝑙←enumerate←x, 󰲡𝑙←range(xᐹ𝑖⭜x⭝x🃌)
⬓´,⬒´ = floor, ceil
󷸛´,󷸚´,󷸜´ = 󰲡x.real, 󰲡x.imag, 󰲡(x.real, x.imag)  󰤱
󷹝´ = OPWRAP_←⥌x=␀,s=␀↦xᐹ𝑖 ⭜chr(x)⭝ xᐹᔐ∧(x🃌≡1∧s≠␛L) ⭜ord(x)⭝ (xᴍ󷹝) ᣆˣ􊿥􊾗􋇖 ⨝
󷹜´ = OPWRAP_←⥌x=␀,y=␀,s=␀↦y≔(y≇␀⭜y⭝s≇␀⭜s⭝10) →►← (xᐹᔐ⭜𝑖(x,y)⭝(ℵ􋋖􋄓􋄷􊿑􋐎􊿒(2⋄10⋄8⋄16󱑼bin⋄(ᐳ"00"+󷺽○ᔐ)⋄oct⋄hex)(x)₂﹕))
󷹄´ = 𝑏𝑔←⥌x,y,z=␀↦(R≔z↦x⤉z⤈y)►(z≅␀⭜R⭝R(z))
⍉´ = 𝑐𝑑(󰲡x󱑼, 𝑔=󰲡y↦y󱑼ˣ)
⪢´ = OPWRAP_(⥌x,y=1↦xᐹ𝑙|𝑡 ⭜x∧←x􍈼﹪􊹳ₓ􍪪ᵢ﹕+x﹕ᵢ⭝ x >> y)
⪡´ = OPWRAP_(⥌x,y=1↦xᐹ𝑙|𝑡 ⭜x∧←x ⪢ ¯y       ⭝ x << y)

⊢ MINMAX(𝕏, x=␀, y=␀, s=␀):
    ¿x≅␀: x,y=y,x
    𝑓 = 𝕏≡␛⤉⭜<⭝>
    
    ¿y≅␀: v,ƒ = x    , 󰻾
    ⸘𝗙∘y: v,ƒ = x    , y
    ¡   : v,ƒ = [x,y], 󰻾
    
    𝔟=𝔵=␀
    ∀𝑏∈v:
        ¿ƒ(𝑏)≕𝑥≅󰮈: ↺
        ¿𝔵≅␀ ∨ 𝑓(𝔵,𝑥):
            𝔟,𝔵=𝑏,𝑥
    ↪ 𝔟≇␀⭜𝔟⭝s≇␀⭜s⭝ValueError

⊢ ⬄´(x=␀,y=␀):
    ¿x≅␀: x,y=y,x
    ¿xᐹᔐ ∧← y≅␀ ∨ yᐹᔐ:
        ↪x.strip(⠤𝕣((y,)))
    ✗⨳  󰤱

⊢ ⋀´(𝑋, v=✓):
    ∀v∈𝑋:
        ¿¬v:↪v
    ↪v
⊢ ⋁´(𝑋, v=✗):
    ∀v∈𝑋:
        ¿ v:↪v
    ↪v
OP_DUPER_ = ƒ↦󰲡ƒ(x,x,⠤𝔸,⠶𝕂) # ꜠
OP_SWAPA_ = ƒ↦󰲣ƒ(y,x,⠤𝔸,⠶𝕂) # ᵜ
OP_LNULL_ = ƒ↦󰲡ƒ(␀,x,⠤𝔸,⠶𝕂) # ⟥
OP_RNULL_ = ƒ↦󰲡ƒ(x,␀,⠤𝔸,⠶𝕂) # ⟤
OP_BSTAR_ = ƒ↦󰲡ƒ(⠤x ,⠤𝔸,⠶𝕂) # ≺

⊢ ZIP_(𝕏, x=␀, y=␀, s=␀):
    𝙰 = (y≅␀ ⭜x⭝ (x,y))ᴍ𝑙
    ¿s≅␀:
        ¿𝕏≡␛󷹅: 𝙰ᴍ= (󷺹􍪴􊹳₋􍪸﹕ᐘ 𝙰🃌-⤈(𝙰ᴍ🃌))
    ¡:
        l = 𝙰ᴍ🃌→⤉
        𝙰ᴍ= (𝕏≡␛󱑼⭜ 󷺹󰸷ˢlᐸ ⭝ 󷺹󰸵ˢlᐸ)
    ↪ zip(⠤𝙰)ᴍ𝑙

⨀´,⨁´ = (⋅,+) ᴍ ƒ↦󰲡ſ´(x,ƒ,⠤𝕣(𝔸))
󰒼´,󰒽´ = (✗,✓) ᴍ c↦⥌x,ƒ=␀↦
    sorted(xᴍ(ƒ≅␀⭜󰻾⭝ƒ)→󱑼x󰈳󰲡x₁≅󰮈, reverse=c)ᴍ󰲡x₁
´ = 𝑐𝑑(𝚲⥌I,ƒ=𝑏↦((ƒ≔(𝗙(ƒ)⭜ƒ⭝ᑀ≡ᑅƒ)) ► r≔{})→◄←Iᴍ󰲡ƒ(x)≕𝕩≇󰮈⭜r.setdefault(𝕩,[]).append(x)󰅂󰅂(⠤𝕣(𝔸),⠶𝕂),
       S=𝚲´(⠤𝔸,⠶𝕂).items 󰒼 ᴍ󰲡x₁,
       B=𝚲h≔{✓:[],✗:[],⠶´(⠤𝔸,⠶𝕂)}→►←[h₀,h₁])

󱀘 𝑙𝑙(𝑙): □
⊢ ⋄´(x,y):
    ¿xᐹ𝑙𝑙: ↪ y≅󰮈⭜x⭝𝑙𝑙(x+[y])
    v = 𝑙𝑙()
    ¿x≇󰮈: v.append(x)
    ¿y≇󰮈: v.append(y)
    ↪ v
⊢ ´(ƒ,⠤𝔸,⠶𝕂):
    ¿𝗙(ƒ): ↪ ƒ(⠤𝔸,⠶𝕂)
    ¿𝗜(ƒ):
        ∀x∈ƒ: pass
        ↪ ƒ
    ✗⨳‹⟦ƒ⟧ is not iterable or callable.›
⊢ ᚤ´(x=␀, y=␀):
    ¿x≅␀: x,y = y,x
    ¿y≅␀: y = 󰻾
    s, r = [], []
    ∀z∈x:
        ¿(v≔y(z))∈s ∨ v≅󰮈: ↺
        s.append(v)
        r.append(z)
    ↪ r

@OPWRAP_
⊢ 󰌷´(x=␀, y=␀, s=1):
    ¿y≇␀: x = [x, y]
    v = 𝑙(chain(⠤x))
    ¿s>1: ↪ v󰌷ˢ⁻¹
    ↪ v

⊢ ΩNDOW_(𝕏, x=␀, y=␀, s=␀):
    chnk = 1
    ¿𝗜(y)∧y🃌>2: ⠤y, chnk = y
    ¿y≇␀   : 𝟙,𝟚 = yᐹ𝑖 ⭜(y,y)⭝ y
    ⸘𝕏∈"ᙎᙡ": 𝟙,𝟚 =      (1,1)
    ⸘𝕏∈"ᗢᙧ": 𝟙,𝟚 = s≅␀ ⭜(1,1)⭝ (0,s)
    𝟛 = 𝕏∈"ᙡᙧ"
    𝟜 = 𝕏∈"ᙎᙡ" ⭜(s≅␀⭜□   ⭝s  )⭝ ␀
    𝟝 = 𝕏∈"ᗢᙧ" ⭜(s≅␀⭜chnk⭝s+1)⭝ chnk
    ↪ WINDOW_(x,𝟙,𝟚,𝟛,𝟜,𝟝)

ᙎ´,ᙡ´,ᗢ´,ᙧ´ = ‹ᙎᙡᗢᙧ›ᴍ󰲡OPWRAP_( ΩNDOW_(x))
´,󱅏´,´    = ‹󱅏󷺗›ᴍ󰲡OPWRAP_(RANDOM_(x))
󱑼´,󷹅´       = ‹󱑼󷹅󷺗󷺗›ᴍ󰲡OPWRAP_(   ZIP_(x))
⊚´,⊜´,🟕´,🟖´ = ‹⊚⊜🟕🟖›ᴍ󰲡OPWRAP_( FBALZ_(x))
´,󰔶´,´    = ‹󰔶󷺗›ᴍ󰲡OPWRAP_(ERRTRI_(x))
⨝´,⟕´,⟖´,⟗´ = ‹⨝⟕⟖⟗›ᴍ󰲡OPWRAP_(  JOIN_(x))
󷸹´,󷸺´,󷸸´,󷸻´ = ‹󷸹󷸺󷸸󷸻›ᴍ󰲡OPWRAP_( RANGE_(x))
󷹌´,󷹍´,󷹎´    = ‹󷹌󷹍󷹎󷺗›ᴍ󰲡OPWRAP_( SPLIT_(x))
⤉´,⤈´       = ‹⤉⤈󷺗󷺗›ᴍ󰲡OPWRAP_( MINMAX(x))

⊢ TACITM(λ, m):
    ↪ m≡1⭜󰲡xᴍλ󰅂⭝λ
⊢ TACITB(λ, m1, m2, d=□):
    ⊢ ƒ(l=␀, r=␀):
        ¿l≇␀∧r≇␀: □
        ⸘l≅␀∧r≅␀: ↪ ƒ
        ⸘d≡␛r   : ↪ ƒ(⬤,l¿r≅␀¡r)
        ¡       : ↪ ƒ(l¿r≅␀¡r,⬤)
        
        ¿m1≡1≡m2: ↪ l󱑼r ꟿ  λ
        ⸘m1≡1   : ↪ l   ᴍ 󰲡λ(x,r)
        ⸘   1≡m2: ↪   r ᴍ 󰲡λ(l,x)
        ¡       : ↪        λ(l,r)
    ↪ ƒ
TAC_ = ⥌x,d=□↦x₁≡󷰾∨x₂≡󷰾 ⭜ TACITM(x₀,xₓ􊬤􊮢􍨄􀸨₂􀸦₁) ⭝ TACITB(⠤x,d=d)
␀TACIT´   = 𝑐𝑑(𝚲✗⨳, 𝑔= TAC_)
␀TACITL´  = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TAC_(x,␛l))
␀TACITR´  = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TAC_(x,␛r))
␀TACITLR´ = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TACITB(⠤x))

⊢ COMPOSE_(𝕏,𝑓,𝑔,s=1):
    ¿𝕏∈"󰬩󰬫":
        s≡+󷺥-≡s → ⨳ ‹󰤱 generalize›
        
        ¿¬s ∨ 𝑔ᐹ𝗜:
            ⊢ ƒ(⠤𝔸):
                ¿s≡0:
                    𝙰 = [(𝑔ᣆ􋇕􊾗􋊧⛶)ᴍ, 𝔸]
                ¡:
                    𝚗 = 𝑔🃌⋅S≔⫰s
                    ¿s<0: 𝔸 ⪢= 𝔸🃌-𝚗
                    ¿𝕏≡␛󰬫: α,β = 𝔸 𝌂        𝚗  → 󰸷󰁺󰁻 2
                    ⸘𝕏≡␛󰬩: β,α = 𝔸 𝌂 (𝔸🃌-𝚗→⤉0) → 󰸵󰁺󰁻 2
                    𝙰 = [(s<0⭜󱑼⭝󷹅)󰄗󰄘(αᙡ􍭓0⋄(S-1)⋄S, 𝑔) ᐵ₁(⠤⟞₀), β]
                ↪ 𝙰 ᣆ􋉑􋁤􋂝􍮡 ᴙ → 󰌷
        ¡:
            ⊢ ƒ(⠤𝔸):
                𝚊 = 𝔸🃌⹏(s⫰≕S∨1)→⋅S
                α, β = 𝔸⭥𝌂(𝕏≡␛󰬫 ⭜𝚊⭝ 𝔸🃌-𝚊)
                ¿α∧s<0: α, β = αᐵ+β🃌, β⭥
                α,β = 𝔸󷸻α, 𝔸󷸻β
                ¿𝕏≡␛󰬫: ↪ (⠤αᙧ󰀒⁻¹􋀬􋄫⁰ꟿ𝑔, ⠤β)
                ⸘𝕏≡␛󰬩: ↪ (⠤α, ⠤βᙧ󰀒⁻¹􋀬􋄫⁰ꟿ𝑔)
    ⸘𝑔ᐹ𝗙:
        ⊢ ƒ(⠤𝔸):
            n, m = 𝔸🃌≕L⹏S≔s⫰, L%S
            n≠0 ⨳ ‹󰤱 generalize›
            
            𝙰 = (𝕏≡␛○⭜󰸷⭝󰸵)􊲀(𝔸, L+(n-m)%n)
            v = 𝙰 ᙧⁿ⁻¹
            ¿m≠0:
                α,β = 𝕏≡␛○⭜(󷰾,0)⭝(0,󷰾)
                ¿𝕏≡␛⍜ 󷺤 s<0: v󰃤 = v󰃤𝌂󷺹≅⬤ᐸᴙ󰌷
                v󰃤 = v󰃤 ᐵ≇⬤⭜⟞⭝ᑈ v󰃥
            ↪ vꟿ𝑔
    ⸘𝑔ᐹ𝗜:
        ⊢ ƒ(⠤𝔸):
            𝔸🃌≥(𝑔🃌⋅S≔⫰s) ⨳ ‹󰤱 generalize›
            s>0          ⨳ ‹󰤱 generalize›
            𝕏≠␛⍜         ⨳ ‹󰤱 generalize›
            
            l, r = 𝔸𝌂←𝑔🃌⋅S≔⫰s
            
            𝙰 = lᙧ󰀒⁻¹ᐵ󰌷ᑅr
            ↪ 𝙰󱑼𝑔 ꟿ 󰲣y(⠤x)
    ↪ 𝚲𝑓(⠤ƒ(⠤𝔸), ⠶𝕂)
○´,⍜´,󰬫´,󰬩´ = ‹○⍜󰬫󰬩›ᴍ󰲡OPWRAP_(COMPOSE_(x))

⊢ ⓦ(⠤𝔸, 𝐀=□):
    𝐀∨=[]
    ⠤𝔸, ƒ = 𝔸
    ¿¬𝔸: ↪ƒ(⠤𝐀)
    𝕒, ⠤𝔸 = 𝔸
    with 𝕒 as 𝐚:
        𝐀.append(𝐚)
        ↪ ⓦ(⠤𝔸, ƒ, 𝐀=𝐀)

 all this be weird
 󰤱 󰮈 work with ℵ
󱀘 ℵ´(𝑑):
    𝐶𝑛 = ␛ℵ
    __json__ = ⥌𝕊,cb,⠤𝓐,⠶𝓚↦ 𝑑(𝕊) ꟿⱽ 󰲣cb(y,⠤𝓐,⠶𝓚)
    __init__ = 𝕊↦super().__init__(⠤𝔸,⠶𝕂)
    __setattr__ = 𝑑.__setitem__
    __getitem__ = ⥌𝕊,x↦𝑑.__getitem__(𝕊,x) ¿x∈𝕊¡ 𝕊.getdef()
    __getattr__ = __getitem__
    __iter__ = 𝕊↦iter(𝕊.items())
    __repr__ = 𝕊↦‹⟦𝕊.__class__.𝐶𝑛⟧⟦‹[⟦h₀⟧]›¿0∈(h≔𝕊.__dict__)¡ᐦ⟧(⟦␛,𝘀→.join←𝕊.itemsꟿ󰲣‹⟦x⟧=⟦y⟧›⟧)›
    __call__ = 𝕊↦𝑑.update(𝕊,⠤𝔸,⠶𝕂)►𝕊
    __bool__ = 𝕊↦𝕊🃌>0
    __or__   = ⥌𝕊,x↦𝕊.copy()(x)
    ⊢ __getstate__(𝕊):
        ¿𝕊.hasdef(): ↪𝑑(𝕊), 𝕊.getdef()
        ¡          : ↪𝑑(𝕊),
    ⊢ __setstate__(𝕊, s):
        𝕊.__init__(s₀)
        ¿s🃌 > 1: 𝕊.setdef(s₁)
    ⊢ __pow__(𝕊, x):
        ¿x≡-: ↪𝑙∘𝕊.keys   
        ¿x≡+: ↪𝑙∘𝕊.values 
        ¿x≡*: ↪𝑙∘𝕊.items  
        ✗⨳
    hasdef = ⥌𝕊↦0∈𝕊.__dict__
    getdef = ⥌𝕊  ↦𝕊.__dict__₀
    setdef = ⥌𝕊,x↦𝕊.__dict__₀≔x →► 𝕊
    ⊢ copy(𝕊):
        r = type(𝕊)(super().copy())
        ¿𝕊.hasdef(): r.setdef(𝕊.getdef())
        ↪ r
󱀘 ℶ(ℵ´):
    𝐶𝑛 = ␛ℶ
    __iter__ = 𝕊↦iter(𝕊.values())
󱀘 _hwrap(𝑑):
    ⊢ __init__(𝕊, 𝑐):
        𝕊􋇑, 𝕊􋇛 = 𝑐, 𝑐􋆷􋇛
    __getitem__ = ⥌𝕊,x↦𝕊􋇑().setdef(x)
    __setitem__ = ⥌𝕊,x,y↦(⒯≔𝕊􋇑()).__setitem__(x,y) →►← ⒯
    __call__ = 𝕊↦𝕊􋇑(⠤𝔸,⠶𝕂)
    __or__   = ⥌𝕊,x↦𝕊􋇑()|x
    __pow__  = ⥌𝕊,x↦𝕊􋇑()⌃x
    __repr__ = 𝕊↦‹⟦𝕊􋇛⟧()›
    __bool__ = 𝚲✗
ℵ´ = _hwrap(ℵ´)
ℶ  = _hwrap(ℶ )

 dbg_wrap = 𝑓↦𝚲☾´(‹⟦𝑓.__name__⟧: 𝔸=⟦𝔸⟧, 𝕂=⟦𝕂⟧ ↓›) ► 𝑓(⠤𝔸,⠶𝕂)☾

⊢ 𝔦𝔪𝔭(x):
    match x:
        case ␛s:  system stuff
            ⨡ os, sys, shutil, subprocess
            ⮌ pathlib ⨡ Path as 𝐩
            ⮌ subprocess ⨡ Popen as 𝐫
            ⮌ time ⨡ time, sleep
            
            i=0
            ➰i+=1:
                G = sys._getframe(i).f_globals
                ¿G["__file__"]≠__file__: ⇥
            G[␛𝐩⥉PEV] = 𝐩
            G[␛𝐫⥉PEV] = 𝐫
            G[h≔PEV("𝐩𝐝")] = 𝚲G["__file__"] ⥉𝐩→.parent
            G["subprocess"] = subprocess
            G["os"], G["sys"], G["shutil"] = os, sys, shutil
            G["time"], G["sleep"] = time, sleep
            G["ldir"] = 𝚲os.chdir←Gₕ

⊢ 󱠨(c, ⠤𝔸, get_ns=✗, ns=□, fname=□,
    interactive_𝕂=□, no_isolate=✗,
    no_isolate_ƒ=󰲡exec(x,globals()), ⠶𝕂):  󱠨(x, return_code=✓)
    
    ⮌ refresher ⨡ basic_cpy_interactive_session
    cpy = basic_cpy_interactive_session(
        print_output=✓, ns=ns, fname="cpy_󱠨" ¿fname≅□¡ fname,
        code_cache_dir=__code_cache_dir__, gram_cache_dir=__gram_cache_dir__,
        header_carry=__header_namespace__, ⠶interactive_𝕂∨{})
    ¿no_isolate: # absolutely beaned
        ¬get_ns ∧ ns≅□ ∧ fname≅□ ⨳
        c = cpy(c, ⠤𝔸, return_code=✓, ⠶𝕂)☾
        ↪ no_isolate_ƒ(c)
    r = cpy(c, ⠤𝔸, ⠶𝕂)
    ↪ cpyⁿˢ ¿get_ns¡ r

 𝔸∋* ⟶ merge all (public) module contents with globals
 𝔸∋- ⟶ don't set module itself as global (automatic w/ !)
 𝔸∋! ⟶ store the object with module name into globals instead of module
 g ⟶ store anything into globals
 store_code ⟶ m.__cpy_code__ is the source code
⊢ 󰋺(𝔣, ⠤𝔸, g=✓, store_code=✓, just_get_path=✗, just_get_code=✗):
    ¬(just_get_path ∧ just_get_code) ⨳  󰤱 return a tuple if both
    ⮌ sys ⨡ path as P, _getframe as GF
    ⮌ os ⨡ path, listdir
    ⮌ pathlib ⨡ Path as 𝐩
    f, drs = □, (␛., ⠤P) ᴍ󰲡𝐩←x→.resolve()󰅂 󰈲󰲡x.is_dir()
    ∀p∈drs:
        ¿f ≔ ⋁ ← ᐦ⋄".☾" ᴍ 󰲡z≔p/‹⟦𝔣⟧⟦x⟧›→.is_file() ∧ z󰅂: ⇥
    f ⨳ ‹Can't find "⟦𝔣⟧" in [⟦", ".join(drsᴍ󰲡‹"⟦x⟧"›)⟧]!›
    ¿just_get_path: ↪f
    with f.open() as 𝐟: code = 𝐟.read()
    ¿just_get_code: ↪ code
    nam = PEV(na ≔ f.stem)
    m = ℵ(⠶󱠨(␛+code, get_ns=✓, cap_stdout=✗, ns={"__name__": nam}, fname=ᔐ←f))
    𝑘 = (m.keys󰈳󰲡x₀≡␛_) ¿*∈𝔸¡ 𝑙(𝔸 ∖ {!})
    𝑘 += exports ≔ (𝑙(m.__exports__) ¿"__exports__"∈m.keys¡ [])
    ¿store_code: m􋕟􋕟ᶜᵖʸ􋕟ᶜᵒᵈᵉ􋕟􋕟 = code
    ¿g:
        G = GF(1).f_globals
        ∀k∈𝑘ᴍPEV: Gₖ = mₖ
        ¿-∉𝔸 ∧ !∉𝔸 ∧ na∉𝑘:
            Gₙₐₘ = m
    ¿!∈𝔸:
        nam∈m ⨳ ‹Can't find "⟦nam⟧" inside module "⟦f.stem⟧"!›
    ↪ m

⊢ PL_THREAD_(ƒ, ⠤𝔸, ⠶𝕂):
    ⮌ threading ⨡ Thread as T
    atom = []
    T(target=ᐳatom.append←ƒ(⠤𝔸, ⠶𝕂))≕t→.start
    ↪ 𝚲t.join →► atom₀
⊢ PL_CPU_COUNT_():
    ⨡ multiprocessing
    ↪ multiprocessing.cpu_count()

ℳℱ_cache = {}
⊢ ℳℱ(load):
    ⊢ ƒ(⠤𝔸,⠶𝕂):
        ¿ℳℱ_cache∋𝓲≔id(load):
            𝑓 = ℳℱ_cache􋜆
        ¡:
            𝑓 = ℳℱ_cache􋜆 = load
        ↪ 𝑓(⠤𝔸,⠶𝕂)
    ↪ ƒ
SUBPROCA = ℳℱ(𝚲󰋺(‹subproca›).SUBPROCA)

__builtins__["__error_printer__"] ≔ __error_printer__ ≔ ℳℱ(𝚲󰋺("highlighter").__error_printer__)
__builtins__["__highlighter__"  ] ≔ __highlighter__   ≔ ℳℱ(𝚲󰋺("highlighter").__highlighter__  )