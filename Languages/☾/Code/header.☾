 󰤱 add tests/docs for Ϝᙎᙡᗢᙧᣆ󰑅󰑁󰑃ℵℶ$/󷹹
 󰤱 make ⨳ take a error handler arg
 󰤱 try OPERATOR except
 󰤱 better caching for peggle/cpy in general
 𝍱 = ½π = ½τ

 10⭥ ᗒ⌃2+⟞   ⟶   10⭥ᴍ¹⥌⟞↦⟞⌃2+⟞
   5 ᗌ⌃2+⟞   ⟶     5ᴍ⁰⥌⟞↦⟞⌃2+⟞
   5 ᗌ⌃2+ᗏ 6 ⟶ (5,6)ꟿ⁰⥌⟞,⟝↦⟞⌃2+⟝
 ⟝⟞
 ᗏᗕ ᗒᗌ
 x ⭜ y ⭝ z
 🡸🡺
 󰩀󱈲󰙨⹔ 󰘟 󰑂 󰑅 󰑄 󱗘 󱕛   

exec('from math import *')
󰆴 factorial, e, pi, tau, sqrt, cbrt
𝑜,𝑑,𝑏,𝑙,𝑡,𝑠,ᔐ,𝑖,𝑓 = object, dict, bool, list, tuple, set, str, int, float
⮌ py_naming_tools ⨡ py_escape_var as PEV
⮌ functools ⨡ reduce
⮌ itertools ⨡ starmap, filterfalse, product, accumulate, zip_longest

LITERAL_OPS_ = {
    ␛∧: 󰲣x∧y, ␛∨: 󰲣x∨y,
    ␛*: 󰲣x⋅y, ␛/: 󰲣x/y, ␛<: 󰲣x<y, ␛>: 󰲣x>y,
    ␛|: 󰲣x|y, ␛&: 󰲣x&y, ␛^: 󰲣x^y, ␛%: 󰲣x%y,
    ␛+: 𝚲+v₀ ¿1≡🃌v≔𝕣(𝔸)¡ v₀+v₁,
    ␛-: 𝚲-v₀ ¿1≡🃌v≔𝕣(𝔸)¡ v₀-v₁,
    "==":󰲣x≡y,"!=":󰲣x≠y, "<=":󰲣x ≤y,">=":󰲣x ≥y,
    "//":󰲣x⹏y,"**":󰲣x⌃y, "<<":󰲣x<<y,">>":󰲣x>>y,
    "not":𝚲¬𝕣(𝔸)₀,
    "is":󰲣x≅y, "is not":󰲣x≇y,
    "in":󰲣x∈y, "not in":󰲣x∉y }

getitem, setitem = 󰲣x[y], 󰲥x.__setitem__(y,z)
setattr_ret_ = 󰲧setattr(y,z,w) ∨ w
setitem_ret_ = 󰲧setitem(y,z,w) ∨ w
OP_DUPER_ = ƒ↦󰲡ƒ(x,x,⠤𝔸,⠶𝕂) # ꜠
OP_SWAPA_ = ƒ↦󰲣ƒ(y,x,⠤𝔸,⠶𝕂) # ᵜ
OP_LNULL_ = ƒ↦󰲡ƒ(␀,x,⠤𝔸,⠶𝕂) # ⟥
OP_RNULL_ = ƒ↦󰲡ƒ(x,␀,⠤𝔸,⠶𝕂) # ⟤
OP_BSTAR_ = ƒ↦󰲡ƒ(⠤x ,⠤𝔸,⠶𝕂) # ≺
␀ = NULL = 𝑜()

✓,✗ = 𝕋,𝔽 = True, False
𝒞ℳ, 𝒮ℳ, 𝗙 = classmethod, staticmethod, callable
ᗜ = □ = None
π = 3.14159265358979323
î = complex(0, 1)
ℯ = 2.71828182845904523
∞, ᐦ, τ = inf, '', 2⋅π
↉ = 0  bruh
½,⅓,¼,⅕,⅙,⅐,⅛,⅑,⅒ = 1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10
⅔,⅖ = 2/3,2/5
¾,⅗,⅜ = 3/4,3/5,3/8
⅘ = 4/5
⅚,⅝ = 5/6,5/8
⅞ = 7/8

𝕝, 𝕣 = 󰲡[⠤𝔸]¿x≅␀¡[x], 󰲡x󰈲󰲡x≇␀
is_iter = 󰲡hasattr(x,"__iter__")

Ω 𝑐𝑑(𝑑):
    ⊢ __init__(𝕊, ƒ, ⠤𝔸, 𝑔=□, ⠶𝕂):
        𝕊.ƒ, 𝕊.𝑔 = ƒ, 𝑔
        super().__init__(⠤𝔸,⠶𝕂)
    __call__ = 𝕊↦𝕊.ƒ(⠤𝔸,⠶𝕂)
    __repr__ = 𝕊↦𝕊["__repr__"](𝕊)¿"__repr__"∈𝕊¡super().__repr__()
    __getitem__ = ⥌𝕊,x↦super().__getitem__(x) ¿x∈𝕊¡ 𝕊.𝑔(x)

⬤ = 𝑜()
⊢ ´(ƒ):
    ⊢ 𝒻(⠤𝓐,⠶𝓚):
        ⊢ 𝑓(⠤𝔸,⠶𝕂):
            nonlocal 𝓐, 𝓚
            𝓐, 𝔸 = 𝑙(𝓐), 𝑙(𝔸)
            𝓚 = 𝑙(𝓚.items())
            a, k = [], {}
            ➰𝓐:
                x = 𝓐.pop(0)
                a.append(𝔸.pop(0) ¿x≡⬤¡ x)
            ➰𝓚:
                x, y = 𝓚.pop(0)
                kₓ = 𝔸.pop(0) ¿y≡⬤¡ y
            ↪ ƒ(⠤a+𝔸,⠶k|𝕂)
        ↪ 𝑓
    ↪ 𝒻
´ = 𝑐𝑑(t≔ƒ↦𝚲ƒ(⠤𝔸Σ[], ⠶𝕂), 𝑔=t)

Ω ⴳ(𝑖):
    __new__ = ℂ↦𝑖.__new__(ℂ,1)
    __call__, __repr__ = 𝚲ⴳ, 𝕊↦␛ⴳ
Ω ⴴ(𝑖):
    __new__ = ℂ↦𝑖.__new__(ℂ,0)
    __call__, __repr__ = 𝚲ⴴ, 𝕊↦␛ⴴ
ⴳ, ⴴ = ⴳ(), ⴴ()

⊢ _get_depths(x):
    ¿¬is_iter(x): ↪{0}
    ¿xᐹᔐ: ↪{1}
    ↪ {w+1 ∀z∈x ∀w∈_get_depths(z)}
⊢ _map_neg_d(x,y,n):  kinda weird ngl
    ¿xᐹᔐ: ↪ [y(z) ∀z∈x] ¿¬n¡ y(x) ¿n≡1¡ x
    ¿0∈d≔_get_depths(x): ↪x ¿n¡ y(x)
    x = [_map_neg_d(z,y,n) ∀z∈x]
    ↪ y(x) ¿n∈d¡ x
⊢ _map_pos_d(x,y,i):
    ¿¬i: ↪y(x)
    ¿xᐹᔐ: ↪[y(z) ∀z∈x]
    ↪ [_map_pos_d(z,y,i-1) ∀z∈x] ¿is_iter(x)¡ y(x)
⊢ _map_d(x,y,n=1):
    ¿n<0: ↪_map_neg_d(x,y,-n-1)
    ↪ _map_pos_d(x,y,2⌃24¿n≡∞¡n)

󰻾 = 𝑐𝑑(󰲡x,𝑔=󰲡𝑐𝑑(𝚲x,__repr__=𝚲‹󰻾[⟦x⟧]›),__repr__=𝚲␛󰻾)

Ω √´:
    __getitem__ = ⥌𝕊,x↦⥌y↦y⌃(1/x)
    __call__ = ⥌𝕊,x↦x⌃½

⊢ _window(𝕏, l=1, r=1, m=ⴳ, s=□, Δ=1):  s≠␀ should mean Δ=1 
    c ≔ (𝕏 ≔ 𝑙←𝕏)🃌
    ¿s≅␀: ↪ 𝕏⭥ₗ﹕₋ᵣ﹕󰃏ᴍ󰲡𝕏ₓ₋ₗ﹕ₓ + 𝕏ₓ⛶⋅𝑏(m) + 𝕏ₓ₊₁﹕ₓ₊ᵣ₊₁
    V = s⛶⋅l +𝕏+ s⛶⋅r
    ↪ 𝕏⭥﹕﹕󰃏ᴍ󰲡Vₓ﹕ₓ₊ₗ + Vₓ₊ₗ⛶⋅𝑏(m) + Vₓ₊ₗ₊₁﹕ₓ₊ₗ₊ᵣ₊₁

Ω 𝑏𝑔:
    __getitem__ = ⥌𝕊,z↦󰲣𝕊.ƒ(x,y,z)
    __call__     =⥌𝕊  ↦ 𝕊.ƒ(⠤𝔸)
Ω ſ´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦reduce    (y,x,⠤(z,)⋅←z≇␀)
Ω Ϝ´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦accumulate(x,y,⠶{}¿z≡␀¡{"initial":z})⥉𝑙
Ω ᙎ´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦_window(h≔𝕣←x⋄y→₀, ⠤yᐹ𝑖∧y⋄y∨y¿h🃌≡2¡    1⋄1    , ⴴ, □¿z≅␀¡z, 1        )
Ω ᙡ´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦_window(h≔𝕣←x⋄y→₀, ⠤yᐹ𝑖∧y⋄y∨y¿h🃌≡2¡    1⋄1    , ⴳ, □¿z≅␀¡z, 1        )
Ω ᗢ´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦_window(h≔𝕣←x⋄y→₀, ⠤yᐹ𝑖∧y⋄y∨y¿h🃌≡2¡z≅␀∧1⋄1∨0⋄z, ⴴ, ␀      , z≅␀∧1∨z+1)
Ω ᙧ´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦_window(h≔𝕣←x⋄y→₀, ⠤yᐹ𝑖∧y⋄y∨y¿h🃌≡2¡z≅␀∧1⋄1∨0⋄z, ⴳ, ␀      , z≅␀∧1∨z+1)
Ω 󰸵´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦(  (l⭥ᴍ(ⴴ¿z≅␀¡z¿𝗙(z)¡𝚲z))+x)¿(l≔y-x🃌)>0¡x
Ω 󰸷´(𝑏𝑔):ƒ=𝒮ℳ← ⥌x,y,z=␀↦(x+(l⭥ᴍ(ⴴ¿z≅␀¡z¿𝗙(z)¡𝚲z))  )¿(l≔y-x🃌)>0¡x

Ω ᴍ´:
    ƒ = 𝒮ℳ(_map_d)
    ⊢ __getitem__(𝕊, i):
        S, ƒ = 𝑠←i ¿iᐹ𝑡¡ (i,), □
        ¿s≔␛D→∈S: ƒ = f↦󰲣𝑑←f(x.items(),y)
        ⸘s≔␛K→∈S: ƒ = f↦󰲣𝑑←f(x.items(),y)ζx.values()
        ⸘s≔␛V→∈S: ƒ = f↦󰲣𝑑←x.keys()ζf(x.items(),y)
        ¿ƒ:
            S.discard(s)
            ↪ ƒ(S ∧ 𝕊[S.pop()] ∨ 𝕊)
        ↪ ⥌x,y,i=i↦𝕊.ƒ(x,y,i)
    __call__ = ⥌𝕊,x,y↦𝕊.ƒ(x,y,1)
Ω ꟿ´(ᴍ´):
    ƒ = 𝒮ℳ(⥌x,y,i↦_map_d(x,󰲡y(⠤(x¿is_iter(x)¡(x,))),i))

√´ = √´()
ᴍ´,ꟿ´,ſ´,Ϝ´ = ᴍ´(),ꟿ´(),ſ´(),Ϝ´()
ᙎ´,ᙡ´,ᗢ´,ᙧ´ = ᙎ´(),ᙡ´(),ᗢ´(),ᙧ´()
󰸵´,󰸷´ = 󰸵´(),󰸷´()

⊢ ⨳´(α, β):
    ¿α≅␀: α,β=β,α
    assert α, β≅␀∧ᐦ∨β
    ↪ α

⊢ _wherest(𝕏, ƒ=𝑏, I=ⴴ):
    ƒ = ƒ≅␀∧𝑏∨ƒ
    ∀i,x∈↨𝕏:
        ¿ƒ(x): ↪ i ¿I¡ x
    ↪ □
ᣆ´ = 𝑐𝑑(ƒ ≔ 󰲣y(x) ¿(𝔸₀ ¿𝔸🃌¡ x)¡ x, 𝑔=a↦󰲣ƒ(x,y,a))
󰑅´ = 𝑐𝑑(_wherest, I=𝚲_wherest(⠤𝔸,I=ⴳ))
󰑁´ = ⥌𝕏,ƒ=𝑏↦□ ¿□≅i≔𝕏󰑅ᴵƒ¡ 𝕏﹕ᵢ
󰑃´ = ⥌𝕏,ƒ=𝑏↦□ ¿□≅i≔𝕏󰑅ᴵƒ¡ 𝕏ᵢ﹕
⊂ = 󰲣𝑠(x).issubset(𝑠←y)
⊃ = 󰲣𝑠(y).issubset(𝑠←x)
⊊ = 󰲣(α≔𝑠←x).issubset(β≔𝑠←y) ∧ α≠β
⊋ = 󰲣(α≔𝑠←y).issubset(β≔𝑠←x) ∧ α≠β

⊄ = 󰲣¬ ← x⊂y
⊅ = 󰲣¬ ← x⊃y
∪ = 󰲣𝑠(x) | 𝑠(y)
∩ = 󰲣𝑠(x) & 𝑠(y)
∖ = 󰲣𝑠(x) - 𝑠(y)
⨉ = 𝚲product(⠤v₀ ¿(1≡🃌←v≔𝕣(𝔸))¡ v)ᴍ𝑙
∋ = 󰲣y∈x
∌ = 󰲣y∉x
ᐹ = isinstance

∓ = 𝚲[¯h₀,+h₀]¿(h≔𝕣(𝔸))🃌≡1¡[h₀-h₁,h₀+h₁]
± = 𝚲[+h₀,¯h₀]¿(h≔𝕣(𝔸))🃌≡1¡[h₀+h₁,h₀-h₁]

🃌 = len
ᴙ = 𝑐𝑑(󰲡(x≔𝑙←x→¿¬(xᐹᔐ)¡□)► x﹕﹕₋₁󰅂, L=󰲡𝑙←x→﹕﹕₋₁)  reverse; ᴙᴸ to force 𝑙
⍉ = 󰲡ζ(⠤x)
⍭ = 󰲡x.split(␛ )ᴍ⍭´ ¿␛ ∈x¡ x.split(␛ )

↨ = 󰲡𝑙←enumerate←x
⭥ = 󰲡𝑙←range←(x ¿xᐹ𝑖¡ x🃌)
⤉ = 𝚲max(𝔸₀,key=𝔸₁﹕∧𝔸₁≇␀∧𝔸₁∨□)
⤈ = 𝚲min(𝔸₀,key=𝔸₁﹕∧𝔸₁≇␀∧𝔸₁∨□)
ⴵ = sign = 󰲡x∧(1¿x>0¡¯1)∨0
 󷹄 = 󰲣¿𝕣(𝔸)¡
⛶ = 𝑐𝑑(󰲡[x], S=󰲡{x}, T=󰲡(x,))
▢ = 𝚲round(⠤𝕣(𝔸))
… = 󰲣𝑙←range(x,y)
! = 󰲡1…←x+1→Π1
⫰ = 󰲡+abs←x
⫯ = 󰲡¯abs←x
⊢ ⬄´(x=␀,y=␀):
    ¿x≅␀: x,y=y,x
    ¿xᐹᔐ ∧← y≅␀ ∨ yᐹᔐ:
        ↪x.strip(⠤𝕣((y,)))
    ✗⨳  󰤱
 where 𝒾 is an iter:  "hi"⟥Σ⟤0 OP_L␀_(_03a3)('hi') * 0
 ᒍ =  󰤱
   (𝒾,𝑜): 
   ᒍˡ, ᒍʳ
   ᒍʳˡ = ᒍˡʳ
 󰛔 =  󰤱
   (ᔐ,ᔐ): ᔐ.replace
   (𝒾,𝑜):   replace ; 󰛔ʳ
 󰘬 =  󰤱
   (𝒾, ): spl by falsy
   ( ,𝒾): spl by falsy (keep sep)
   (𝒾,ƒ): spl by ƒ
   (ƒ,𝒾): spl by ƒ (keep sep)
   (ᔐ, ): spl by space
   ( ,ᔐ): spl by space (keep sep)
   (ᔐ,ᔐ): spl by arg 2
   (ᔐ,ƒ): spl by ƒ join inner strs
   (ƒ,ᔐ): spl by ƒ (keep sep) join inner strs

◄, ► = 󰲣x, 󰲣y
⊢ ⋀´(𝑋, v=✓):
    ∀v∈𝑋:
        ¿¬v:↪v
    ↪v
⊢ ⋁´(𝑋, v=✗):
    ∀v∈𝑋:
        ¿ v:↪v
    ↪v
☾ = ⥌⠤𝔸,flush=ⴳ↦print(⠤𝔸,flush=flush,⠶𝕂)∨𝔸∧𝔸₀
ζ = 𝚲zip(⠤𝕣(𝔸))ᴍ𝑙
󰈲 = 󰲡𝑙←filter     (⠤𝕝(⠤𝔸,□),x)
󰈳 = 󰲡𝑙←filterfalse(⠤𝕝(⠤𝔸,□),x)
Π = 󰲡ſ´(x,⋅,⠤𝕣(𝔸))
Σ = 󰲡ſ´(x,+,⠤𝕣(𝔸))
󰒼 = 󰲣sorted(x,key=𝕝(y,□)₀)
󰒽 = 󰲣sorted(x,key=𝕝(y,□)₀,reverse=✓)
 = 𝑐𝑑(𝚲⥌I,ƒ=𝑏↦r≔{}→◄←Iᴍ󰲡r.setdefault(h≔ƒ(x),[]).append(x)󰅂󰅂(⠤𝕣(𝔸),⠶𝕂),
       S=𝚲´(⠤𝔸,⠶𝕂).items 󰒼 ᴍ󰲡x₁,
       B=𝚲h≔{✓:[],✗:[],⠶´(⠤𝔸,⠶𝕂)}→►←[h₀,h₁])

 = 󰲡x(⠤𝔸,⠶𝕂)
∘ = 󰲣x(y)
○ = 󰲣𝚲x(y(⠤𝔸,⠶𝕂))
Ω 𝑙𝑙(𝑙): □
⋄ = 󰲣(x¿xᐹ𝑙𝑙¡x≔𝑙𝑙((x,))).append(y)►x
⨁ = 󰲣𝑏(x)≡𝑏(y)  xand
⊻ = 󰲣𝑏(x)^𝑏(y)  ∧←x∨y  xor
⊼ = 󰲣𝑏(x)∧𝑏(y)→¬∧←x∨y  nand

⊢ ⓦ(⠤𝔸, 𝐀=□):
    𝐀∨=[]
    ⠤𝔸, ƒ = 𝔸
    ¿¬𝔸: ↪ƒ(⠤𝐀)
    𝕒, ⠤𝔸 = 𝔸
    with 𝕒 as 𝐚:
        𝐀.append∘𝐚
        ↪ ⓦ(⠤𝔸, ƒ, 𝐀=𝐀)

 all this be weird
Ω ℵ´(𝑑):
    𝐶𝑛 = ␛ℵ
    __init__ = 𝕊↦super().__init__(⠤𝔸,⠶𝕂)
    __setattr__ = 𝑑.__setitem__
    __getitem__ = ⥌𝕊,x↦𝑑.__getitem__(𝕊,x) ¿x∈𝕊¡ 𝕊.getdef()
    __getattr__ = __getitem__
    __iter__ = 𝕊↦iter(𝕊.items())
    __repr__ = 𝕊↦‹⟦𝕊.__class__.𝐶𝑛⟧⟦‹[⟦h₀⟧]›¿0∈(h≔𝕊.__dict__)¡ᐦ⟧(⟦␛,𝘀→.join←𝕊.itemsꟿ󰲣‹⟦x⟧=⟦y⟧›⟧)›
    __call__ = 𝕊↦𝑑.update(𝕊,⠤𝔸,⠶𝕂)►𝕊
    __or__   = ⥌𝕊,x↦𝕊.copy()(x)
    hasdef = ⥌𝕊↦0∈𝕊.__dict__
    getdef = ⥌𝕊↦𝕊.__dict__₀
    setdef = ⥌𝕊,x↦𝕊.__dict__₀≔x→►𝕊
    ⊢ copy(𝕊):
        r = type(𝕊)(super().copy())
        ¿𝕊.hasdef(): r.setdef(𝕊.getdef())
        ↪ r
Ω ℶ(ℵ´):
    𝐶𝑛 = ␛ℶ
    __iter__ = 𝕊↦iter(𝕊.values())
Ω _hwrap(𝑑):
    ⊢ __init__(𝕊, 𝑐):
        𝕊􋇑, 𝕊􋇛 = 𝑐, 𝑐􋆷􋇛
    __getitem__ = ⥌𝕊,x↦𝕊􋇑().setdef(x)
    __setitem__ = ⥌𝕊,x,y↦(⒯≔𝕊􋇑()).__setitem__(x,y) →►← ⒯
    __call__ = 𝕊↦𝕊􋇑(⠤𝔸,⠶𝕂)
    __or__   = ⥌𝕊,x↦𝕊􋇑()|x
    __repr__ = 𝕊↦‹⟦𝕊􋇛⟧()›
ℵ´ = _hwrap(ℵ´)
ℶ  = _hwrap(ℶ )

Ω nosee(𝑠):
    __init__ = 𝕊↦super().__init__() ► 𝔸∧(𝔸₀ᴍ𝕊.add) →►□
    __call__ = ⥌𝕊,x↦𝕊.add(x) ► x
    add = ⥌𝕊,x↦(x∉𝕊 ⨳ ‹⟦𝕊.__class__.__name__⟧: Already seen "⟦x⟧"!›) ► super().add(x) ► 𝕊

⊢ 𝔦𝔪𝔭(x):
    match x:
        case ␛s:  system stuff
            ⨡ os, sys, shutil, subprocess
            ⮌ pathlib ⨡ Path as 𝐩
            ⮌ subprocess ⨡ Popen as 𝐫
            ⮌ time ⨡ time, sleep
            
            i=0
            ➰i+=1:
                G = sys._getframe(i).f_globals
                ¿G["__file__"]≠__file__: ⇥
            G[␛𝐩⥉PEV] = 𝐩
            G[␛𝐫⥉PEV] = 𝐫
            G[h≔PEV("𝐩𝐝")] = 𝚲G["__file__"] ⥉𝐩→.parent
            G["subprocess"] = subprocess
            G["os"], G["sys"], G["shutil"] = os, sys, shutil
            G["time"], G["sleep"] = time, sleep
            G["ldir"] = 𝚲os.chdir←Gₕ

⊢ 󱠨(c, ⠤𝔸, get_ns=✗, ns=□, fname=□, ⠶𝕂):
    ⮌ refresher ⨡ basic_cpy_interactive_session
    cpy = basic_cpy_interactive_session(✗, ✓, ns=ns, fname=fname)
    r = cpy(c, ⠤𝔸, ⠶𝕂)
    ↪ cpyⁿˢ ¿get_ns¡ r

⊢ 󰋺(𝔣, ⠤𝔸, g=✓, store_code=✓, just_get_path=✗):
    ⮌ sys ⨡ path as P, _getframe as GF
    ⮌ os ⨡ path, listdir
    ⮌ pathlib ⨡ Path as 𝐩
    f, drs = □, (␛., ⠤P) ᴍ󰲡𝐩←x→.resolve()󰅂 󰈲󰲡x.is_dir()
    ∀p∈drs:
        ¿f ≔ ⋁ ← ᐦ⋄".☾" ᴍ 󰲡z≔p/‹⟦𝔣⟧⟦x⟧›→.is_file() ∧ z󰅂: ⇥
    f ⨳ ‹Cannot find "⟦𝔣⟧" in [⟦", ".join(drsᴍ󰲡‹"⟦x⟧"›)⟧].›
    ¿just_get_path: ↪f
    with f.open() as 𝐟: code = 𝐟.read()
    m = ℵ´(⠶󱠨(␛+code, get_ns=✓, cap_stdout=✗, ns={"__name__": ᔐ←f}, fname=ᔐ←f))
    𝑘 = (m.keys󰈳󰲡x.startswith∘␛_) ¿*∈𝔸¡ 𝔸
    G = GF(1).f_globals
    ¿"__exports__"∈m.keys: 𝑘+=m.__exports__
    ¿store_code: m[‹__cpy_code__›] = code
    ¿g: G􋕜ₛₜₑₘ􊱬󰂢󰂗󰂨 = m
    ∀k∈𝑘ᴍPEV: Gₖ = mₖ
    ↪ m

 O/E/M/R = stdout/stderr/merged/returncode
 o/e = don't redirect stdout/err to null
 B=binary output, S=shell
 t = disable trailing newline strip (does nothing with B)
⊢ SUBPROCA(cmd, 𝒶):
    ⮌ subprocess ⨡ Popen as 𝐏, DEVNULL as NULL, PIPE, STDOUT
    ¬(␛M∈𝒶 ∧ 𝒶∩"OEoe") ⨳ ‹Cannot use stdout/err and MERGE at once›
    ¬(␛o∈𝒶∋␛O ∨ ␛e∈𝒶∋␛E) ⨳ ‹Cannot suppress and ignore stdout/err›
    K = ℵ
    𝓽,𝓸,𝓮,𝓑,𝓟,𝓢 = (vs≔"toeBPS") ᴍ󰲡x∈𝒶
    𝒶 = 𝒶∖vs ∨ {␛R}
    
    ¿𝓢: Kˢʰᵉˡˡ = ✓
    ¿␛M∈𝒶:
        Kˢᵗᵈᵒᵘᵗ, Kˢᵗᵈᵉʳʳ = PIPE, STDOUT
    ¡:
        ¿¬𝓸: Kˢᵗᵈᵒᵘᵗ = PIPE ¿␛O∈𝒶¡ NULL
        ¿¬𝓮: Kˢᵗᵈᵉʳʳ = PIPE ¿␛E∈𝒶¡ NULL
    
    ⊢ p_stream(x):
        t = getattr(p,x).read
        ¿𝓑: ↪t
        t = t.decode("UTF8")
        ↪ t ¿𝓽¡ t.removesuffix(𝗻)
    ⊢ extract(p):
        r = ℶ
        ¿    𝒶∋v≔␛R: rᵥ=pʳᵉᵗᵘʳⁿᶜᵒᵈᵉ
        ¿    𝒶∋v≔␛M: rᵥ=p_stream("stdout")
        ¡:
            ¿𝒶∋v≔␛O: rᵥ=p_stream("stdout")
            ¿𝒶∋v≔␛E: rᵥ=p_stream("stderr")
        ↪ r􊴸􋕜ₚ󰂼ₚ􊲭 ¿𝒶🃌≡1¡ r
    Ω Popen_Proxy:
        __slots__ = ␛p,
        __init__ = ⥌𝕊,p↦𝕊ᵖ≔p →► □
        __call__ = 𝕊↦𝕊ᵖ.wait →► extract(p)
        __getitem__ = 𝕊↦𝕊→.__getitem__(⠤𝔸)
        __getattr__ = 𝕊↦𝕊→.__getattr__(⠤𝔸)
        __iter__    = 𝕊↦𝕊→.__iter__   (⠤𝔸)
    
    p = 𝐏(cmd⍭, ⠶K)  run = 𝐏(cmd⍭, ⠶K)
    ↪ Popen_Proxy∘p ᣆ􊽬􋘥 
 dot = 𝚲𝔸⍉ᴍΠ´Σ