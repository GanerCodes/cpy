exec('from math import *')
󰆴 factorial, e, pi, tau, sqrt, cbrt
𝑑,𝑏,𝑙,𝑡,𝑠,ᔐ,𝑖,𝑓 = dict, bool, list, tuple, set, str, int, float
⮌ functools ⨡ reduce
⮌ itertools ⨡ starmap, filterfalse, product

LITERAL_OPS_ = {
    ␛∧: 󰲣x∧y, ␛∨: 󰲣x∨y, ␛+: 󰲣x+y, ␛-: 󰲣x-y,
    ␛*: 󰲣x⋅y, ␛/: 󰲣x/y, ␛<: 󰲣x<y, ␛>: 󰲣x>y,
    ␛|: 󰲣x|y, ␛&: 󰲣x&y, ␛^: 󰲣x^y, ␛%: 󰲣x%y,
    "==":󰲣x≡y,"!=":󰲣x≠y, "<=":󰲣x ≤y,">=":󰲣x ≥y,
    "//":󰲣x⹏y,"**":󰲣x⌃y, "<<":󰲣x<<y,">>":󰲣x>>y,
    "not":󰲣¬x,
    "is":󰲣x≅y, "is not":󰲣x≇y,
    "in":󰲣x∈y, "not in":󰲣x∉y }

getitem, setitem = 󰲣x[y], 󰲥x.__setitem__(y,z)
setattr_ret_ = 󰲧setattr(y,z,w) ∨ w
setitem_ret_ = 󰲧setitem(y,z,w) ∨ w
OP_DUPER_ = 𝑓↦󰲡𝑓(x,x,⠤𝔸,⠶𝕂) # ꜠
OP_SWAPA_ = 𝑓↦󰲣𝑓(y,x,⠤𝔸,⠶𝕂) # ᵜ
OP_LNULL_ = 𝑓↦󰲡𝑓(NULL,x,⠤𝔸,⠶𝕂) # ⟥
OP_RNULL_ = 𝑓↦󰲡𝑓(x,NULL,⠤𝔸,⠶𝕂) # ⟤
OP_BSTAR_ = 𝑓↦󰲡𝑓(⠤x    ,⠤𝔸,⠶𝕂) # ≺
NULL = object()
✓,✗ = ⴳ,ⴴ = 𝕋,𝔽 = True, False
ᗜ = □ = None
π = 3.14159265358979323
ℯ = 2.71828182845904523
∞, ᐦ, τ = inf, '', 2⋅π
↉ = 0  bruh
½,⅓,¼,⅕,⅙,⅐,⅛,⅑,⅒ = 1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10
⅔,⅖ = 2/3,2/5
¾,⅗,⅜ = 3/4,3/5,3/8
⅘ = 4/5
⅚,⅝ = 5/6,5/8
⅞ = 7/8

𝕝, 𝕣 = 󰲡[⠤𝔸]¿x≅NULL¡[x], 󰲡x󰈲󰲡x≇NULL
is_iter = 󰲡hasattr(x,"__iter__")
⊢ _get_depths(x):
    ¿¬is_iter(x): ↪{0}
    ¿xᐹᔐ: ↪{1}
    ↪ {w+1 ∀z∈x ∀w∈_get_depths(z)}
⊢ _map_neg_d(x,y,n):  kinda weird ngl
    ¿xᐹᔐ: ↪ [y(z) ∀z∈x] ¿¬n¡ y(x) ¿n≡1¡ x
    ¿0∈d≔_get_depths(x): ↪x ¿n¡ y(x)
    x = [_map_neg_d(z,y,n) ∀z∈x]
    ↪ y(x) ¿n∈d¡ x
⊢ _map_pos_d(x,y,i):
    ¿¬i: ↪y(x)
    ¿xᐹᔐ: ↪[y(z) ∀z∈x]
    ↪ [_map_pos_d(z,y,i-1) ∀z∈x] ¿is_iter(x)¡ y(x)
⊢ _map_d(x,y,n=1):
    ¿n<0: ↪_map_neg_d(x,y,-n-1)
    ↪ _map_pos_d(x,y,2⌃24¿n≡∞¡n)

Ω 𝑐𝑑(𝑑):
    ⊢ __init__(𝕊, 𝑓, ⠤𝔸, ⠶𝕂):
        𝕊.𝑓 = 𝑓
        super().__init__(⠤𝔸,⠶𝕂)
    __call__ = 𝕊↦𝕊.𝑓(⠤𝔸,⠶𝕂)

Ω √´:
    __slots__ = ()
    __getitem__ = ⥌𝕊,x↦⥌y↦y⌃(1/x)
    __call__ = ⥌𝕊,x↦x⌃½
Ω ſ´:
    __slots__ = ()
    __getitem__ = ⥌𝕊,z↦󰲣reduce(y,x,z)
    __call__ = staticmethod(󰲣reduce(y,x,⠤𝔸))
Ω ᴍ´:
    𝑓 = staticmethod(_map_d)
    __slots__ = ()
    ⊢ __getitem__(𝕊, i):
        S, 𝑓 = 𝑠←i ¿iᐹ𝑡¡ (i,), □
        ¿s≔␛D→∈S: 𝑓 = f↦󰲣𝑑(f(x.items(),y))
        ⸘s≔␛K→∈S: 𝑓 = f↦󰲣𝑑(f(x.keys(),y)ζx.values())
        ⸘s≔␛V→∈S: 𝑓 = f↦󰲣𝑑(x.keys()ζf(x.values(),y))
        ¿𝑓:
            S.discard(s)
            ↪ 𝑓(S ∧ 𝕊[S.pop()] ∨ 𝕊)
        ↪ ⥌x,y,i=i↦𝕊.𝑓(x,y,i)
    __call__ = ⥌𝕊,x,y↦𝕊.𝑓(x,y,1)
Ω ꟿ´(ᴍ´):
    𝑓 = staticmethod(⥌x,y,i↦_map_d(x,󰲡y(⠤(x¿is_iter(x)¡(x,))),i))
    __slots__ = ()

ᴍ,ꟿ,ſ,√=ᴍ´(),ꟿ´(),ſ(),√´()

⊢ ⨳´(α, β):
    ¿α≅NULL: α,β=β,α
    assert α, 𝕝(β, ᐦ)
    ↪ α

⊂ = 󰲣𝑠(x).issubset(𝑠←y)
⊃ = 󰲣𝑠(y).issubset(𝑠←x)
⊊ = 󰲣(α≔𝑠←x).issubset(β≔𝑠←y) ∧ α≠β
⊋ = 󰲣(α≔𝑠←y).issubset(β≔𝑠←x) ∧ α≠β

⊄ = 󰲣¬ ← x⊂y
⊅ = 󰲣¬ ← x⊃y
∪ = 󰲣𝑠(x) | 𝑠(y)
∩ = 󰲣𝑠(x) & 𝑠(y)
∖ = 󰲣𝑠(x) - 𝑠(y)
⨉ = 𝚲product(⠤𝕣(𝔸))ᴍ𝑙
∋ = 󰲣y∈x
∌ = 󰲣y∉x
ᐹ = isinstance

∓ = 𝚲[¯h₀,+h₀]¿(h≔𝕣(𝔸))🃌≡1¡[h₀-h₁,h₀+h₁]
± = 𝚲[+h₀,¯h₀]¿(h≔𝕣(𝔸))🃌≡1¡[h₀+h₁,h₀-h₁]

🃌 = len
ᴙ = 𝑐𝑑(󰲡(x≔𝑙←x→¿¬(xᐹᔐ)¡□)► x﹕﹕₋₁󰅂, L=󰲡𝑙←x→﹕﹕₋₁)  reverse; ᴙᴸ to force 𝑙
⍉ = 󰲡ζ(⠤x)
↨ = 󰲡𝑙←enumerate←x
⭥ = 󰲡𝑙←range←x
⤉ = 𝚲max(𝔸₀,key=𝔸₁﹕∧𝔸₁∨□)
⤈ = 𝚲min(𝔸₀,key=𝔸₁﹕∧𝔸₁∨□)
ⴵ = sign = 󰲡x∧(1¿x>0¡¯1)∨0
 󷹄 = 󰲣¿𝕣(𝔸)¡
⛶ = 𝑐𝑑(󰲡[x], S=󰲡{x}, T=󰲡(x,))
▢ = 𝚲round(⠤𝕣(𝔸))
… = 󰲣𝑙←range(x,y)
! = 󰲡1…←x+1→Π1
⫰ = 󰲡+abs(x)
⫯ = 󰲡¯abs(x)
⊢ ⬄´(x=NULL,y=NULL):
    ¿x≅NULL: x,y=y,x
    ¿xᐹᔐ ∧← y≅NULL ∨ yᐹᔐ:
        ↪x.strip(⠤𝕣((y,)))
    ✗⨳  󰤱
 where 𝒾 is an iter:  "hi"⟥Σ⟤0 OP_LNULL_(_03a3)('hi') * 0
 ᒍ =  󰤱
   (𝒾,𝑜): 
   ᒍˡ, ᒍʳ
   ᒍʳˡ = ᒍˡʳ
 󰛔 =  󰤱
   (ᔐ,ᔐ): ᔐ.replace
   (𝒾,𝑜):   replace ; 󰛔ʳ
 󰘬 =  󰤱
   (𝒾, ): spl by falsy
   ( ,𝒾): spl by falsy (keep sep)
   (𝒾,ƒ): spl by ƒ
   (ƒ,𝒾): spl by ƒ (keep sep)
   (ᔐ, ): spl by space
   ( ,ᔐ): spl by space (keep sep)
   (ᔐ,ᔐ): spl by arg 2
   (ᔐ,ƒ): spl by ƒ join inner strs
   (ƒ,ᔐ): spl by ƒ (keep sep) join inner strs

◄, ► = 󰲣x, 󰲣y
⊢ ⋀´(𝑋, v=✓):
    ∀v∈𝑋:
        ¿¬v:↪v
    ↪v
⊢ ⋁´(𝑋, v=✗):
    ∀v∈𝑋:
        ¿ v:↪v
    ↪v
☾ = ⥌⠤𝔸,flush=ⴳ↦print(⠤𝔸,flush=flush,⠶𝕂)∨𝔸∧𝔸₀
ζ = 𝚲𝑙(zip(⠤𝕣(𝔸)))
󰈲 = 󰲡𝑙(filter     (⠤𝕝(⠤𝔸,□),x))
󰈳 = 󰲡𝑙(filterfalse(⠤𝕝(⠤𝔸,□),x))
Π = 󰲡ſ´(x,⋅,⠤𝕣(𝔸))
Σ = 󰲡ſ´(x,+,⠤𝕣(𝔸))
󰒼 = 󰲣sorted(x,key=𝕝(y,□)₀)
󰒽 = 󰲣sorted(x,key=𝕝(y,□)₀,reverse=✓)
 = 󰲡x(⠤𝔸,⠶𝕂)
∘ = 󰲣x(y)
○ = 󰲣𝚲x(y(⠤𝔸,⠶𝕂))
Ω 𝑙𝑙(𝑙): □
⋄ = 󰲣(x¿xᐹ𝑙𝑙¡x≔𝑙𝑙((x,))).append(y)►x
⨁ = 󰲣𝑏(x)≡𝑏(y)  xand
⊻ = 󰲣𝑏(x)^𝑏(y)  ∧←x∨y  xor
⊼ = 󰲣𝑏(x)∧𝑏(y)→¬∧←x∨y  nand

⊢ 󱠨(c, ⠤𝔸, get_ns=✗, ns=□, fname=□, ⠶𝕂):
    ⮌ refresher ⨡ basic_cpy_interactive_session
    cpy = basic_cpy_interactive_session(✗, ✓, ns=ns, fname=fname)
    r = cpy(c, ⠤𝔸, ⠶𝕂)
    ↪ cpyⁿˢ ¿get_ns¡ r

⊢ 󰋺(𝔣, ⠤𝔸, g=✓, store_code=✓, just_get_path=✗):
    ⮌ argparse ⨡ Namespace
    ⮌ sys ⨡ path as P, _getframe as GF
    ⮌ os ⨡ path, listdir
    ⮌ pathlib ⨡ Path as 𝐩
    f = □
    ∀p∈(␛., ⠤P):
        ¿¬path.isdir(p): ↺
        ¿f ≔ ⋁ ← ᐦ⋄".☾" ᴍ 󰲡path.isfile(𝐩(z≔‹⟦p⟧/⟦𝔣⟧⟦x⟧›)) ∧ z󰅂: ⇥
    ⨳(f, ‹Cannot find "⟦𝔣⟧"›)
    ¿just_get_path: ↪f
    with open(f, ␛r) as 𝐟: code = 𝐟.read()
    m = 󱠨(␛+code, get_ns=✓, cap_stdout=✗, ns={"__name__": f}, fname=f)
    𝑘 = (m󰈳󰲡x.startswith∘␛_) ¿*∈𝔸¡ 𝔸
    G = GF(1).f_globals
    ∀k∈𝑘: Gₖ = mₖ
    ¿store_code: m[‹__cpy_code__›] = code
    m = Namespace(**m)
    ¿g: G[path.splitext(path.split(𝔣)₁)₀] = m
    ↪ m

 dot = 𝚲𝔸⍉ᴍΠ´Σ