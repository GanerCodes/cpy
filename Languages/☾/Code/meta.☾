⊢ 𝔦𝔪𝔭(x):
    match x:
        case ␛s:  system stuff
            ⨡ os, sys, shutil, subprocess
            ⮌ pathlib ⨡ Path as 𝐩
            ⮌ subprocess ⨡ Popen as 𝐫
            ⮌ time ⨡ time, sleep
            
            i=0
            ➰i󷸊+1:
                G = sys._getframe(i).f_globals
                ¿G["__file__"]≠__file__: ⇥
            G[␛𝐩⥉PEV] = 𝐩
            G[␛𝐫⥉PEV] = 𝐫
            G[h≔PEV("𝐩𝐝")] = 𝚲G["__file__"] ⥉𝐩→.parent
            G["subprocess"] = subprocess
            G["os"], G["sys"], G["shutil"] = os, sys, shutil
            G["time"], G["sleep"] = time, sleep
            G["ldir"] = 𝚲os.chdir←Gₕ

⊢ 󱠨(c, ⠤𝔸, get_ns=✗, ns=□, fname=□,
    interactive_𝕂=□, no_isolate=✗,
    no_isolate_ƒ=󰲡exec(x,globals()), ⠶𝕂):  󱠨(x, return_code=✓)
    
    𝓘𝓚 = {"code_post_process": __code_post_process__}|(interactive_𝕂 ∨ {})
    ⮌ refresher ⨡ basic_cpy_interactive_session
    cpy = basic_cpy_interactive_session(
        print_output=✓, ns=ns, fname=fname≅□ ⭜"cpy_󱠨"⭝ fname,
        code_cache_dir=__code_cache_dir__, gram_cache_dir=__gram_cache_dir__,
        header_carry=__header_namespace__, ⠶𝓘𝓚)
    ¿no_isolate: # absolutely beaned
        ¬get_ns ∧ ns≅□ ∧ fname≅□ ⨳
        c = cpy(c, ⠤𝔸, return_code=✓, ⠶𝕂)☾
        ↪ no_isolate_ƒ(c)
    r = cpy(c, ⠤𝔸, ⠶𝕂)
    ↪ cpyⁿˢ ¿get_ns¡ r

 𝔸∋* ⟶ merge all (public) module contents with globals
 𝔸∋- ⟶ don't set module itself as global (automatic w/ !)
 𝔸∋! ⟶ store the object with module name into globals instead of module
 g ⟶ store anything into globals
 store_code ⟶ m.__cpy_code__ is the source code
⊢ 󰋺(𝔣, ⠤𝔸, g=✓, store_code=✓, just_get_path=✗, just_get_code=✗):
    ¬(just_get_path ∧ just_get_code) ⨳  󰤱 return a tuple if both
    ⮌ sys ⨡ path as P, _getframe as GF
    ⮌ os ⨡ path, listdir
    ⮌ pathlib ⨡ Path as 𝐩
    f, drs = □, (␛., ⠤P) ᐵ⥉𝐩→.resolve()ᐸ 󰈲󷺹.is_dir()
    ∀p∈drs:
        ¿f ≔ ⋁ ← ᐦ⋄".☾" ᴍ 󰲡z≔p/‹⟦𝔣⟧⟦x⟧›→.is_file() ∧ z󰅂: ⇥
    f ⨳ ‹Can't find "⟦𝔣⟧" in [⟦", ".join(drsᐖ‹"⟦⟞⟧"›)⟧]!›
    ¿just_get_path: ↪f
    with f.open() as 𝐟: code = 𝐟.read()
    ¿just_get_code: ↪ code
    nam = PEV(na ≔ f.stem)
    m = ℵ(⠶󱠨(␛+code, get_ns=✓, cap_stdout=✗, ns={"__name__": nam}, fname=ᔐ←f))
    𝑘 = (m.keys󰈳󰲡x₀≡␛_) ¿*∈𝔸¡ [⠤𝔸 ∖ {!}]
    𝑘󷸊+exports ≔ (𝑙(m.__exports__) ¿"__exports__"∈m.keys¡ [])
    ¿store_code: m􋕟􋕟ᶜᵖʸ􋕟ᶜᵒᵈᵉ􋕟􋕟 = code
    ¿g:
        G = GF(1).f_globals
        ∀k∈𝑘ᴍPEV: Gₖ = mₖ
        ¿-∉𝔸 ∧ !∉𝔸 ∧ na∉𝑘:
            Gₙₐₘ = m
    ¿!∈𝔸:
        nam∈m ⨳ ‹Can't find "⟦nam⟧" inside module "⟦f.stem⟧"!›
    ↪ m

ℳℱ_cache = {}
⊢ ℳℱ(load):
    ⊢ ƒ(⠤𝔸,⠶𝕂):
        ¿ℳℱ_cache∋𝓲≔id(load): 𝑓 = ℳℱ_cache􋜆
        ¡                   : 𝑓 = ℳℱ_cache􋜆 = load
        ↪ 𝑓(⠤𝔸,⠶𝕂)
    ↪ ƒ
SUBPROCA = ℳℱ(𝚲󰋺(‹subproca›).SUBPROCA)

__builtins__["__error_printer__"] ≔ __error_printer__ ≔ ℳℱ(𝚲󰋺("highlighter").__error_printer__)
__builtins__["__highlighter__"  ] ≔ __highlighter__   ≔ ℳℱ(𝚲󰋺("highlighter").__highlighter__  )
