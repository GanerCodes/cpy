 discrete time graph
 continuous time graph

⊢󱎅(l,v,f=󰻾):
    i=0
    ➰i<🃌l∧f(v)>f(lᵢ):
        i+=1
    ↪l﹕ᵢ+[v]+lᵢ﹕

⊢󱎆(l,vs,f=󰻾):
    ∀v∈vs:
        l=󱎅(l,v,f)
    ↪l

󱀘:
    ⊢__init__(𝕊,n,d=␀):
        𝕊ⁿ=n
        𝕊ᵈ=d≅␀⭜𝑑()⭝d
    ⊢__eq__(𝕊,x): ↪x≇□∧𝕊ⁿ≡xⁿ
    ⊢__hash__(𝕊): ↪hash(𝕊ⁿ)
    ⊢__repr__(𝕊): ↪𝕊ⁿ.__repr__()

󱀘󰝊:
    ⊢__init__(𝕊,f,t,n=ᐦ,w=1,l=ᐦ,d=␀):
        𝕊ᶠ=f
        𝕊ᵗ=t
        𝕊ⁿ=n
        𝕊ʷ=w
        𝕊ˡ=l
        𝕊ᵈ=d≅␀⭜𝑑()⭝d
    ⊢__repr__(𝕊): ↪𝕊ᶠ.__repr__()+‹→›+𝕊ᵗ.__repr__()

󱀘󰡷:
    ⊢__init__(𝕊,v=␀,e=␀,di=✗):
        𝕊ᵛ=[]
        ¿e≅␀: e=𝑑()
        𝕊ᵉ=eᐹ𝑑⭜e⭝𝑑()
        𝕊ᵈⁱ=di
        ¿v≅␀: v=[]
        ¿vᐹ𝗜:
            ∀i∈v:
                𝕊ᵛ.append(iᐹ⭜i⭝(i))
        ¡:
            𝕊ᵛ=[vᐹ⭜v⭝(v)]
        ∀u∈𝕊ᵛ:
            𝕊ᵉᵤ=[]
        ¿eᐹ𝑙:
            n=𝕊ᵛᐵⁿ
            ∀p∈e:
                𝕊.add(p)
        ¿di: ↪
        ∀p∈𝕊ᵛ:
            ∀q∈𝕊ᵉₚ:
                ¿p∉𝕊ᵉ􊫼ᴍ󰲡xᵗ󰅂: 𝕊ᵉ􊫼.append(󰝊(qᵗ,p))
    ⊢add(𝕊,z):
        ¿zᐹ:
            ¿z∉𝕊ᵛ: 𝕊ᵛ.append(z)
            ↪z
        ¿zᐹ𝑙:
            n=𝕊ᵛᐵⁿ
            f=z₀ᐹ⭜z₀⭝z₀∈n⭜𝕊.get(z₀)⭝(z₀)
            t=z₁ᐹ⭜z₁⭝z₁∈n⭜𝕊.get(z₁)⭝(z₁)
            z=󰝊(f,t)
        ¿zᐹ󰝊:
            ¿zᵗ∉𝕊ᵛ:
                𝕊ᵛ.append(zᵗ)
                𝕊ᵉ􊫼=[]
            ¿zᶠ∉𝕊ᵛ:
                𝕊ᵛ.append(zᶠ)
                𝕊ᵉ􊬅=[]
            𝕊ᵉ􊬅.append(z)
            ↪z
        𝕊ᵛ.append((z))
    ⊢get(𝕊,n):
        ∀m∈𝕊ᵛ:
            ¿n≡mⁿ:
                ↪m
        ↪□
    ⊢next(𝕊,v,w=∞): ↪𝕊ᵉᵥ󰈲󰲡xʷ≤w󰅂ᐵᵗ
    ⊢__in__(𝕊,x):
        ↪xᐹ⭜x∈𝕊ᵛ⭝x∈𝕊ᵉₓ􊬅
    ⊢__eq__(𝕊,x):
        ¿𝕊ᵛ🃌≠xᵛ🃌: ↪✗
        ∀v∈𝕊ᵛ:
            ¿v∉xᵛ: ↪✗
        ∀v∈𝕊ᵉ:
            ¿𝕊ᵉᵥ🃌≠xᵉᵥ🃌: ↪✗
            ∀e∈𝕊ᵉᵥ:
                ¿e∉xᵉᵥ: ↪✗
        ↪✓
    ⊢sub(𝕊,vs):
        es=[]
        ∀v∈vs:
            ∀e∈𝕊ᵉᵥ:
                ¿eᵗ∈vs: es.append(e)
        ↪󰡷(v=vs,e=es,di=𝕊ᵈⁱ)
    ⊢__hash__(𝕊):
        ↪hash(frozenset(𝕊ᵛᴍ󰲡xⁿ))  󰤱 account for edges
    ⊢deg(𝕊,v):
        ↪𝕊ᵉᵥ🃌
    ⊢isoto(𝕊,g):
        ¿𝕊ᵛᴍ𝕊.deg󰒼≠gᵛᴍg.deg󰒼: ↪✗
        l=[]
        i=0
        ➰i<🃌𝕊ᵛ∧i≥0:
            ¿l🃌>i: l=l﹕ᵢ₊₁
            ¿l🃌≡i: l.append(0)
            ⸘lᵢ<𝕊ᵛ🃌-1: lᵢ+=1
            ¡:
                i-=1
                ↺
            ¿lᵢ∈l﹕ᵢ ∨ 𝕊.deg(𝕊ᵛᵢ)≠g.deg(gᵛₗ􊬀): ↺
            ∀j∈i⭥:
                ¿𝕊ᵛᵢ∈𝕊ᵉ􊶊􊫾􊲌ᐵᵗᐸ →^← gᵛₗ􊬀∈gᵉ􊫾􊬷􊼿􊲌􊽀ᐵᵗᐸ: ⇥
                ¿𝕊ᵛⱼ∈𝕊ᵉ􊶊􊫾􊬀ᐵᵗᐸ →^← gᵛₗ􊲌∈gᵉ􊫾􊬷􊼿􊬀􊽀ᐵᵗᐸ: ⇥
            ¡:
                i+=1
        ¿l🃌≠𝕊ᵛ🃌: ↪✗
        d=𝑑()
        ∀i∈𝕊ᵛ🃌⭥:
            d􊶊􊫾􊬀=gᵛₗ􊬀
        ↪󰲡dₓ
    ⊢bedin(𝕊,g):
        l=[]
        i=0
        ➰i<🃌𝕊ᵛ∧i≥0:
            ¿l🃌>i: l=l﹕ᵢ₊₁
            ¿l🃌≡i: l.append(0)
            ⸘lᵢ<𝕊ᵛ🃌-1: lᵢ+=1
            ¡:
                i-=1
                ↺
            ¿lᵢ∈l﹕ᵢ: ↺
            ∀j∈i⭥:
                ¿𝕊ᵛᵢ∈𝕊ᵉ􊶊􊫾􊲌ᐵᵗᐸ →>← gᵛₗ􊬀∈gᵉ􊫾􊬷􊼿􊲌􊽀ᐵᵗᐸ: ⇥
                ¿𝕊ᵛⱼ∈𝕊ᵉ􊶊􊫾􊬀ᐵᵗᐸ →>← gᵛₗ􊲌∈gᵉ􊫾􊬷􊼿􊬀􊽀ᐵᵗᐸ: ⇥
            ¡:
                i+=1
        ¿l🃌≠𝕊ᵛ🃌: ↪✗
        d=𝑑()
        ∀i∈𝕊ᵛ🃌⭥:
            d􊶊􊫾􊬀=gᵛₗ􊬀
        ↪󰲡dₓ
    ⊢covof(𝕊,g):
        l=[]
        i=0
        ➰i<🃌𝕊ᵛ∧i≥0:
            ¿l🃌>i: l=l﹕ᵢ₊₁
            ¿l🃌≡i: l.append(0)
            ⸘lᵢ<gᵛ🃌-1: lᵢ+=1
            ¡:
                i-=1
                ↺
            ¿𝕊.deg(𝕊ᵛᵢ)≠g.deg(gᵛₗ􊬀): ↺
            ∀j∈i⭥:
                ¿𝕊ᵛᵢ∈𝕊ᵉ􊶊􊫾􊲌ᐵᵗᐸ →>← gᵛₗ􊬀∈gᵉ􊫾􊬷􊼿􊲌􊽀ᐵᵗᐸ: ⇥
                ¿𝕊ᵛⱼ∈𝕊ᵉ􊶊􊫾􊬀ᐵᵗᐸ →>← gᵛₗ􊲌∈gᵉ􊫾􊬷􊼿􊬀􊽀ᐵᵗᐸ: ⇥
            ¡:
                i+=1
        ¿l🃌≠𝕊ᵛ🃌: ↪✗
        d=𝑑()
        ∀i∈𝕊ᵛ🃌⭥:
            d􊶊􊫾􊬀=gᵛₗ􊬀
        ↪󰲡dₓ

 􋦐􋦑􋉌𝕊􊶊􋦎􋦏
 determine all fastest paths S→E
 determine one fastest path S→E
 is there a path S→E
 determine all/one/is/how many paths S→E with small weight

󱀘:
    ⊢__init__(𝕊,c,v,l):
        𝕊ᶜ=c
        𝕊ᵛ=v
        𝕊ˡ=l
    ⊢__eq__(𝕊,x): ↪𝕊ᶜ≡xᶜ∧𝕊ᵛ≡xᵛ
    ⊢__repr__(𝕊): ↪␛(+␛,.join(𝕊ᶜᴍᔐ)+‹).›+𝕊ˡ+␛.+𝕊ᵛ.__repr__()

󱀘󱗿(󰡷):
    ⊢__init__(𝕊,s=␀,g=␀,d=␀,o=␀,r=ⴳ,b=␀,w=1):
        𝕊ᵛ=b≅␀⭜[(□)]⭝bᵛ
        𝕊ᵉ=b≅␀⭜𝑑()⭝bᵉ
        𝕊ᵈⁱ=b≅␀⭜✗⭝bᵈⁱ
        dim=󰲡x󷹵𝑙⭜[]⭝dim(x₀)+[🃌x]
        ¿s≇␀:
            m=0
            ➰𝗻⋅m∈s:
                m+=1
            m=m-1
            g=s󷹎←𝗻⋅m
            ∀i∈1…m:
                g=gᴍⁱ󰲡x󷹎←𝗻⋅←m-i
            g=gᴍᵐ𝑙
        𝕊ᵍ=g
        𝕊ᵈⁱᵐ=dim(g)
        𝕊ᵒ=o≅␀⭜[✗]⋅🃌𝕊ᵈⁱᵐ⭝oᐹ𝑙⭜o⭝[o]⋅🃌𝕊ᵈⁱᵐ
        𝕊ᵈ=d≅␀⭜𝕊ᵈⁱᵐ⭥ᴍ󰲡𝕊ᵈⁱᵐₓ≡2∧𝕊ᵒₓ⭜[[0]⋅x+[1]+[0]⋅←𝕊ᵈⁱᵐ🃌-x-1]⭝[[0]⋅x+[1]+[0]⋅←𝕊ᵈⁱᵐ🃌-x-1,[0]⋅x+[󷰾]+[0]⋅←𝕊ᵈⁱᵐ🃌-x-1]󰅂⨁⭝d
        𝕊ʳ=r
        𝕊ʷ=w
    ⊢__contains__(𝕊,p):
        ¿pᐹ: ↪(pᵛ∈𝕊ᵛ)∧⋀←𝕊ᵈⁱᵐ🃌⭥ᴍ󰲡pᶜₓ≥0∧pᶜₓ<𝕊ᵈⁱᵐₓ
        ¿pᐹ𝑙∨pᐹ𝑡: ↪⋀←𝕊ᵈⁱᵐ🃌⭥ᴍ󰲡pₓ≥0∧pₓ<𝕊ᵈⁱᵐₓ
        ↪✗
    ⊢__getitem__(𝕊,c):
        h=𝕊ᵍ
        ∀i∈cᴙ:
            h=hᵢ
        ↪h
    ⊢point(𝕊,c,v):
        ↪(c,v,𝕊)
    ⊢move(𝕊,a,b):
        ↪𝕊ᵈⁱᵐ🃌⭥ᴍ󰲡𝕊ᵒₓ⭜(aₓ+bₓ)%𝕊ᵈⁱᵐₓ⭝aₓ+bₓ
    ⊢connected(𝕊,p,q):
        ↪pᶜ≡qᶜ∧q∈𝕊ᵉₚ􊫾ᴍ󰲡xᵗ󰅂 ∨ pᵛ≡qᵛ∧𝕊ᵈ∋𝕊ᵈⁱᵐ🃌⭥ᴍ󰲡oₓ⭜(qᶜₓ-pᶜₓ)%𝕊ᵈⁱᵐₓ⭝qᶜₓ-pᶜₓ
    ⊢combine(n1,n2):
        ¿n1ᐹ𝑙∧n2ᐹ𝑙 ∨ n1ᐹᔐ∧n2ᐹᔐ ∨ n1ᐹ𝑑∧n2ᐹ𝑑: ↪n1+n2
        ¿n1ᐹ𝑙: ↪n1+[n2]
        ¿n2ᐹ𝑙: ↪[n1]+n2
        ↪[n1,n2]
    ⊢next(𝕊,p):
        n=[]
        ∀d∈𝕊ᵈ:
            ¿𝕊.move(pᶜ,d)≕m∈𝕊: n.append((m,pᵛ,𝕊ₘ))
        ∀q∈𝕊ᵉₚ􊫾ᴍ󰲡xᵗ󰅂:
            n.append((pᶜ,q,𝕊ₚ􊬄))
        ↪n

 ⧈⨯⋅[x]∗

 g=󰡷(e=[[␛a,␛b],[␛b,␛c],[␛c,␛a]])
 h=󰡷(e=[[1,2],[2,3],[3,4],[4,5],[5,6],[6,1]])
 gᵉ☾
 hᵉ☾
 f=h.covof(g)
 ☾←f(☾←hᵛ₀)

 g=󱗿(‹...𝗻.#.𝗻𝗻..#𝗻S#E›,b=g)

 2󷹁=½
 f󷹁≔the function
 options f has property __inv__
 or f󷹁¹⁰􋅈 f searches 10⭥ for inverse
