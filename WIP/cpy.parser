;ᴺ
,ᴺ :ᴺ
¿ᴺ ⸘ᴺ ¡ᴺ
≡ᴺ ≠ᴺ ≮ᴺ <ᴺ ≤ᴺ ≥ᴺ >ᴺ ≯ᴺ
∈ᴺ ∉ᴺ ∌ᴺ ∋ᴺ
⊈ᴺ ⊆ᴺ ⊄ᴺ ⊂ᴺ ⊃ᴺ ⊅ᴺ ⊇ᴺ ⊉ᴺ
∨ᴮ ⊻ᴮ ␉ ∧ᴮ ⊼ᴮ
ᐹᴮ ζᴮ ᴍᴮ ſᴮ Σᴵᴾ󰀒 Πᴵᴾ󰀒 󰈲ᴵᴾ󰀒 󰈳ᴵᴾ󰀒
|ᴮ ␉ ^ᴮ ␉ &ᴮ
<<ᴮ >>ᴮ
+ᴾᴮ -ᴮ
∘ᴮ ○ᴮ ⋄ᴮ
◄ᴮ ►ᴮ
∪ᴮ ␉ ∩ᴮ ␉ ⨉ᴮ ∖ᴮ
//ᴮ /ᴮ ÷ᴮ %ᴮ @ᴮ *ᴮ ⋅ᴮ !󰀒 󰛔ᴵ  ␛
    ⤉ᴵᴾ󰀒 ⤈ᴵᴾ󰀒 󷹄ᴵᴾ󰀒 󰘬ᴵᴾ󰀒 ☾ᴾ󰀒 🃌ᴾ󰀒 ⛶ᴾ󰀒 ␛
    ⍉ᴾ󰀒 ↨ᴾ󰀒 ⭥ᴾ󰀒 ↕ᴾ󰀒 ᴙᴾ󰀒 ⨳ᴾ󰀒 ⋀ᴾ󰀒 ⋁ᴾ󰀒
¬ᴾ ¯ᴾ
… ⌃ᴵᴮ **ᴵᴮ
.ᴵᴮ

.  ｜:=ᴵᴮ｜,─.
.  ｜≔ ᴵᴮ｜,─.
   ｜← ᴾ｜¿─.
¿─.｜→ 󰀒｜

ℵ ␉ 𝕋 ␉ 𝔽 ␉ î ␉ π ␉ τ ␉ □ ␉ ∅ ␉ ∞ ␉ ᐦ

False None True and as assert async await break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield

«GENERATORS»

print(1)

«GRAMMAR»

# -------------- PARSERS -------------- #

parser_main = exprs_n / W?
parser_comment = (str / comment / ~"."s)*

# -------------- DYNAMICS -------------- #

KEYWORDS = ~"%KEYWORDS%"
VAR_SPEC = ~"%VAR_SPECIAL%"
OPER_LIT = ~"%OPERATORS%"

# ------------- EXPRESSION ------------- #

exprs_n = W? (exprs W?)+
exprs = w? (expr w?)+
expr = lamb / _expr1
_expr1 = group / str / VAR_SPEC / oper / keyword / _script / variable

oper = oper_mod_l OPER_LIT oper_mod_r
oper_mod_l = ~"['⟥']*"
oper_mod_r = ~"[´꜠ᵜ⟤]*"

_script = superscript / subscript
superscript = ~"[ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘᵛʷˣʸᶻᴬᴮ󰀂ᴰᴱ󰀅ᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾ󰀐ᴿ󰀒ᵀᵁⱽᵂ󰀗󰀘󰀙󰁌󰁍󰁎󰁏󰁐󰁑󰁒󰁓◌󰁔󰁕󰁖󰁗󰁘󰁙󰁛󰁜󰁝󰁞󰁟󰁠󰁡󰁢󰁣󰁤◌◌󰀶󰀷◌󰀻󰁁󰁃󰁅󰁈󰁊󰁋⁰¹²³⁴⁵⁶⁷⁸⁹◌󰁱󰂂󰂁󰁲◌ꜝ⁺⁻ᐟ⁼⁽⁾◌◌◌˜]+"
subscript = ~"[ₐₑₕᵢⱼₖₗₘₙ󰂼ₚᵣₛₜᵤᵥₓ󰂓󰂔󰂕󰂖󰂗󰂘󰂙󰂚󰂛󰂜󰂝󰂞󰂟󰂠󰂡󰂢󰂣󰂤󰂥󰂦󰂧󰂨󰂩󰂪󰂫󰂬󰃤󰃥󰃦󰃧󰃨󰃩󰃪󰃫◌󰃬󰃭󰃮󰃯󰃰󰃱󰃳󰃴󰃵󰃶󰃷󰃸󰃹󰃺󰃻󰃼◌◌󰃎󰃏◌󰃓󰃙󰃛󰃝󰃠󰃢󰃣₀₁₂₃₄₅₆₇₈₉﹕󰄎󰄟󰄞󰄏﹖◌₊₋⸝₌₍₎﹠﹩﹪◌]+"

keyword = KEYWORDS 
variable = (!VAR_SPEC !oper !W ~"[^𝗮-𝘇␛𝚲⥌↦①②③④󰅂\\\"\\' \\[\\](){}⁅⁆〚〛⟨⟩‹›]")+

group = (('(' exprs_n? ')') / ('{' exprs_n? '}')
      /  ('[' exprs_n? ']') / ('⁅' exprs_n? '⁆')
      /  ('⟨' exprs_n? '⟩') / ('〚' exprs_n? '〛'))

# --------------- LAMBDAS --------------- #

lamb_h_exprs_n = W? (lamb_h_expr W?)+
lamb_h_expr = (!lamb_h_implicit lamb) / _expr1

lamb_h_normal   = "⥌" lamb_h_exprs_n "↦"
lamb_h_implicit = variable "↦"
lamb_h_preset   = ~"[𝚲①②③④]"
lamb_h = lamb_h_normal / lamb_h_implicit / lamb_h_preset
lamb_b = (exprs_n? '󰅂') / exprs
lamb = lamb_h lamb_b

# --------------- STRINGS --------------- #

str = special_str / py_str / str_escape / str_spec_char

special_str = ('‹' (str_escape / str_sub / str_spec_char / str_guts)* '›')
str_sub = '〚' exprs_n? '〛'
str_guts = !str_spec_char ~"[^␛〚›]+"
str_escape = ~"␛."
str_spec_char = ~"[𝗮-𝘇]"

py_str = (('"' (py_str_sub / ~"[^\\\\\"]+")* '"')
       /  ("'" (py_str_sub / ~"[^\\\\\']+")* "'"))
py_str_sub = ~"\\\\."

# whiespace
w = ~"[ \t]+"
W = ~"[ \t\n]+"
comment = ~"([|#][^\\n]*(\\n|\\Z))|(🟑[^🟑]*(🟑|\\Z))|(֎[^֎]*(֎|\\Z))"s