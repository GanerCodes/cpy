a
    b
        c
d
    e
f

‚ë°xüÉå‚Üí+‚ÜêüÉåyÛ∞ÖÇ
2+3

2‚ãÖ5 + (‚ãÖ)

Œ≥ = 2

@cheese
def hi():
    print(1)

Œ±Œ£Œ≤

üüë





hi [xd]
    2+2
    if 2:
        print
        ‚ë† x¬≤ + 2


if 1:
    print(2)
    asd
        egg
                eg2
            eg3
else:
    print(2)

aÓ†Ö
a ∏

if x
    print(1)
    asd
        asd
    „Äö print(1)
        2+x
    „Äõ

[+,-,/] Œ∂ [1,2,3] ≈ø ‚ë°x(y)Û∞ÖÇ ‚Üí ‚òæ + 1

a‚ãÖb+c‚ãÖd

2‚à™ ‚Üê [+,-,/] Œ∂ [1,2,3] ≈ø ‚ë°x(y)Û∞ÖÇ ‚Üí ‚òæ + 1

if x „Äö print(1) 
asd „Äö asd „Äõ
„Äö print(1) „Äö 2x „Äõ „Äõ „Äõ


[+,-,/] Œ∂ [1,2,3]
 ≈ø ‚ë°x(y)Û∞ÖÇ ‚Üí ‚òæ + 1
1 ‚Üí a

‚ë†(1)

(0‚Ä¶2]


2 + ‚êõ
  5 + 2


‚Äπhi‚êõùêõ‚Ä∫+‚êõùê¨‚ãÑùòÄ
a ∏·∂ª  ∏z‚ÇÇ‚ÇÉw‚ÇÇ
‚Äπreally cheese „Äöx¬≤„Äõ‚Ä∫
1‚Üê2‚Üê3
[+,-,/] Œ∂ [1,2,3] ≈ø ‚ë°x(y)Û∞ÖÇ
x‚ãÖy‚Üí+3
1‚Üí2‚Üí3
f‚Üíg‚Üíh‚Üím‚Üêk‚Üêl‚Üíp

1‚Üê2‚Üê3


a‚®âb‚à©c‚®âd

print(1)
2+(5+2)
2+3‚Üí‚ãÖ2
a ‚à™ ((b ‚à™ (c Œ∂ d)) ·¥ç (e ‚à™ f))
1‚Ä¶2‚åÉ3‚åÉ4‚åÉ5‚Ä¶6

5+2‚Üí‚ü∂‚ü∂+a‚ãÖ1‚ü∂+2

if op.t in '‚Üê‚ü∂‚Üê‚Üíü°∏ü°∫':
    j = ùïä.into_expr(collapse(res+[cur]))
    j.text = f"({j.text})"
    print("PARSING", [j] + stack)
    return ùïä.parse_exprs([j] + stack)

[+,-,/] Œ∂ [1,2,3] ≈ø ‚ë°x(y)Û∞ÖÇ ‚ü∂ ‚òæ + 1

2+3Û∞ÖÇ‚ãÖ2
(2+3)‚ãÖ2
(2+3)‚ãÖ2

([+,-,/] Œ∂ [1,2,3] ≈ø ‚ë°x(y)Û∞ÖÇ) ‚ü∂ (‚òæ + 1)

a‚åÉb‚åÉ

1 (‚òæ) 2


[+,-,/] Œ∂ [1,2,3] ≈ø ‚ë°x(y)Û∞ÖÇ ‚Üí ‚òæ + 1

x("a").y

op_maps ·¥ç‚ë†xÛ∞ò¨ùòÄ·¥ç‚ë†xÛ∞õî‚êõùê¨‚ãÑùòÄ

class Mapper_py(Mapper):
    def generate_gram_regexes(ùïä, op_names):
        rgx_keywords = rgx_or(py_kw.kwlist + py_kw.softkwlist)
        rgx_operator = rgx_or(flat([re.escape(c+'='), re.escape(c)] for c in op_names))
        rgx_specials = rgx_or([*"‚ÑµùïãùîΩ√ÆœÄœÑ‚ñ°‚àÖ‚àû·ê¶", "\\."*3])
        return {
            "OPERATORS": i_rgx_fmt(rgx_operator),
            "VAR_SPECIAL": i_rgx_fmt(rgx_specials),
            "KEYWORDS": i_rgx_fmt(f"({rgx_keywords})(\\Z|[^_a-zA-Z0-9])") }

# actual operators
# blocks
# 

# V,pr=0,lambda*a,**k:print(V*'#',*a,**k)
# def A(*a,**k): global V ; V += 1 ; pr(*a,**k)
# def B(*a,**k): global V ; pr(*a,**k) ; V -= 1

op_maps ·¥ç‚ë†xÛ∞ò¨ùòÄ ·¥ç‚ë†xÛ∞õî‚êõùê¨‚ãÑùòÄ

(+)‚ãÑ(-)‚ãÑ(‚ãÖ)

class Mapper:
    SPECIALS = ...

‚òæ¬¥
·¥çÍú†·µú

¬¨1+1‚ãÖ2/2!+1‚åÉ2‚åÉ3

¬ø 1>x>2:
    1+1‚ãÖ2/2!+1‚åÉ2‚åÉ3
    ‚Äπhi‚êõùêõ‚Ä∫
    x+(y+[] a b)*z

class dasjiod:
    def asfmdiaf:
        daodasd

class Mapper:
    SPECIALS = ...
    GRAM_FILE = ...
    OPERATOR_FILE = ...
    NODE_CLS = ...

‚ü•d
ssssd

ùö≤1
‚ë†1
‚ë°1
x‚Ü¶1
‚•åx,y,*a‚Ü¶2
‚•åx,y,*a,**k‚Ü¶2
‚•åx,y,*a‚Ü¶2
‚•åx,y,**k‚Ü¶2
‚•åa‚Ü¶2
‚•å**,x,*‚Ü¶2

‚•å**k,x,y‚Ü¶2

‚òæ¬¥·¥ç‚Üï10
‚òæ·¥ç‚Üï10

¬ø 1>x>2:
    1+1‚ãÖ2/2!+1‚åÉ2‚åÉ3
    ‚Äπhi‚êõùêõ‚Ä∫¬¥
    x+(y+[] a b)*z

os = "os" ‚®°
os.system(‚Äπecho „Äö2 5„Äõ‚Ä∫)

a b,c d

Ó¨¶ asdijasd
# dasd

Ó¨¶ ‚≠•‚¨ç‚Ü®

5‚Üï Œ∂ 5‚Üï·¥ô ·¥ç ‚ãÖ¬¥ ‚Üí ‚òæ
f‚óãf = f(f(‚¨§))
10‚≠• ·¥ç ‚òæ¬¥‚óã‚õ∂¬¥
f‚àòf = f(f)
‚•åF,n‚Ü¶‚ë†‚ë°‚ë°y‚àòxÛ∞ÖÇ ≈ø x‚õ∂+·¥ôFÛ∞ÖÇ ≈ø x‚õ∂+0‚õ∂n
0‚Ä¶10 ·¥ç ‚ë†x‚åÉ2Û∞ÖÇ Œ£ ‚Üï Û∞à≤ ‚ë†x%2‚â°1

10‚Üï ·¥ç ‚ãÖÍú†
Ó¨¶ normalize ¬¥
Ó¨¶ duplicate input? Íú†
Ó¨¶   Forces into binop
Ó¨¶ swap? ·µú
Ó¨¶ ? Íù∞‚µØ·µîÀÜÍúõêû¥

if ùïã:
    print(1)
else dasd:
    dasd

0‚Ä¶10 ·¥ç ‚ë†x‚åÉ2Û∞ÖÇ Œ£ ‚Üï Û∞à≤ ‚ë†x%2‚â°1
0‚Ä¶10 ‚îÇ·¥ç‚îÇ ‚ë†x‚åÉ2Û∞ÖÇ ‚îÇŒ£‚îÇ ‚Üï ‚îÇÛ∞à≤‚îÇ ‚ë†x%2‚â°1
(0‚Ä¶10 ‚îÇ·¥ç‚îÇ ‚ë†x‚åÉ2Û∞ÖÇ) ‚îÇŒ£‚îÇ ‚Üï ‚îÇÛ∞à≤‚îÇ ‚ë†x%2‚â°1
((0‚Ä¶10 ‚îÇ·¥ç‚îÇ ‚ë†x‚åÉ2Û∞ÖÇ) ‚îÇŒ£‚îÇ ‚Üï) ‚îÇÛ∞à≤‚îÇ ‚ë†x%2‚â°1
(((0‚Ä¶10 ‚îÇ·¥ç‚îÇ ‚ë†x‚åÉ2Û∞ÖÇ) ‚îÇŒ£‚îÇ ‚Üï) ‚îÇÛ∞à≤‚îÇ ‚ë†x%2‚â°1)
((((0‚Ä¶10 ‚îÇ·¥ç‚îÇ ‚ë†x‚åÉ2Û∞ÖÇ) ‚îÇŒ£)‚îÇ ‚Üï) ‚îÇÛ∞à≤‚îÇ ‚ë†x%2‚â°1)

def print(ùïä, p=·óú,es=Z.lR+'‚àÖ'+Z.p, fmt=lambda x:·ñá(x,'\n',Z.P+'_'+Z.WH), clr=lambda x:Z.GR+x+Z.WH, m=64, sp=3):
        if p is ·óú:
            return print(≈Ñ.join(x[1] for x in ùïä.print(0)))
        R = []
        for i,v in enum(cs:=[c.print(p+1) for c in ùïä.C]):
            end = i == ‚µå(cs)-1
            for o,(a,d) in enum(v):
                v[o][1] = clr('‚îú‚ï∞‚îÇ '[end+2*·ñ≤(o)]+'‚îÄ '[·ñ≤(o)]*(sp-1)) + v[o][1]
            R += v
        return [[p, f"{clr(p and "‚ï¥‚ïÆ¬≠"[·ñ≤(ùïä.C)] or '‚ï∑')}{ùïä.t or es} {Z.bdB}{fmt(ùïä.txt[:m]) or es}{Z.bBLA}{((l:=‚µå(ùïä.txt)) > m) and f"‚Ä¶‚Ä¶+{l-64}" or ·ê¶}"]] + R