Binary operator modes
    ᴮ: "blocking"    :  left assoc. binary : + *
    ᴺ: "nonblocking" : right assoc. binary : ⌃
    ᐟ: none                                : ¬

Unary operator modes
    󰂢: prefix          : ¬
    󰂥: suffix          : !
    : suffix ∨ prefix : ☾
    ⸝: none            : ÷

All valid operator types:
    ᴿ󰂢 | ᴿ󰂥 | ᴿ | ᴿ⸝
    ᴸ󰂢 | ᴸ󰂥 | ᴸ | ᴸ⸝
    ᐟ󰂢 | ᐟ󰂥 | ᐟ | ──

Σᴮ󰂢󰂥⸝ : 𝑥Σ𝑦Σ𝑧 ⟶ (𝑥Σ𝑦)Σ𝑧
Σᴺ󰂢󰂥⸝ : 𝑥Σ𝑦Σ𝑧 ⟶ 𝑥Σ(𝑦Σ𝑧)
Σᴺ󰂥   : 𝑥Σ𝑦Σ ⟶ 𝑥Σ(𝑦Σ)
Σᴮ󰂥   : 𝑥Σ𝑦Σ ⟶ (𝑥Σ𝑦)Σ
Σᴮ󰂢   : Σ𝑥Σ𝑦 ⟶ (Σ𝑥)Σ𝑦
Σᴺ󰂢   : Σ𝑥Σ𝑦 ⟶ Σ(𝑥Σ𝑦)
Σᴮ󰂥   : 𝑥ΣΣ𝑦 ⟶ (𝑥Σ)Σ𝑦
Σᴺ󰂢   : 𝑥ΣΣ𝑦 ⟶ 𝑥Σ(Σ𝑦)
Σᐟᴺᴮ󰂥 : 𝑥ΣΣΣ ⟶ ((𝑥Σ)Σ)Σ
Σᐟᴺᴮ󰂥 : 𝑥ΣΣΣΣΣ ⟶ ((((𝑥Σ)Σ)Σ)Σ)Σ
Σᐟᴺᴮ󰂢 : ΣΣΣΣΣ𝑦 ⟶ Σ(Σ(Σ(Σ(Σ𝑦))))
Σᐟᴺᴮ  : ΣΣ𝑥ΣΣΣ ⟶ Σ(Σ(((𝑥Σ)Σ)Σ))
 TODO: add stops, Σ` or something to disable right functionality / ′Σ for visa-versa
ℵ𝕋𝔽îπτ□∅∞ᐦ

x∋α∈z→⋅2

˜: ᐟ⸝

;˜
,˜ :˜
🠈 🠊
:=ᴺ ≔ᴺ
¿˜ ⸘˜ ¡˜  parse
← →   parse
≡˜ ≠˜ ≮˜ <˜ ≤˜ ≥˜ >˜ ≯˜
∈˜ ∉˜ ∌˜ ∋˜
⊈˜ ⊆˜ ⊄˜ ⊂˜ ⊃˜ ⊅˜ ⊇˜ ⊉˜
 parse / group
∨ ⊻
∧ ⊼
≾ ζ ᴍ ſ Σᴺ Πᴺ 󰈲ᴺ 󰈳ᴺ
|
^
<< >> &
+ -
⋄˜ ∘ ○
◄ ►
∪
∩
⨉ ∖
// / ÷ % @ * ⋅ !󰂥 ⤉ᴺ ⤈ᴺ 󷹄ᴺ ☾ 🃌 ⛶ ⍉ ↨ ↕ ᴙ ⨳ ⋀ ⋁
¬󰂢 ¯󰂢
… ⌃ᴺ **ᴺ
.

. . ∣ : : ∣ % % ∣ @ @ ∣ * *
⨯ * ∣ / / ∣ ⋅ * ∣ + + ∣ - -
¯ - ∣ ^ ^ ∣ & & ∣ | | ∣ , ,
: : ∣ ≔ := ∣ < < ∣ > > ∣
<< << ∣ >> >>
∧ 𝐬and𝐬 ∣ ∨ 𝐬or𝐬 ∣ ∈ 𝐬in𝐬
∉ 𝐬not𝐬in𝐬 ∣ ⥌ 𝐬lambda𝐬


⨡ asd
¿x:
    dasd

y = x+2

t = ¿x ⇒ ⟨ 2 ⟩+1 ⸘y ⇒ 3 ¡ 4⸮

a≔b≔1  a≔(b≔1)

a⋄b≔1⋄1
➰𝕋 ⇒ a⋄b≔(☾a+b)⋄b

a⋄b≔1⋄1
➰ a<2⌃8 ⇒ a⋄b≔(☾a+b)⋄b

a≔b≔1;⟨x<2⌃8⟩➰𝚲a,b≔a+b,☾b

↺

¿𝕋 ⇒ 〚↪2〛⸮

⟵ ⟶  used for weak assignment?


⟨𝕩⌃2⟩

x = 〚↪ 2〛  x = 2
x = ⟨↪ 2⟩  x = □↦2





def reduce(𝕊):
    if 𝕊.expr_name and 𝕊.expr_name == "var":
        return Node(𝕊.text, 𝕊.expr_name, [])
    return Node(𝕊.text, 𝕊.expr_name, flat(
                [C] if (C:=c.reduce()).expr_name else
                (C.children or [Node(C.text, "s", [])]) 
            for c in 𝕊.children))

reduce≔𝕊↦〚
    ¿ 𝕊.expr_name ∧ 𝕊.expr_name≡‹var› ⇒ 
        〚 ↪² Node(𝕊.text, 𝕊.expr_name, []) 〛 ⸮
    Node(𝕊.text, 𝕊.expr_name, 𝕊.children ᴍ ①
            ¿ C≔𝕩.reduce().expr_name ⇒ 〚C⛶〛
            ¡ C.children ∨ Node(C.text, ␛s, [])⛶ ⸮ Σ []) 〛


𝚲𝚲󰅂𝚲󰅂

𝚲𝚲󰅂𝚲󰅂

10↕ ᴍ ①
    
󰅂

֎ 
Things that are only binop implicitly do this
2+
3

2+␛
3
֎
















@classmethod
    def process_arrow_operators(ℂ, n, layers=ℕ): # prob shouldn't exist
        layer, *nlayers = layers or ℂ.arrows
        if nlayers:
            n = ℂ.process_arrow_operators(n, nlayers)
        
        is_arrow = lambda x: isinstance(x, ℂ) and x.expr_name == "oper" and x.text in layer
        into_exprroup = lambda x: ℂ(ℕ, "group",
                        [ℂ('('), ℂ(ℕ, "exprs", [ℂ.parse_exprs(x, ℂ.ops)]), ℂ(')')])
        
        stack = ℂ.partition(n.copy(), is_arrow, n=ℂ.not_whitespace)
        res = []
        while stack:
            c_l = stack.pop(0)
            if is_arrow(c_l): # left arrows
                A, S = layer[c_l.text]
                assert A.P and stack
                c_r = stack.pop(0)
                val, *vals = ℂ.partition(c_r, partial(ℂ.is_op, layer=S))
                stack[0:0] = [[into_exprroup(val), *vals]]
                continue
            
            if not stack:
                res += c_l
                continue
            
            c_r = stack.pop(0)
            if not is_arrow(c_r):
                stack[0:0] = [c_l + c_r]
                continue
            
            A, S = layer[c_r.text]
            if A.S: # right arrow
                *vals, val = ℂ.partition(c_l, partial(ℂ.is_op, layer=S))
                stack[0:0] = [[*vals, into_exprroup(val)]]
                continue
            
            res += c_l
            stack[0:0] = [c_r]
        print(res)
        return res