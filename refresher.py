from util import *
from cpy_transpile import Compiler, CPY_DIR
from time import time, sleep
import subprocess, traceback

CACHE_DIR = GRAM_CACHE_DIR = "/tmp/cpy_cache"

# import peggle ; peggle.test_peggle() ; exit()

def capture_output(ùëì, *ùî∏, **ùïÇ):
    from contextlib import redirect_stdout
    import io
    
    r = ·óú
    with redirect_stdout(s := io.StringIO()):
        try                  : r = ùëì(*ùî∏, **ùïÇ)
        except Exception as e: print(traceback.format_exc())
    return r, s.getvalue()

def remember_code_for_tracebacks(path, code, *, funky_monkey={"monkeys": set()}):
    if "monke" not in funky_monkey:
        funky_monkey["monke"] = traceback.linecache.checkcache
        funky_monkey["monkeys"].add(path)
        def monkeymonkeymonkeymonkeymonkey(munkee=None):
            if munkee in funky_monkey["monkeys"]: return
            return funky_monkey["monke"](munkee)
        traceback.linecache.checkcache = monkeymonkeymonkeymonkeymonkey
    funky_monkey["monkeys"].add(path)
    traceback.linecache.cache[path] = (·ê¶, ·ê¶, code.split(≈Ñ), )

def dynamic_compile_py(c, file):
    try               : return compile(c, file, m:="eval"), m
    except SyntaxError: return compile(c, file, m:="exec"), m

def compile_py(code, ns, file=·óú, mode="exec"):
    if file is ·óú: file = ns.get("__file__", "cpy-interactive")
    if mode == "dynamic": return file, *dynamic_compile_py(code, file)
    else                : return file, compile(code, file, mode), mode

def run_with_tb(code, ns, file=·óú, mode="exec"):
    file, compiled, mode = compile_py(code, ns, file, mode)
    remember_code_for_tracebacks(file, code)
    return (mode == "exec" and exec or eval)(compiled, ns)

def basic_cpy_session(cache=‚¥≥, ns=·óú, hns=·óú, fname="cpy-interactive", **ùïÇ):
    compiler = Compiler(CACHE_DIR, GRAM_CACHE_DIR)
    
    lang_pfx  = os.path.abspath(f"{CPY_DIR}/Languages/‚òæ")
    header_fp = os.path.abspath(f"{lang_pfx}/Code/header.‚òæ")
    lib_fp    = os.path.abspath(f"{lang_pfx}/Libraries")
    if lib_fp not in sys.path: sys.path.insert(0, lib_fp)
    
    header = R(header_fp)
    hns = {} if hns is ·óú else hns
    hns.setdefault("__builtins__", __builtins__ if ·êπ(__builtins__, ·ñ±) else __builtins__.__dict__)
    hns.setdefault("__file__", header_fp)
    header_py = compiler("‚òæ", header, cache, **ùïÇ)
    run_with_tb(header_py, hns)
    ns = {} if ns is ·óú else ns
    ns["__builtins__"] = ns.get("__builtins__", {}) | hns["__builtins__"] | hns
    ns.setdefault("__name__", "__main__")
    ns.setdefault("__file__", fname)
    return lambda c, **ùïÅ: compiler("‚òæ", c, cache, **ùïÇ|ùïÅ), ns

def basic_cpy_interactive_session(print_code=‚¥¥, print_output=‚¥¥, cache=‚¥≥,
                                  sanity=‚¥≥, interactive_defaults=·óú, **ùïÇ):
    if sanity:
        import ast
        ùïÇ["code_post_process"] = lambda x: ast.unparse(ast.parse(x))
        ùïÇ["code_post_process"].ver = "basic_py_reparse"
    compiler, ns = basic_cpy_session(cache, **ùïÇ)
    def interactive(c, return_mode=‚¥¥, return_code=‚¥¥, cap_stdout=‚¥≥,
                    dynamic_compile=‚¥¥, global_verbose_debug=‚¥¥,
                    force_exec=‚¥¥, **ùïÇ):
        if global_verbose_debug:
            import dynamic_parser
            dynamic_parser.DEBUG = 1
        
        lns = c.split(≈Ñ)
        if not force_exec:
            while lns and not ‚µê(lns[0]): del lns[0]
            if lns and (k := lns[0].lstrip()) and (j := k[0]) in 'ÓÆû':
                lns[0] = ·ñá(lns[0], j, ≈õ, 1)
                force_exec = ‚¥≥
            while lns and not ‚µê(lns[0]): del lns[0]
        s = min(‚µå(l)-‚µå(C) for l in lns if (C := l.lstrip()))
        c = ·íç(≈Ñ, (l[s:] for l in lns))
        
        (t1 := time(), code := compiler(c, **ùïÇ), t := time() - t1)
        print_code and print(f"Code ({t=}):\n{prettify_code(code)}")
        
        if return_code or return_mode:
            if   return_code and return_mode: return mode, code
            elif                 return_mode: return mode
            else                            : return code
        
        mode = force_exec and "exec" or dynamic_compile and "dynamic" or "eval"
        ùëì = lambda: run_with_tb(code, ns, mode=mode)
        r, o = capture_output(ùëì) if cap_stdout else (ùëì(), ·óú)
        
        print_output and o is not ·óú and print(o)
        return r
    interactive.ns = ns
    if interactive_defaults:
        return lambda *ùî∏,**ùïÇ:interactive(*ùî∏, **interactive_defaults|ùïÇ)
    else:
        return interactive

def cpy_timing_test(c, **ùïÇ):
    ENABLE_DEBUG()
    compiler = Compiler(CACHE_DIR, GRAM_CACHE_DIR)
    compiler.test_timing("‚òæ", c, **ùïÇ)

def debug_test_exit(code):
    cpy_timing_test(code, debug_level=2) ; exit()

def run_print_exception(f, *ùî∏, **ùïÇ):
    try:
        return print(ùëì(*ùî∏, **ùïÇ))
    except Exception:
        try:
            print(traceback.format_exc())
        except Exception as e:
            print(f'mfw Exception Exception: {e}')

if __name__ == "__main__":
    from sys import argv
    import readline
    
    # debug_test_exit("""(20.2, .1323, a+.125)""")
    # debug_test_exit("""(20.2, 1323, 0.125)""")
    # debug_test_exit("""-‚ü•Œ£b""")
    # debug_test_exit("""‚òæ(‚ÄπA‚ü¶B‚üßC‚ü¶D‚üßE‚Ä∫)""")
    # debug_test_exit("""‚•å‚Ü¶1""")
    # debug_test_exit("""A ·¥ç·µÉêûë·µá B""")
    
    if "--refresher" in argv:
        def refresher(path, ùëì):
            cur = ""
            while True:
                if (r := R(path)) != cur:
                    ùëì(r)
                    cur = r
                sleep(1 / 15)
        
        cpy = basic_cpy_interactive_session(‚¥≥, ‚¥≥, ‚¥¥, sanity=‚¥¥)
        refresh = lambda c: run_print_exception(cpy, c)
        refresh_file = "/tmp/cpy_test/test.‚òæ"
        if not os.path.isfile(refresh_file):
            os.makedirs(os.path.dirname(refresh_file), exist_ok=‚¥≥)
            W(refresh_file, '‚òæ‚ÄπHello world!‚Ä∫')
        refresher(refresh_file, refresh)
        exit(0)
    
    if len(argv) > 1:
        cpy = basic_cpy_interactive_session(‚¥¥, ‚¥¥, ‚¥≥, ns={ "__file__": (f := os.path.abspath(argv[1])) })
        sys.argv.pop(0)
        cpy(R(f), cap_stdout=‚¥¥, force_exec=‚¥≥)
        exit(0)
    
    cpy = basic_cpy_interactive_session(
                        print_code = "--debug" in argv,
                      print_output = ‚¥¥,
                   dynamic_compile = ‚¥≥,
              global_verbose_debug = "--verbose" in argv)
    while ‚¥≥:
        c = input("‚úù ")
        print('¬ª', end=≈õ)
        run_print_exception(cpy, c)