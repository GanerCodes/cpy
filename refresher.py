from util import *
from cpy_transpile import Compiler, CPY_DIR
import subprocess, traceback

CACHE_DIR = GRAM_CACHE_DIR = "/tmp/cpy_cache"
HISTORY_FILE = "/tmp/cpy_cli.hist"

def capture_output(ùëì, *ùî∏, **ùïÇ):
    from contextlib import redirect_stdout
    import io
    
    with redirect_stdout(s := io.StringIO()):
        try:
            return (ùëì(*ùî∏, **ùïÇ), ‚¥≥), s.getvalue()
        except Exception as e:
            return (e, ‚¥¥), s.getvalue()+≈Ñ+traceback.format_exc()

# stupid monkeypatching garvbarebefshiskodjl
if not hasattr(traceback.linecache, "CPY_CACHE"):
    traceback.linecache.CPY_CACHE = {}
def remember_code_for_tracebacks(path, code, *, funky_monkey={"monkeys": set()}, monkemonEeamnoNEKEEE={}):
    traceback.linecache.CPY_CACHE[path] = code
    monkemonEeamnoNEKEEE[path] = code.split(≈Ñ)
    if "monke" not in funky_monkey:
        funky_monkey["monke"] = traceback.linecache.checkcache
        funky_monkey["monkeys"].add(path)
        def monkeymonkeymonkeymonkeymonkey(munkee=None):
            if munkee in funky_monkey["monkeys"]: return
            try:
                return funky_monkey["monke"](munkee)
            except Exception as e:
                print("Monke error:", e)
                return
        gl = traceback.linecache.getlines
        # traceback.linecache.getlines = lambda x, *A: monkemonEeamnoNEKEEE[path] if x in monkemonEeamnoNEKEEE else gl(x, *A)
        traceback.linecache.checkcache = monkeymonkeymonkeymonkeymonkey
    funky_monkey["monkeys"].add(path)
    traceback.linecache.cache[path] = (·ê¶, ·ê¶, code.split(≈Ñ), )

def dynamic_compile_py(c, file):
    try               : return compile(c, file, m:="eval"), m
    except SyntaxError: return compile(c, file, m:="exec"), m

def compile_py(code, ns, file=·óú, mode="exec"):
    if file is ·óú: file = ns.get("__file__", "cpy-interactive")
    if mode == "dynamic": return file, *dynamic_compile_py(code, file)
    else                : return file, compile(code, file, mode), mode

def run_inj_tb(code, ns, file=·óú, mode="exec"):
    file, compiled, mode = compile_py(code, ns, file, mode)
    remember_code_for_tracebacks(file, code)
    return (mode == "exec" and exec or eval)(compiled, ns)

def basic_cpy_session(do_cache=‚¥≥, ns=·óú, hns=·óú, fname="cpy-interactive", header_carry=·óú, **ùïÇ):
    compiler = Compiler(CACHE_DIR, GRAM_CACHE_DIR)
    
    lang_pfx = os.path.abspath(f"{CPY_DIR}/Languages/‚òæ")
    code_pfx = os.path.abspath(f"{lang_pfx}/Code")
    libr_pfx = os.path.abspath(f"{lang_pfx}/Libraries")
    header_f = os.path.abspath(f"{code_pfx}/header.‚òæ")
    for f in (code_pfx, libr_pfx):
        f in sys.path or sys.path.insert(0, f)
    
    ns  = {} if ns  is ·óú else ns
    hns = {} if hns is ·óú else hns
    
    if header_carry:
        hns = header_carry | hns
    else:
        hns.setdefault("__builtins__", __builtins__ if ·êπ(__builtins__, ·ñ±) else __builtins__.__dict__)
        hns.setdefault("__file__", header_f)
        run_inj_tb(compiler("‚òæ", R(header_f), do_cache, **ùïÇ), hns)
        hns["__header_namespace__"] = hns
    
    ns["__builtins__"] = { **ns.get("__builtins__", {}), **hns["__builtins__"], **hns }
    ns.setdefault("__name__", "__main__")
    ns.setdefault("__file__", fname)
    return lambda c, **ùïÅ: compiler("‚òæ", c, do_cache, **ùïÇ|ùïÅ), ns

def py_reparse(x):
    import ast
    try:
        return ast.unparse(ast.parse(x))
    except Exception as e:
        raise Exception(f'Failed to reparse code! "{e}"\nCode:\n{x}')

def basic_cpy_interactive_session(print_code=‚¥¥, print_output=‚¥¥, do_cache=‚¥≥,
                                  sanity=‚¥≥, interactive_defaults=·óú, **ùïÇ):
    if sanity:
        ùïÇ["code_post_process"] = py_reparse
        ùïÇ["code_post_process"].ver = "basic_py_reparse"
    compiler, ns = basic_cpy_session(do_cache, **ùïÇ)
    def interactive(c, return_code=‚¥¥, cap_stdout=‚¥≥,
                    dynamic_compile=‚¥¥, global_verbose_debug=‚¥¥,
                    force_exec=‚¥¥, output_printer=print, **ùïÇ):
        if global_verbose_debug:
            import dynamic_parser
            dynamic_parser.DEBUG = int(global_verbose_debug)
        
        ùê• = c.split(≈Ñ)
        if not force_exec:
            while ùê• and not ‚µê(ùê•[0]): del ùê•[0]
            if ùê• and (k := ùê•[0].lstrip()) and (j := k[0]) == 'ÓÆû':
                ùê•[0] = ·ñá(ùê•[0], j, ≈õ, 1)
                force_exec = ‚¥≥
            while ùê• and not ‚µê(ùê•[0]): del ùê•[0]
        s = min((‚µå(l)-‚µå(C) for l in ùê• if (C := l.lstrip())), default=0)
        c = ·íç(≈Ñ, (l[s:] for l in ùê•))
        
        (t1 := time(), code := compiler(c, **ùïÇ), t := time() - t1)
        print_code and print(f"Code ({t=}):\n{prettify_code(code)}")
        
        if return_code: return code
        
        mode = force_exec and "exec" or dynamic_compile and "dynamic" or "eval"
        ùëì = lambda: run_inj_tb(code, ns, mode=mode)
        if cap_stdout:
            (r, …ô), o = capture_output(ùëì)
        else:
            r, o = ùëì(), ·óú
        
        if print_output and o is not ·óú: output_printer(o)
        return r
    interactive.ns = ns
    if interactive_defaults:
        return lambda *ùî∏,**ùïÇ:interactive(*ùî∏, **interactive_defaults|ùïÇ)
    else:
        return interactive

def cpy_test(c, level=2, timing_test=‚¥¥, exit=‚¥¥, **ùïÇ):
    if timing_test: ENABLE_DEBUG()
    compiler = Compiler(CACHE_DIR, GRAM_CACHE_DIR)
    compiler.test("‚òæ", c, debug_level=level,
                  test_timing=timing_test, **ùïÇ)
    if exit: exit_()
cpy_timing_test = lambda x, **ùïÇ: cpy_test(x, level=0, timing_test=‚¥≥, **ùïÇ)
debug_test_exit = lambda x, **ùïÇ: cpy_test(x, exit=‚¥≥, **ùïÇ)

def run_print_exception(ùëì, *ùî∏, **ùïÇ):
    try:
        return print(ùëì(*ùî∏, **ùïÇ))
    except Exception:
        try:
            print(traceback.format_exc())
        except Exception as e:
            print(f'mfw Exception Exception: {e}')

def cpy_get_custom_func(t, d):
    def ùëì(ns):
        if t in ns["__builtins__"]:
            return ns["__builtins__"][t]
        return d
    return ùëì

cpy_get_error_printer = cpy_get_custom_func("__error_printer__", RAISE)
cpy_get_highlighter = cpy_get_custom_func("__highlighter__", ID)

def run_custom_errors(ùëì, ns={}, quit=‚¥¥):
    try:
        return ùëì()
    except Exception as Œµ:
        cpy_get_error_printer(ns)(Œµ)
        quit and exit(1)

if __name__ == "__main__":
    # cpy_test("""Û∞Ü¥ factorial, e, pi, tau, sqrt, cbrt""", exit=‚¥≥)
    # cpy_test("""Ùä¨≤‚Çêa‚ÇêÙä¨≤""", exit=‚¥≥)
    # cpy_test("""\nx=‚ü¶\n    A\n    B\n‚üß\ny=‚ü¶A\n   B‚üß""".strip(), exit=‚¥≥)
    # debug_test_exit("""‚•åùïä,t‚Ü¶ùïä·µó‚âît""")
    # debug_test_exit("""(20.2, .1323, a+.125)""")
    # debug_test_exit("""(20.2, 1323, 0.125)""")
    # debug_test_exit("""-‚ü•Œ£b""")
    # debug_test_exit("""‚òæ(‚ÄπA‚ü¶B‚üßC‚ü¶D‚üßE‚Ä∫)""")
    # debug_test_exit("""‚•å‚Ü¶1""")
    # debug_test_exit("""A ·¥ç·µÉêûë·µá B""")
    # debug_test_exit("""x""")
    # debug_test_exit("""z = x+y""")
    # debug_test_exit("""‚•åx,z=‚êÄ,h=ùëé‚Ü¶z+x""")
    
    
    from sys import argv
    try:
        import readline
        Path.exists(Path(HISTORY_FILE)) or W(HISTORY_FILE, ·ê¶)
        readline.read_history_file(HISTORY_FILE)
    except Exception:
        readline = ‚¥¥
    
    agets = lambda x: (argv.count(x := "--"+x), y:=[t for t in argv if t != x], argv.clear(), argv.extend(y))[0]
    
    cpy_kwargs = { "interactive_defaults": { "global_verbose_debug": agets("verbose") } }
    if agets("no-cache"): cpy_kwargs["do_cache"] = ‚¥¥
    
    if agets("refresher"):
        def refresher(path, ùëì):
            cur = ·ê¶
            while ‚¥≥:
                if (r := R(path)) != cur:
                    ùëì(r)
                    cur = r
                sleep(1 / 15)
        
        cpy = basic_cpy_interactive_session(**·ñ±(
                print_code   = ‚¥≥,
                print_output = ‚¥≥,
                do_cache     = ‚¥¥,
                sanity       = ‚¥¥) | cpy_kwargs)
        refresh = lambda c: run_print_exception(cpy, c)
        refresh_file = "/tmp/cpy_test/test.‚òæ"
        if not os.path.isfile(refresh_file):
            os.makedirs(os.path.dirname(refresh_file), exist_ok=‚¥≥)
            W(refresh_file, '‚òæ‚ÄπHello world!‚Ä∫')
        refresher(refresh_file, refresh)
        exit(0)
    
    arg_debug = agets("debug")
    ns = {}
    
    if len(argv) > 1:
        ns = { "__file__": (f := os.path.abspath(argv[1])) }
        cpy = basic_cpy_interactive_session(**·ñ±(
                print_code   = ‚¥¥,
                print_output = ‚¥¥,
                do_cache     = ‚¥≥,
                ns           = ns) | cpy_kwargs)
        sys.argv.pop(0)
        
        run_custom_errors(
            lambda: cpy(R(f), cap_stdout=‚¥¥, force_exec=‚¥≥),
            ns, quit=‚¥≥)
        exit(0)
    
    cpy_kwargs.setdefault("interactive_defaults", {})
    cpy_kwargs["interactive_defaults"] |= { "dynamic_compile": ‚¥≥ }
    cpy = basic_cpy_interactive_session(**·ñ±(
          print_code   = arg_debug,
          print_output = ‚¥≥,
          ns           = ns) | cpy_kwargs)
    fancy = lambda x: f"\001\x1b[38;2;255;0;135m\002{x}\001\033[0m\002"
    swap_ln = lambda x: f"\033[1A{x}\033[K"
    prompt = fancy('‚úù') + ≈õ
    cc_count = 0
    while ‚¥≥:
        try:
            c = input(prompt)
            cc_count = 0
            print(swap_ln(prompt + cpy_get_highlighter(ns)(c)))
            if not c:
                print("God is good!")
                continue
            if readline: readline.append_history_file(1, HISTORY_FILE)
            if c == "‚òæ":
                os.execv(sys.executable, (sys.executable, __file__))
            run_custom_errors(lambda: print(f"{fancy('‚Æ°')} {cpy(c, cap_stdout=‚¥¥)}"), ns)
        except KeyboardInterrupt:
            if not cc_count:
                print("\x1b[2K\rPress ^C again to exit.")
                cc_count += 1
                continue
            print()
            exit(0)