exec("from math import *")
󰆴 factorial, e, pi, tau, sqrt, cbrt, pow
𝑒,𝑜,𝑑,𝑏,𝑙,𝑡,𝑠,ᔐ,𝑖,𝑓,𝑦 = Exception, object, dict, bool, list, tuple, set, str, int, float, bytes
⮌ py_naming_tools ⨡ py_escape_var as PEV
⮌ functools ⨡ reduce
⮌ itertools ⨡ chain, filterfalse, product, accumulate, zip_longest
⮌ random ⨡ shuffle, choice, uniform, randint
⮌ types ⨡ UnionType
⮌ util ⨡ moon_dir ; cpy_dir = moon_dir
⮌ sys ⨡ stdout, stderr

LITERAL_OPS_ = {
      ␛*:󰲣x⋅y,  ␛/:󰲣x/y,  ␛<:󰲣x <y,  ␛>:󰲣x >y,
      ␛|:󰲣x|y,  ␛&:󰲣x&y,  ␛^:󰲣x ^y,  ␛%:󰲣x %y,
      ␛∧:󰲣x∧y,  ␛∨:󰲣x∨y,  ␛@:󰲣x @y,  ␛~:󰲡  ~x,
    ␛/␛/:󰲣x⹏y,␛*␛*:󰲣x⌃y,␛<␛<:󰲣x<<y,␛>␛>:󰲣x>>y,
    ␛=␛=:󰲣x≡y,␛!␛=:󰲣x≠y,␛<␛=:󰲣x ≤y,␛>␛=:󰲣x ≥y,
   "and":󰲣x∧y, "or":󰲣x∨y, "not":󰲡¬x,
    "is":󰲣x≅y, "is not":󰲣x≇y,
    "in":󰲣x∈y, "not in":󰲣x∉y }

⊢ RET_L(x,y): ↪ x
⊢ RET_R(x,y): ↪ y
SETATTR = 󰲧w≡0⭜    setattr  (x,y,z)∨z⭝    setattr  (y,z,x)∨x
SETITEM = 󰲧w≡0⭜x.__setitem__(y  ,z)∨z⭝y.__setitem__(z  ,x)∨x
GETATTR = 󰲣    getattr  (x,y)
GETITEM = 󰲣x.__getitem__(  y)
þSTACK = []
þPSH, þPOP = 󰲡þSTACK.append(x)∨x, 󰲡þSTACK.pop(x)
⊢ þPOPNR(): 󰆴 þSTACK[-1]
IMPORTED_, imports = {}, {}

␀,⬤,󰮈 = NULL≔𝑜(), 𝑜(), 𝑜()
✓,✗,□,ᐦ = True, False, None, ''
𝒞ℳ, 𝒮ℳ = classmethod, staticmethod
½,⅓,¼,⅕,⅙,⅐,⅛,⅑,⅒,⅔,⅖,󷶲,󷶷,¾,⅗,󷶳,⅜,󷷆,⅘,󷶴,󷷂,⅚,󷶵,⅝,󷶹,󷶶,⅞,󷶺,󷷇,󷶻,󷷈,↉,󷷉 = 1÷2,1÷3,1÷4,1÷5,1÷6,1÷7,1÷8,1÷9,1÷10,2÷3,2÷5,2÷7,2÷9,3÷4,3÷5,3÷7,3÷8,3÷10,4÷5,4÷7,4÷9,5÷6,5÷7,5÷8,5÷9,6÷7,7÷8,7÷9,7÷10,8÷9,9÷10,0,1÷100
π, ℇ = 3.14159265358979323, 2.71828182845904523
∞, î, τ,    󷺍, 󷺎, 󷺏 = inf, complex(0, 1), 2π, ½π, ¼π, ⅛π
󷱩, 󷱪, 󷱬, 󷱭, 󷱮, 󷱯, 󷱰, 󷱫 = ¯∞, ¯î, ¯τ, ¯π, ¯󷺍, ¯󷺎, ¯󷺏, ¯ℇ
ↀ = 2³􊿙

𝕣 = 󰲡[y∀y∈x¿y≇␀]
𝑀 = ⥌x,y="utf-8"↦xᐹᔐ ⭜x.encode(y,⠤𝔸,⠶𝕂)⭝ x.decode(y,⠤𝔸,⠶𝕂)
󱀘 ⴳ(𝑖): __new__,__call__,__repr__ = ℂ↦𝑖.__new__(ℂ,1), 𝚲ⴳ, 𝕊↦␛ⴳ
󱀘 ⴴ(𝑖): __new__,__call__,__repr__ = ℂ↦𝑖.__new__(ℂ,0), 𝚲ⴴ, 𝕊↦␛ⴴ
ⴳ, ⴴ = ⴳ(), ⴴ()

󱀘 ℕ: □
ℤ = 𝑖
ℝ = 𝑓|ℤ
ℂ = complex

OP_DUPER_ = ƒ↦󰲡ƒ(x,x,⠤𝔸,⠶𝕂)  ꜠
OP_SWAPA_ = ƒ↦𝚲ƒ(⠤𝔸﹕﹕􍨄 ,⠶𝕂)  ᵜ
OP_LNULL_ = ƒ↦󰲡ƒ(␀,x,⠤𝔸,⠶𝕂)  ⟥
OP_RNULL_ = ƒ↦󰲡ƒ(x,␀,⠤𝔸,⠶𝕂)  ⟤
OP_BSTAR_ = ƒ↦󰲡ƒ(⠤x ,⠤𝔸,⠶𝕂)  ≺
⊢ OP_CORSP_(op, op_m=␀, cor=␀):
    𝙾 = (op_m≅␀ ⭜op⭝ op[op_m])(𝘪=✓)
    ⊢ ƒ(⠤𝔸, ⠶𝕂):
        I = 𝙾(⠤𝔸, ⠶𝕂)
        ¿cor≇␀: ↪ cor󷸻(I ᣆᴵ􀸳􋊪 ⛶)
        ↪ I
    ↪ ƒ

 󰤱
      0,       1,      2,                   3
 niladic, monadic, dyadic, Ambivalent/variadic
 nullary,   unary, binary,        unary+binary
 󷰾/󷱀: not unary_invariant
 has_mod
 0 󷹚  ⴲ􋉊   ≡ ƒ(𝕄)
 1 󷹚 𝕏ⴲ􋉊􌥡  ≡ ƒ(𝕏, 𝚜=𝕄)
      ⴲ􋉊􌥡𝕏 ≡ ƒ(𝕏, 𝚜=𝕄)
 󷰾 󷹚 𝕏ⴲ􋉊􌥡  ≡ ƒ(𝕏, ␀, 𝚜􊽨=𝕄)
      ⴲ􋉊􌥡𝕐 ≡ ƒ(␀, 𝕐, 𝚜􊽨=𝕄)
 2 󷹚 𝕏ⴲ􋉊􌥡𝕐 ≡ ƒ(𝕏, 𝕐, 𝚜􊽨=𝕄)
 𝟐
 3 󷹚 𝕏ⴲ􋉊􌥡𝕐 ≡ ƒ(𝕏, 𝕐, 𝚜􊽨=𝕄)
   󷹚 𝕏ⴲ􋉊􌥡  ≡ ƒ(𝕏, ␀, 𝚜􊽨=𝕄)
   󷹚  ⴲ􋉊􌥡𝕐 ≡ ƒ(𝕐, ␀, 𝚜􊽨=𝕄)
 󷱀 󷹚 𝕏ⴲ􋉊􌥡𝕐 ≡ ƒ(𝕏, 𝕐, 𝚜􊽨=𝕄)
   󷹚 𝕏ⴲ􋉊􌥡  ≡ ƒ(𝕏, ␀, 𝚜􊽨=𝕄)
   󷹚  ⴲ􋉊􌥡𝕐 ≡ ƒ(␀, 𝕐, 𝚜􊽨=𝕄)

  󷺗􋅂     nilary ; requires modifier
 𝒙←􊽨      unary ; suffix only; modifier optional
 𝒙←􋅂      unary ; suffix only
  →􋅂𝒙     unary ; prefix only
 𝒙󷺤􋅂𝒚     unary ; sided
 𝒙󷺤􋅂𝒙     unary ; sideless
 𝒙∧􋅂𝒚    binary ; unary curries to mod
 𝒙∧􊽨𝒚    binary ; unary curries corresponding side
 𝒙⩚􋅂𝒚    binary ; unary curries corresponding side
 𝒙⩚􊽨𝒚    binary ; unary curries to left side
 𝒚⩚􊽨𝒙    binary ; unary curries to right side
 𝒙∨􋅂𝒚  variadic 
 𝒙⩛􋅂𝒚  variadic ; sideless

 𝕏ⴲ􋉊𝕐 󷹚 need 𝕏 𝕐 𝕄
 𝕩ⴲ􋉊𝕪 󷹚 need 𝕩 or 𝕪 and 𝕄
 𝕩ⴲ􋉊􌥡𝕪 󷹚 need 𝕩 or 𝕪 and 𝕄
 binary   curry-mod? x󰛔ᶻy = (󰛔ᶻ)(x,y) = (x󰛔y)(z)
 unary    curry-mod? xᓕʸ  = (ᓕʸ)(x  ) = (xᓕ )(y)
 variadic curry-mod? 

⊢ OPWRAP_(ƒ, ⠤𝔸):
    ¿𝔸:
        ⊢ ⴼ(ꬶ):
            ∀x∈(ƒ,⠤𝔸):
                globals()󰂢󰂗󰂨₍ₓ₎ = OPWRAP_(ꬶ(x))
        ↪ ⴼ
    󱀘 ω:
        __slots__ = ()
        ⊢ __call__(𝕊, x=␀, y=␀, ⠤𝔸, ⠶𝕂):
            ¿x≅␀: x,y = y,x
            ↪ x≅␀ ⭜ƒ(⠤𝔸,⠶𝕂)⭝ y≅␀ ⭜ƒ(x,⠤𝔸,⠶𝕂)⭝ ƒ(x,y,⠤𝔸,⠶𝕂)
        __getitem__ = ⥌𝕊,s↦𝚲𝕊(⠤𝔸, s=s, ⠶𝕂)
    ω􊽺 = 𝒮ℳ(ƒ)
    ↪ ω()

⊢ _map_d(x,y,n=1):
    mapwd = 󰲣[𝕩 ∀z∈x ¿y(z)≕𝕩≇󰮈]
    ⊢ _get_depths(x):
        ¿¬𝗜(x): ↪{0}
        ¿xᐹᔐ: ↪{1}
        ↪ {w+1 ∀z∈x ∀w∈_get_depths(z)}
    ⊢ _map_neg_d(x,y,n):  kinda weird ngl
        ¿xᐹᔐ: ↪ n≡1 ⭜y(x)⭝ n ⭜x⭝ mapwd(x,y)
        ¿0∈d≔_get_depths(x): ↪n ⭜x⭝ y(x)
        x = mapwd(x, 󰲡_map_neg_d(x,y,n))
        ↪ n∈d ⭜y(x)⭝ x
    ⊢ _map_pos_d(x,y,i):
        ¿¬i: ↪y(x)
        ¿xᐹᔐ: ↪mapwd(x,y)
        ↪ 𝗜(x) ⭜mapwd(x, 󰲡_map_pos_d(x,y,i-1))⭝ y(x)
    ↪ n<0 ⭜ _map_neg_d(x,y,󷰾-n) ⭝ _map_pos_d(x,y,n≡∞⭜ↀ⭝n)

󱀘 Ticker:
    __slots__ = ␛i,
    __init__ = ⥌𝕊,i↦𝕊ⁱ≔i→►□
    __call__ = ⥌𝕊↦𝕊ⁱ󷸊-1→►𝕊
    __bool__ = ⥌𝕊↦¬𝕊ⁱ
    __repr__ = ⥌𝕊↦‹Ticker[i=⟦𝕊ⁱ⟧]›
󱀘 TimerState:
    __init__ = ⥌𝕊,𝖲↦𝕊􋊡≔𝖲→►□
    __bool__ = ⥌𝕊↦𝕊􋊡 ˢ
    __call__ = ⥌𝕊↦𝕊 ⭜𝕊􋊡 ʳ⭝ 𝕊􋊡 ʳ.copy
    __repr__ = ⥌𝕊↦‹Timer[⟦"ID"􊶊􌋄􋘲􊫀􊮥₀⟧; ⟦𝕊􋊡 ʸ⫰⟧s; ⟦‹Running Completed›⍭→􊴎􊮎􊶊⟧; ⟦𝕊􋊡 ⁿ⟧ Remaining loops]=⟦𝕊􋊡 ʳ⟧›

󱀘 𝑐𝑑(𝑑):
    ⊢ __init__(𝕊, ƒ, ⠤𝔸, 𝑔=□, ⠶𝕂):
        𝕊􊽺, 𝕊.𝑔 = ƒ, 𝑔
        super().__init__(⠤𝔸,⠶𝕂)
    __call__ = 𝕊↦𝕊􊽺(⠤𝔸,⠶𝕂)
    __repr__ = 𝕊↦"__repr__"∈𝕊 ⭜super().__getitem__("__repr__")(𝕊)⭝ super().__repr__()
    __getitem__ = ⥌𝕊,x↦𝗛(x)∧super().__contains__(x) ⭜super().__getitem__(x)⭝ 𝕊􋇕(x)

⊢ TACITM(λ, m):
    ↪ m≡1 ⭜(⥌x,⠤𝓐,⠶𝓚↦xᴍ󰲡λ(x,⠤𝓐,⠶𝓚))⭝ λ
⊢ TACITB(λ, m1, m2, d=□):
    ⊢ ƒ(l=␀, r=␀, ⠤𝓐, ⠶𝓚):
        ¿l≇␀∧r≇␀: □
        ⸘l≅␀∧r≅␀: ↪ ƒ
        ⸘d≡␛r   : ↪ ƒ(⬤,l¿r≅␀¡r,⠤𝓐,⠶𝓚)
        ¡       : ↪ ƒ(l¿r≅␀¡r,⬤,⠤𝓐,⠶𝓚)

        ¿m1≡1≡m2: ↪ l󱑼r ᴍ 󰲡λ(⠤x ,⠤𝓐,⠶𝓚)
        ⸘m1≡1   : ↪ l   ᴍ 󰲡λ(x,r,⠤𝓐,⠶𝓚)
        ⸘   1≡m2: ↪   r ᴍ 󰲡λ(l,x,⠤𝓐,⠶𝓚)
        ¡       : ↪        λ(l,r,⠤𝓐,⠶𝓚)
    ↪ ƒ
TAC_ = ⥌x,d=□↦x₁≡󷰾∨x₂≡󷰾 ⭜TACITM(x₀,x₁₊􊭨ₓ􊬤􊮢􍨄)⭝ TACITB(⠤x,d=d)
␀TACIT´   = 𝑐𝑑(𝚲✗⨳, 𝑔= TAC_)
␀TACITL´  = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TAC_(x,␛l))
␀TACITR´  = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TAC_(x,␛r))
␀TACITLR´ = 𝑐𝑑(𝚲✗⨳, 𝑔=󰲡TACITB(⠤x))

⊢ ⓦ(⠤𝔸, 𝐀=□):
    ⠤𝔸, ƒ = 𝔸
    ¿¬𝐀: 𝐀=⍁
    ¿¬𝔸: ↪ƒ(⠤𝐀)
    𝕒, ⠤𝔸 = 𝔸
    with 𝕒 as 𝐚:
        𝐀.append(𝐚)
        ↪ ⓦ(⠤𝔸, ƒ, 𝐀=𝐀)

 dbg_wrap = 𝑓↦𝚲☾´(‹⟦𝑓.__name__⟧: 𝔸=⟦𝔸⟧, 𝕂=⟦𝕂⟧ ↓›) ► 𝑓(⠤𝔸,⠶𝕂)☾