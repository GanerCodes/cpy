󷰜 ⨳ 𝚡∨𝚡 ᴍ## Assertion
    "𝑜 ⨳" ⟶ Asserts 𝑜 is truthy
    "𝑜₁ ⨳ 𝑜₂" ⟶ Asserts 𝑜₁ is truthy, puts 𝑜₂ in error
󷰝 ∨󷺥  𝚡∧𝚡 ᴍvs ⟦𝕊/⟧ {OR,NOR} (short circuits)
    `✓∨✓ →≡ ✓ ≡← ✗󷺥✗`
    `✗󷺥✓ →≡ ✗ ≡← 0∨✗`
    `1∨2 →≡ 1 ≡← 1∨0`
    `0󷺥0 →≡ ✓`
󷰝 ⩔󷺫  𝚡∧𝚡 ᴍVVS⟦𝕊/⟧ {OR,NOR} (doesn't short circuit)
    󰤱 docs
󷰝 󷺤󷺦  𝚡∧𝚡 ᴍvsx⟦𝕊/⟧ {XOR,NXOR}
    `✓󷺤✗ →≡ ✓ ≡← ✗󷺤✓`
    `✗󷺤✗ →≡ ✗ ≡← ✓󷺤✓`
    `✓󷺦✓ →≡ ✓ ≡← ✗󷺦✗` 󷹇 󷺦 is boolean equals under truthy
    `2󷺤✗ →≡ 2 ≡← 1󷺦2`
    `0󷺦2 →≡ 0`
    `0󷺦0 →≡ ✓`
󷰞 ∧󷺒  𝚡∧𝚡 ᴍvw ⟦𝕊/⟧ {AND,NAND} (short circuits)
    `✓∧✓ →≡ ✓`
    `✓󷺒✗ →≡ ✓`
    `1∧2 →≡ 2`
    `1∧0 →≡ 0`
󷰞 ⩓󷺬  𝚡∧𝚡 ᴍVVW⟦𝕊/⟧ {AND,NAND} (doesn't short circuit)
    󰤱 docs
󷰟 ≡≠  𝚡∧𝚡 ᴍ=⟦⁅=𝕊⁆/⟧ {,un}equal
    Works similar to python, taking certain conveniences.
    `2≡2`
    `2≠3`
    `2.0≡2`
    `"hi" ≡ "ih"ᴙ`
󷰟  󷷼󰁖 𝚡∧𝚢 ᴍdia= diamond equals
    󷹇 Requested by Michael for future advanced math things
󷰟 ∣∤󰁖 𝚡∧𝚢 ᴍ|⟦𝕊/⟧  does{,'t} divide
    `4∣8 →≡ ✓`
    `4∣8∣16 →≡ ✓`
    `4∤8∣16 →≡ ✗`
    `7∤4∤7∣14 →≡ ✓`
󷰟 <>󰁖 𝚡∧𝚢   ⟦<>⟧  {less,greater} than
    `7>6>5`
    `5>4<9`
    `¬(5>4<3)`
󷰟 ≤≥󰁖 𝚡∧𝚢 ᴍ ⟦<>⟧_ {less,greater} than or equal to
    `5≥5≥5`
    `5≤5≤5`
󷰟 ∈∋󰁖 𝚡∧𝚢 ᴍe⟦[]⟧𝕊 element of {right,left}
    𝑜∈𝗜
    `5∈{1} →≡ ✗`
    `2∈{1,2,3} →≡ ✓`
    `␛a ∈ ‹hia› →≡ ✓`
    `5 ∈ [2,3,2] →≡ ✗`
󷰟 ∉∌󰁖 𝚡∧𝚢 ᴍe⟦[]⟧/ not element of {right,left}
󷰟 ⊂⊃󰁖 𝚡∧𝚢 ᴍu⟦da⟧𝕊 subset of or equal to {right,left}
    𝗜 ⊂ 𝗜
    `[4,2] ⊂ 10⭥ →≡ ✓`
    `[1,2] ⊂ [1,2] →≡ ✓`
    Works on non-set objects as well
󷰟 ⊄⊅󰁖 𝚡∧𝚢 ᴍu⟦da⟧/ not subset of {right,left}
󷰟 ⊊⊋󰁖 𝚡∧𝚢 ᴍu⟦da⟧n subset of but not equal to {right,left}
    `[1] ⊊ [1,2] →≡ ✓`
    `[1,2] ⊊ [1,2] →≡ ✗`
󷰠 ᴍ󰁢 𝚡∧􊽨𝚢 ᴍcm𝕊 map
    𝗜 ᴍ 𝗙
        Maps an iterable with a function
        `[‹hi›, ‹there›] ᴍ 🃌 ≡ [2, 5]`
    ᴍ􋀐,ᴍ􋔛
        n≥0: Controls degree of the map, i.e.
            `[[␛a, ‹bc›],[‹def›, ‹bob›]] ᴍ² 🃌 ≡ [[1,2],[3,3]]`
        n=∞: Unbounded degree
        n<0: Kinda weird, but generally backwards from ∞
            `["hi", [[["egg"]]]] ᴍ􍧱 🃌 ≡ [2, [[[3]]]]`
            󷹇 󷰾 would map the characters in those strings
    ᴍᴷ,ᴍⱽ,ᴍᴰ
        Similar to above, but a dict:dict mapping
        K: keys  , Modify keys only
        V: values, Modify values only
        D: dict  , Both keys and values
        󷹇 the function still expects one value which will be the [key, value] list
        󷹇 use ꟿ for a function with two args
    󷹇 Supports 󰮈
󷰠 ꟿ󰁢 𝚡∧􊽨𝚢 ᴍcsm starmap
    𝗜 ꟿ 𝗙
    Map but instead of calling the function directly it unpacks the arg
    `[[1,2],[3,4]] ꟿ + ≡ [3,7]`
    󷹇 Supports 󰮈
󷰠  𝚡∨􊽨𝚡 ᴍcmt threadmap
    𝗜  𝗙
    Same as ᴍ but uses multiple threads.
    The number of threads defaults to the number of CPU threads.
    󰤱 make this have proper multithreading
󷰠 󰁢 𝚡∨􊽨𝚡 ᴍcg𝕊 group-by
    𝗜 
        group into dictionary with keys by truthyness
        `[1,5,3,2]  󷺹%3ᐸ ≡ {0:[3],1:[1],2:[5,2]}`
    𝗜  𝗙
        group into dictionary with keys defined by right arg
    󰀒: return list of values, dropping keys
    ᴮ: like 󰀒, except groups are only false/true (& are included), so
        `[1,0,5] ᴮ ≡ [[0],[1,5]]`
        `[1,0,5] ᴮ 󷺹>1ᐸ ≡ [[1,0],[5]]`
        `[1,0,5] ᴮ 󷺹<0ᐸ ≡ [[1,0,5],[]]`
    󷹇 Supports 󰮈
    󰤱 make it work with ᔨ
󷰠 ſ 𝚡∨􊽨𝚡 ᴍfs fold
    𝗜 ſ 𝗙
    The left-to-right classic fold.
        `[1,2,3,4] ſ + ≡ 10`
    ſ􋉑: 𝕏 is the starting value/default
        `[1,2,3,4] ſ⁵ + ≡ 15`
        `[] ſ⁵ + ≡ 5`
󷰠 Ϝ 𝚡∨􊽨𝚡 ᴍFS accumulate
    𝗜 Ϝ 𝗙
    fold, except returns the intermediate values
    `[1,2,3,4] Ϝ + ≡ [1,3,6,10]`
󷰠 ⨁⨀ 𝚡∨􊽨𝚡 ᴍo⟦+.⟧ {sum,product}
    𝗜 ⨁/⨀
    fold over left with + or ⋅, with modifier as starting value
󷰠 󰈲󰈳 𝚡∨􊽨𝚡 ᴍcf⟦+-⟧ filter {positive,negative}
    𝗜 󰈲
        filter left for truthyness
        `[0,1,✗,✓] 󰈲 ≡ [1,✓]`
    𝗜 󰈲 𝗙
        filter left for truthyness under right
        `[0,1,2,3] 󰈲 󷺹>1ᐸ ≡ [2,3]`
    𝗜 󰈲􋊧 𝗙
        conditional map, apply mod to elm if right true
        `[0,1,2,3] 󰈲􍈽 󷺹>1ᐸ ≡ [0,1,󷰿,󷱀]`
        󷹇 if modifier is not a 𝗙 it becomes a replcaement value
    𝗜 󰈲􋊧􌥡 𝑜
        same as previous but right func is equality check on 𝑜
    󷹇 Supports ᔨ and 󰮈
󷰠 󰒼󰒽 𝚡∨􊽨𝚡 ᴍcs⟦+-⟧ sort {ascending,decending}
    𝗜 󰒼
        sorts data
    𝗜 󰒼 𝗙
        sorts data by right arg
        󷹇 right arg is function of 1 variable
    󰤱 examples
    󷹇 Supports ᔨ and 󰮈
󷰠 ᗢᙧᙎᙡ 𝚡󷸐􊽨𝚡 ᴍcw⟦ᐦp⟧⟦ᐦt⟧𝕊 window sides {✗ ; ✗,✗ ; ✓,✓ ; ✗,✓ ; ✓} middle
    ᗢ: no sides, no middle
    ᙧ: no sides, include middle
    ᙎ: include sides, no middle
    ᙡ: include sides, include middle
    󰤱 docs
󷰠 ᖘ 𝚡∧􋅂𝚡 ᴍcan "candycane", apply to select
    𝗜≕𝕏 ᖘ􊽺 ꬶ
    calls ƒ(𝕏) to get list of indicies
    ꬶ(ƒ(𝕏)) manipulates the index list
    ᖘ will then place ꬶ(ƒ(𝕏)) into the idxs found via ƒ(𝕏)
    󰤱˜ docs
󷰠 󱖔 𝚡∨􊽨𝚡 ᴍcF𝕊 modifier as operator
    Binary/(indistinguishable)unary
    Calls modifier with one or two vars depending on how the operator is used. Good for treating a function as an operator
    𝑜􊽨 󱖔􋊧 𝑜􊽨
    `2 󱖔􍯏􊽮⁺􍯋 3 ≡ 7`
    `2 󱖔􍯏􊽮 ≡ 4`
    `󱖔􍯏􊽮 2 ≡ 4`
󷰡 ፓ󷷴 𝚡.􊽨 ᴍdd⟦+-⟧ {,}󰤱
󷰡 󷷳 𝚡.􊽨 ᴍdx𝕊 󰤱
󷰡 ∫ 𝚡.􊽨 ᴍint 󰤱
󷰡 ∘ 𝚡∧􊽨𝚡 ᴍO𝕊  call left with right
    "ƒ∘x" ⟶ ƒ(x)
    "ƒ∘³x" ⟶ ƒ(x,x,x)
    󰤱˜ docs
󷰡 ○⍜ 𝚡∧􊽨𝚡 ᴍO⟦⁅O𝕊⁆_⟧ compose functions with balanced args, overflow {right,left}
    ƒ○ ꬶ ≈ 󰲡ƒ(ꬶ(x))
    ƒ○²ꬶ ≈ 󰲣ƒ(ꬶ(x), ꬶ(y))
    `(󰌷○ᴙ)([3⭥,2⭥]) ≡ [0,1,0,1,2]`
    `(ᴙ○󰌷)([3⭥,2⭥]) ≡ [1,0,2,1,0]`
    󰤱ꜝ docs
󷰡 󰬩󰬫 𝚡∧􊽨𝚡 ᴍO⟦<>⟧ compose functions, overflow extra args to {left,right}
    󰤱 docs
󷰡 󱖚󱖘 𝚡∧􊽨𝚡 ᴍO⟦AD⟧ compose functions, overflow extra args to {left,right}
    󰤱 docs
󷰡 ⊚ 𝚡∨􊽨𝚡 ᴍcoo𝕊 loop
    󰤱 docs
󷰡 ⊜ 𝚡∨􊽨𝚡 ᴍcoeq loop until fixed point
    󰤱 docs
󷰡 ⍟⊛ 𝚡∨􊽨𝚡 ᴍco⟦x*⟧ loop, keep {sucessfull,all} iterations
    󰤱 docs
    ⊛ is the same as ⍟ but includes the final failing iteration
󷰡 🟕🟖 𝚡∨􊽨𝚡 ᴍcoc⟦cᐦ⟧𝕊 find cycle with{,out} prefix
    🟖 is the same as 🟕 but doesn't trim out the part before the cycle
    󰤱 docs
󷰡 󰔶 𝚡∨􊽨𝚡 ᴍc1⟦𝕊=-⟧ error handler{,,}
    𝑒 : raises 𝑒
    On left's error 𝑒:
        󰔶: return ƒ's arg / retries with right
        : returns right
        : return exception / calls right with 𝑒
    󰤱 docs
󷰡  𝚡∧􊽨𝚢 ᴍST𝕊 curry function
    "(ƒ(1,⬤,3,y=⬤,z=2))(3,9)" ⟶ ƒ(1,3,3,y=9,z=2)
    󰤱˜ docs
󷰡 ᣆ 𝚡∨􊽨𝚢 ᴍcig conditional function application
    `1ᣆ􋄒󷹒 ≡ 󷰾 ≡ 1ᣆ􍯏󰂁⁰󷹒`
    `1ᣆ􋄓󷹒 ≡ 1 ≡ 1ᣆ􍯏󰂁¹󷹒`
    󰤱 docs
󷰡 󷷹 𝚡∨􊽨𝚢 ᴍdiaO diamond compose
    󷹇 Requested by Michael for future advanced math things
󷰢 ᐹᐴ󰁖 𝚡∨􊽨𝚡 ᴍcis⟦𝕊s⟧ instance of {right,left}
    ᐹ 𝑜
        Get type of 𝑜
        `ᐹ 4 ≡ 𝑖`
    𝑜 ᐹ 𝑜
        Check if left is instance of right
        󷹇 if right is not a type, we get the type of it first
        󷹇 𝗙 𝗜 𝗛 acts like types
        `2 ᐹ 𝑖 ≡ ✓`
        `2 ᐹ 5 ≡ ✓`
        `2 ᐹ ᔐ ≡ ✗`
        `‹h› ᐹ 𝗜 ≡ ✓`
󷰢 󷹵󷹴󰁖 𝚡∧􊽨𝚡 ᴍcisn⟦𝕊s⟧ not instance of {right,left}
󷰢 󱑼󷹅  𝚡∨􊽨𝚡 ᴍcc⟦zZ⟧ zip {left,right} aligned
    𝗜 󱑼 𝗜
        zips elements at cooresponding indicies
        `[1,2] 󱑼 [1,2,3] ≡ [[1,1],[2,2]]`
    𝗜 󱑼
        arg is iterables of iterables that will be zipped
        `[[1,2,3],[5,2],[0,󷰾]] 󱑼 ≡ [[1,5,0],[2,2,󷰾]]`
    󱑼􋇜 fill with default value
        `[1,2] 󷹅⁹ [1,2,3] ≡ [[9,1],[1,2],[2,3]]`
    
    󷹅: same as 󱑼 but elements are aligned towards the right
        `[1,2] 󷹅 [1,2,3] ≡ [[1,2],[2,3]]`
󷰢 ᓕ 𝚡󷺤􋅂𝚡 ᴍcat𝕊 at indicies
    `[5,‹joe›,‹zek›]ᓕ²󰁱¹ ≡ "e"`
    `[1,2,[5,2,2,9]] ᓕ²󰁱³ ≡ 9`
    `[1,2,3,4]≕j↨ᓕ􊽧󰁱¹ ≡ j`
    `[‹hi›,‹there›,‹bob›]ᓕ¹􊽧󰁱􊽧􍧱 ≡ [‹the›,‹b›]`
    󰤱˜ docs
󷰢 ᕋ󰁌 𝚡󷸐􋅂𝚡 ᴍcrp modify section
    `[1,2,3] ᕋ¹ 9 ≡ [1,9,3]`
    `[1,2,3] ᕋ¹ ≡ [1,3]`
    `[1,2,3] ᕋ¹􊽧 ≡ [1]`
    `[1,2,3] ᕋ􊽧¹ [5,2,7] ≡ [5,2,7,2,3]`
    󰤱˜ docs
󷰣 | 𝚡∧𝚢 | bitwise or
󷰤 ^ 𝚡∧𝚢 ^ bitwise xor
󷰥 & 𝚡∧𝚢 & bitwise and
󷰦 ⪡⪢ 𝚡∨􊽨𝚡 ᴍ⟦⁅<<⁆⁅>>⁆⟧X bitshift number or rotate array {left,right}
    𝑖 ⪡ 𝑖
        bitshift left by right
    𝗜 ⪡ 𝑖
        rotate array list left
        `[5,6,7] ⪡ 2 ≡ [7,5,6]`
    󷹇 unary case has right arg equal to 1
        `1 ⪡ ≡ 2`
        `␛a␛b ⪡ ≡ ␛b␛a`
󷰧 ∓± 𝚡󷸏𝚢 ᴍ⟦⁅-+⁆⁅+-⁆⟧ {plus/minus,minus/plus}
    𝑜∓𝑜􊽨
    `∓5 ≡ [¯5,5]`
    `1∓5 ≡ [¯4,6]`
    𝑜±𝑜􊽨
    `±5 ≡ [5,¯5]`
    `1±5 ≡ [6,¯4]`
󷰧 + 𝚡󷸏􊽨𝚢 + add
󷰧 - 𝚡󷸏􊽨𝚢 - subtract
󷰧 󷷶 𝚡∨􊽨𝚢 ᴍdia+ diamond add
    󷹇 Requested by Michael for future advanced math things
󷰧 󷷻 𝚡∨􊽨𝚢 ᴍdia- diamond subtract
    󷹇 Requested by Michael for future advanced math things
󷰨 ◄► 𝚡∧𝚢 ᴍca⟦lr⟧ {left,right} value
    `1►5 ≡ 5 ≡ 5◄1`
󷰨 ⋄ 𝚡∧𝚢 ᴍ<>𝕊 join into list
    `1⋄2 ≡ [1,2]`
    `1⋄2⋄9 ≡ [1,2,9]`
    󰤱 make this less janky
󷰪 ∪ 𝚡∧𝚡 ᴍuw𝕊 union
    𝑠 ∪ 𝗜 = x|𝑠(right)
    𝑙 ∪ 𝗜 = [⠤x,right∖x]
    󰤱˜ docs
󷰫 ∩ 𝚡∧𝚡 ᴍus𝕊 intesection
    𝑠 ∩ 𝗜 = x∩𝑠(right)
    𝗜 ∩ 𝗜 = left󰈲󷺹∈right
    󰤱˜ docs
󷰬 ⨉ 𝚡∨􊽨𝚡 ᴍXX cross product
    `‹ab›⨉‹de› ≡ [‹ab›,‹de›]⨉ ≡ [['a', 'd'], ['a', 'e'], ['b', 'd'], ['b', 'e']]`
    `‹ab›⨉² ≡ [['a', 'a'], ['a', 'b'], ['b', 'a'], ['b', 'b']]`
    󰤱˜ docs
󷰬 ⊞ 𝚡∨􊽨𝚡 ᴍ#[] table product
    `‹ab›⊞‹de› ≡ [[['a', 'd'], ['a', 'e']], [['b', 'd'], ['b', 'e']]]`
    `‹ab›⊞² ≡ [[['a', 'a'], ['a', 'b']], [['b', 'a'], ['b', 'b']]]`
    󰤱˜ docs
󷰬 ∖ 𝚡∧𝚢 ᴍc\ set minus
    𝑠 ∖ 𝗜 = x-𝑠(right)
    𝗜 ∖ 𝗜 = left󰈳󷺹∈right
    󰤱˜ docs
󷰭 ⨝⟕⟖⟗ 𝚡∨􊽨𝚡 ᴍCJ⟦𝕊AD⁅J𝕊⁆⟧ join{ left, right, left and right,}
    turns into string if right arg is string
    `[1,2,3] ⨝ 𝘀 ≡ "1 2 3"`
    `[1,2,3] ⨝ 0 ≡ [1,0,2,0,3]`
    `[1,2,3] ⨝ ⋅´ ≡ [1,2,2,6,3]`
    󰤱 docs
󷰭 ⛶ 𝚡󷺤􊽨𝚡 ᴍcE𝕊 enlist arguments
    `2⛶ ≡ [2]`
    `2⛶⁵ ≡ [2,2,2,2,2]`
    󷹇 if negative then we enlist it multiple times
    `2⛶􍨅 ≡ [[2]]`
    `␛x⛶􍧟 ≡ [[[[␛x]]]]`
󷰭 󰔛󱫩 𝚡∨􊽨𝚡 ᴍctm⟦𝕊s⟧ sleep or call,loop function after delay{,in thread}
    󰤱 docs
󷰭 ≅≇󰁖 𝚡∧𝚡 ᴍeqi⟦𝕊/⟧ is{,n't} same object as
    Works same as in python
󷰭 @ 𝚡󷸐􊽨𝚡 @ custom operator
    󰤱 docs
󷰭 ⋅ 𝚡∧􊽨𝚢 ᴍo𝕊 multiply
󷰭 ÷ 𝚡∧􊽨𝚢 ᴍ./𝕊 divide
󷰭 ⹏ 𝚡∧􊽨𝚢 ᴍcid integer divide
󷰭 % 𝚡∧􊽨𝚢 % modulo
󷰭 󷷷 𝚡∧􊽨𝚢 ᴍdia* diamond multiply
    󷹇 Requested by Michael for future advanced math things
󷰭 󷷸 𝚡∧􊽨𝚢 ᴍdia/ diamond divide
    󷹇 Requested by Michael for future advanced math things
󷰭 ⋀ 𝚡󷺤􊽨𝚡 ᴍVW all
    𝗜 ⋀
    returns first falsy value or last value
    󷹇 ⋀􋇜 sets default for empty iterable (✓ if excluded)
    󰤱 examples
󷰭 ⋁ 𝚡󷺤􊽨𝚡 ᴍVS any
    𝗜 ⋁
    returns first truthy value or last value
    󷹇 ⋁􋇜 sets default for empty iterable (✗ if excluded)
    󰤱 examples
󷰭 ⫰⫯ 𝚡󷺤􊽨𝚡 ᴍa⟦+-⟧ absolute value {positive / upper,negative / lower}case
    `󷱂⫰ ≡ 5⫰ ≡ 5`
    `󷱂⫯ ≡ 5⫯ ≡ ¯5`
    `"ABc"⫰ ≡ "ABC"`
    `"ABc"⫯ ≡ "abc"`
    `"𝔸𝘛𝚖"⫯ ≡ "𝕒𝘵𝚖"`
    󷹇 modᐹ𝗙 ⇒ acts like under, i.e.
        `"xYzAWw"󷹒􊾢 ≡ "wWaZYx"`
        [if under gets consistant support this may be changed]
    󷹇 supports ᔨ
󷰭 󷹒 𝚡󷺤􊽨𝚡 ᴍa= negate / swap case
    `󷱂󷹒 ≡ 5`
    `5󷹒 ≡ 󷱂`
    `"aBc"󷹒 ≡ "AbC"`
    󷹇 mod∈{󷰾,0,1} ⇒ choose between ⫯󷹒⫰
    󷹇 modᐹ𝗙 under like in ⫰/⫯
    `‹abCDe›⫯ᔨ ≡ [0,1,4]`
    `‹abCDe›⫰ᔨ ≡ [2,3]`
    󷹇 supports ᔨ
󷰭 ! .𝚡 ! factorial
    Suffix unary
    `5! ≡ 120`
    `0! ≡ 1`
    󰤱 generalize to gamma function
󷰭 ☾ 𝚡󷺤􊽨𝚡 ᴍcp𝕊 print
    "‹hello›☾" ⟶ prints "hello" to stdout
    󰤱 docs
󷰭 󷸹󷸸󷸻󷸺 𝚡∨􊽨𝚡 ᴍcr⟦[-=]⟧ range excluding {right,both,none,left}
󷰭 ⍭ 𝚡󷺤􊽨𝚡 ᴍcsp magic string split
    ᔐ ⍭ or ᔐ ⍭
    if " " is in arg:
        split by " " then by " "
        `‹a b c›⍭ ≡ [[␛a],[␛b,␛c]]`
        `‹x y›⍭ ≡ [[␛x],[␛y]]`
    otherwise:
        split by just " "
        `‹x y›⍭ ≡ [␛x,␛y]`
        `‹ y›⍭  ≡ [ᐦ,␛y]`
        `‹y›⍭   ≡ [␛y]`
    󷹇 this makes use of two alternative space characters unless spcial highlighting is applied this is confusing
󷰭 ⍉ 𝚡󷺤􊽨𝚡 ᴍct𝕊 transpose
    Exactly the same as unary version of 󱑼
󷰭 󰑅 𝚡∧􊽨𝚢 ᴍcfs first
    󷹇 Supports ᔨ
    `"abc"󰑅ᔨ␛b ≡ 1`
    `"abc"󰑅ᔨ󷺹≡␛bᐸ ≡ 1`
    `[1,2,3,4]󰑅󷺹>2ᐸ ≡ 3`
    `[1,2,3,4]󰑅ᔨ󷺹>2ᐸ ≡ 2` 󷹇 index
    󰤱 docs
󷰭 󷹓󷹕󷹖󷹔 𝚡∧􊽨𝚢 ᴍcf⟦ad⟧⟦𝕊/⟧ {left of and in,right of and in,left of and ex,right of and ex}luding start
    `"abcdcba"󷹓󷺹≡␛cᐸ ≡ "abc"`
    `"abcdcba"󷹕󷺹≡␛cᐸ ≡ "ab"`
    `"abcdcba"󷹖󷺹≡␛cᐸ ≡ "dcba"`
    `"abcdcba"󷹔󷺹≡␛cᐸ ≡ "cdcba"`
    󰤱˜ docs
󷰭 ⬓▢⬒ 𝚡󷺤􊽨𝚡 ᴍcr⟦aod⟧ round{ low,, high}
    `2 ≡ 2.2▢ ≡ 2.2⬓ ≡ 2.9⬓`
    `3 ≡ 2.9▢ ≡ 2.2⬒ ≡ 2.9⬒`
    `2.91▢¹ ≡ 2.9`
    `133▢􍧱 ≡ 100`
󷰭 󰸵󰸷 𝚡∧􊽨𝚢 ᴍcp⟦ad⟧ pad {left,right}
    𝗜 󰸵ᵖᵃᵈ n
    `[1,2]󰸵3  ≡ [✗,1,2]`
    `[1,2]󰸵⁹3 ≡  [9,1,2]`
    󰤱˜ docs
󷰭 🃌 𝚡󷺤𝚡 ᴍca𝕊 cardinality (length)
    𝔦 🃌
    Returns length of 𝔦
    `‹egg›🃌 ≡ 3`
    `[1,2]🃌 ≡ 2`
󷰭 ⤈⤉ 𝚡∨􊽨𝚡 ᴍca⟦sw⟧ {min,max}
    𝗜 ⤈/⤉ 𝗙?󰻾
    min/max under right
    `[1,5,2]⤉ ≡ 5 ≡ ⤈[9,6,5]`
    `[󷱂,4]⤉󷺹²ᐸ ≡ 󷱂`
    `[]⤉² ≡ 2 ≡ [2]⤉⁹`
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
󷰭 󷹄 𝚡⩚􋅂𝚢 ᴍcac constrain
    "low 󷹄ˣ high" or (low 󷹄 high)(x) or (x󷹄)(low, high)
    Limits x to between low and high (inclusive)
    `0 󷹄³ 1 ≡ 1`
    `0 󷹄􍧟 1 ≡ 0`
    `0 󷹄􊽲 1 ≡ ½`
󷰭 ⭥ 𝚡󷺤􊽨𝚡 ᴍaws iterable/number to indices
    Both-sides-indistinguishable unary 
    `‹hello›⭥ ≡ [0,1,2,3,4]`
    `5⭥ ≡ [0,1,2,3,4]`
    `[‹ab›, ‹cde›]⭥² ≡ [(0,0),(0,1),(1,0),(1,1),(1,2)]`
    `2⭥³ ≡ [(0,0,0),(0,0,1),(0,1,0),(0,1,1),(1,0,0),(1,0,1),(1,1,0),(1,1,1)]`
    󷹇 Negative modifier keeps original structure
    `[‹ab›, ‹cde›]⭥􍧱 ≡ [[(0,0),(0,1)], [(1,0),(1,1),(1,2)]]`
    󰤱˜ docs
󷰭 ↨ 𝚡󷺤􊽨𝚡 ᴍce𝕊 enumerate (zip with index)
    Both-sides-indistinguishable unary
    𝕏↨ is identical to (𝕏⭥)󱑼𝕏
    ↨ⁿ􋁉􋀐 works just like ⭥ except the indicies are tupled with the values
    `[‹ab›,‹cd›]↨² ≡ [((0,0),'a'),((0,1),'b'),((1,0),'c'),((1,1),'d')]`
    `[‹ab›,‹cd›]↨􍧱 ≡ [[((0,0),'a'),((0,1),'b')],[((1,0),'c'),((1,1),'d')]]`
    󰤱˜ docs
󷰭 ⴵ 𝚡󷺤𝚡 ᴍcsn sign of number / case
    `󷰿ⴵ   ≡ 󷰾`
    `0ⴵ   ≡ 0`
    `9.2ⴵ ≡ 1`
    `␛aⴵ  ≡ 󷰾`
    `␛Aⴵ ≡ ␛𝔸ⴵ ≡ ␛􋉀ⴵ ≡ 1`
󷰭 󷹎󷹍󷹌 𝚡∨􊽨𝚡 ᴍcs⟦01s⟧ split keeping {0,1,∞} consecutive seperators
    󰤱 docs
󷰭 𝌂 𝚡∨􊽨𝚡 ᴍccp partition
    Group consecutive by func
        `[1,󷰾,2,2,9,9]𝌂󰻾   ≡ [[1],[-1],[2,2],[9,9]]`
        `[1,󷰾,2,2,9,9]𝌂󷺹²ᐸ ≡ [[1,-1],[2,2],[9,9]]`
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
󷰭 ᚤ 𝚡∨􊽨𝚡 ᴍcu𝕊 first unique
    Keep only first found under right arg (default 󰻾)
    `[1,2,3,2,3,1,1,2,9]ᚤ ≡ [1,2,3,9]`
    `[2,5,0,󷰿,0,󷱂,󷰾,1,7]ᚤ󷺹²ᐸ ≡ [2,5,0,-1,7]`
    `[1,2,3,2,3,1,1,2,9]ᚤ󷺹>2ᐸ ≡ [1,3]`
    `[1,2,3,2,3,1,1,2,9]ᚤᔨ󷺹>2ᐸ ≡ [0,2]` 󷹇 these are indicies
    `[1,2,3,2,3,1,1,2,9]ᚤ󷺹<3⭜󰮈⭝⟞ᐸ ≡ [3,9]`
    󷹇 Supports ᔨ and 󰮈
    󰤱˜ docs
󷰭 ᴙ 𝚡󷺤􊽨𝚡 ᴍcR𝕊 reverse
    𝗜 ᴙ = x﹕﹕􍨄
    󷹇 ᴙᴸ forces string as list
    `"hello"ᴙ ≡ "olleh"`
    `3⭥ᴙ ≡ [2,1,0]`
    󰤱˜ docs
󷰭 ⬄ 𝚡∨􊽨𝚡 ᴍcst strip
    󰤱 Workings undetermined, may be removed
󷰭 󰌷 𝚡∨􊽨𝚡 ᴍcch chain iterables
    󰤱 docs
    󷹇 if left and right are both integers, we do integer concatination
       `5 󰌷 23 ≡ 523`
       `5 󰌷 󷱁 ≡ ¯54`
       `󷱁 󰌷 5 ≡ ¯45`
       `󷱀 󰌷 󷱁 ≡ 34`
󷰭 󰛔 𝚡∨􊽨𝚡 ᴍcma string replacement
    "find 󰛔ᵗᵃʳᵍᵉᵗ replace" or "(find 󰛔 replace)(target)"
    󰤱 docs
󷰭 󷹝 𝚡󷺤􊽨𝚡 ᴍCS str⟷int involution
    Gets ascii/unicode value(s) of string and vise versa
    󰤱 docs
󷰭 󷹜 𝚡∨􊽨𝚡 ᴍCI str to int / change base
    󰤱 docs
󷰭 󷹗 𝚡󷺤􊽨𝚡 ᴍasw ugex push
    𝑜 󷹗: Pushes 𝑜 onto ugex stack
    𝑜 󷹗ⁿ: Pushes n copies of 𝑜 onto ugex stack
    𝗜 󷹗􋔛: Extends ugex stack by 𝗜
󷰭 󷸚󷸛󷸙󷸘 𝚡󷺤 𝚡 ᴍcc⟦|-/\⟧ {ℝ,î,ĵ,󷺈} part of number
    `(󷸚,󷸛,󷸙,󷸘)ᐵ∘ᑅℍ(1,1,1,1)→ᚤ ≡ [1]`
󷰭 󷸜󷸗󷸖󷸕 𝚡󷺤 𝚡 ᴍcc⟦+<>*⟧ tuple of {ℝ/î,ℝ/ĵ,ℝ/󷺈,ℝ/î/ĵ/󷺈} parts of number
    `(󷸜,󷸗,󷸖,󷸕)ᐵ∘ᑅℍ(1,1,1,1)→ᚤ ≡ [(1,1),(1,1,1,1)]`
󷰭 ~ .𝚡 ~ bitwise not
    `~6 ≡ ¯7 ≡ 󷱄`
󷰭 √ .􊽨𝚡 ᴍsq root
    Prefix unary
    `√5  ≡ 5􊽲`
    `√³5 ≡ 5􋀞`
    `√󰁛5 ≡ 5󰁛􍩯`
󷰭 ؆ .􊽨𝚡 ᴍSQ roots
    Prefix unary
    "؆25" ⟶ [󷱂, 5]  beware IEEE 754
    "√³1" ⟶ 3ʳᵈ roots of unity
󷰭 󱅏󰁘 𝚡∨􊽨𝚢 ᴍcr⟦fi⟧ random {int,float}
    low /󱅏ⁿ high
󷰭  𝚡∨􊽨𝚢 ᴍcrs shuffle
    󰤱 docs
󷰮 ¬ 𝚡󷺤𝚡 ᴍn𝕊 not
    Opposite of bool value of
󷰮 ¯ .𝚡 ᴍ_𝕊 negate
    `¯5 ≡ 󷱂`
󷰯 …  𝚡∧𝚢 ᴍ..𝕊 indicies between
    Same as 󷸹
󷰯 ⌃󰁌 𝚡∧􊽨𝚢 ᴍc^ exponential
    `5⌃2 ≡ 25`
󷰯 󷷺󰁌 𝚡∧􊽨𝚢 ᴍdia^ diamond exponential
    󷹇 Requested by Michael for future advanced math things
󷰰 󰁌 .􊽨𝚡 ᴍST+ splat function
    ƒ ≈ 𝚲ƒ(⠤𝔸󰌷, ⠶𝕂)
    󰤱˜ docs
󷰰 ∾󰁌 .𝚡 ᴍCCR reverse function args
    ∾ƒ ≈ 𝚲ƒ(⠤𝔸ᴙ, ⠶𝕂)
    󰤱˜ docs
󷰰  𝚡. ᴍ() call func without args
    i.e. "f" is the same as "f()"
    `ᐳ5ᐸ ≡ ᐳ5ᐸ() ≡ 5`
󷰰 󷹁 𝚡.􊽨 ᴍinv invert func
    If object has __inverse__ property will call it w/ modifier as args
    ƒ󷹁􊽹: returns inverse multimap by computing ƒ(x)∀x∈Ɗ
    󰤱˜ docs
󷰱 ® 􋅂 ᴍor roots of unity
    "®² ≡ ®(2)" ⟶ ∓1  beware IEEE 754
󷰱 󰻾 􊽨 ᴍid𝕊 identify
    󰻾􋇜
        function that always returns the modifier value
        `󰻾⁵(22) ≡ 5`
    `󰻾(3) ≡ 3`
    `󰻾(5,3) ≡ 5`
󷰱 ℵ 􊽨 ᴍwhN magic namespace: iterates by pairs
    `ℵ(hi=22, joe=10)ʰⁱ ≡ 22`
    `ℵ²(x=22)ʰ ≡ 2`
    `ℵ([1⋄4,2⋄6,6⋄󷰿])ᴍ󰻾 ≡ [(1, 4), (2, 6), (6, -2)]`
    󰤱˜ docs
󷰱 ℶ 􊽨 ᴍwhn magic namespace: iterates by values
    󰤱 docs
󷰱 ∅󰁘 􊽨 ᴍ{} empty set
    `∅ ≡ 𝑠()`
    `∅³ ≡ [𝑠(), 𝑠(), 𝑠()]`
󷰱 ⍁󰁘 􊽨 ᴍ[/ empty list
    `⍁ ≡ []`
    `⍁³ ≡ [[], [], []]`
    `⍁􍧟 ≡ [[[[]]]]`
󷰱 󰁘   ᴍslf self
    󰤱 docs, might be removed
󷰱 󷹘⍖󰁘 􊽨 ᴍas⟦sp⟧ ugex {pop,peek}
    󷹘: Pops off last element from ugex stack
    󷹘ⁿ􋁉􋀉􋁗󰁸􋔛󰁹: Pops off last n elements from ugex stack
    ⍖: Same as 󷹘 but doesn't remove from ugex stack



0 󱀘   ᴍccl Python "class"
0 ⨡   ᴍcim Python "import"
0 ⮂   ᴍcy𝕊 Python "yield"
0 ↪   ᴍcr𝕊 Python "return"
0 ⮌   ᴍcf𝕊 Python "from"
0 ↺   ᴍcc𝕊 Python "continue"
0 ⇥   ᴍcb𝕊 Python "break"
0 ➰   ᴍcl𝕊 Python "while"
0 ∀   ᴍAA Python "for"
0 =   = Python assignment
0 ⠤⠶   ᴍc⟦dD⟧𝕊 Python {*,**} for {vargs,kargs}
0 ¿⸘¡   ᴍ⟦⁅?⟦?!⟧⁆⁅!!⁆⟧ Python {if,elif,else}
0 󰆴   ᴍcT𝕊 Python "del"
0 ⭜⭝   ᴍce⟦nl⟧ ternary {if,else}
    "x ⭜ y ⭝ z" ⟶ y if x else z
    "x ⭜ y" ⟶ y if x else □
    `✓ ⭜5⭝ 0 ➡≡ 5`
    `✗ ⭜5⭝ 1 ➡≡ 1`
    `✗⭜5 ➡≡ □`
    `✓⭜5 ➡≡ 5`
    `✗ ⭜5⭝ ✓ ⭜9⭝ 0 ➡≡ 9`
>¡ℭ ⟨LBLEEN⟩ 󱀘⨡⮂↪⮌↺⇥➰∀=¿⸘␛¡⭜⭝⠤⠶󰆴

0 ⬅➡   ᴍa⟦⁅AA⁆⁅DD⁆⟧ push right into {left,right} (Strongest)
0 ←→   ᴍa⟦ad⟧𝕊 push {right,left} into {left,right} (Medium)
0  ⥉   ᴍcsw swap right and left (Medium)
0 ⭠⭢   ᴍa⟦AD⟧𝕊 push {right,left} into {left,right} (Weakest)
0 ≔≕   ᴍ⟦⁅eqd⁆⁅deq⁆⟧ Assign to {left,right}
    `x≔22→+2 ≡ 24 ∧ x≡22`
    `22≕x+2 ≡ 24 ∧ x≡22`
0 󷸉󷸎   ᴍ⟦⁅eqD⁆⁅Deq⁆⟧ Assign to {left,right}, return previous value
    `(␛a≕x)►(x󷸉␛b→+x) ≡ "ab"`
0 󷸊󷸌   ᴍ⟦⁅eqm⁆⁅meq⁆⟧ Assign to {left,right}, foward value
    `(␛a≕x)►(x󷸊⋅5) ≡ "aaaaa"`
0 󷸋󷸍   ᴍ⟦⁅eqM⁆⁅Meq⁆⟧ Assign to {left,right}, foward value, return previous value
    `(␛a≕x)►(x󷸋+␛b→+x) ≡ "aab"`
>¡ℭ ⦑c⦑e6b⦒⦒ 󷰚⬅➡←→⭠⭢⥉
>¡ℭ ⦑c⦑f0a⦒⦒ 󷰴≔≕󷸉󷸎󷸊󷸌󷸋󷸍

󷰾 𝔸𝕂   ᴍq⟦ak⟧ λ {vargs,kargs}
    `󰲣[x,y,⠤𝔸,𝕂􊯛ⱼ]󰅂(5,2,9,1,j=22) ≡ [5,2,9,1,22]`
󷰾 𝓐𝓚   ᴍMS⟦AK⟧ whisker {vargs,kargs}
    `󷺻[⠤𝓐,⟞,𝓚􊯛ⱼ]ᐸ(5,2,j=15) ≡ [2,5,15]`
󷰾 󰮈   ᴍcot signal delete element from iteration
>   ¡ℭ ⦑c⦑fa2⦒⦒ 󰮈
    Many iteration operators disgard values if their operand function returns this.
    `[1,2,3,4,5]ᐵ>2⭜⟞⭝󰮈ᐸ ≡ [3,4,5]`
    `[0,1,2,3,4,5,6]󰈲􍯏􊽮󷺹<4⭜✓⭝⟞>4⭜󰮈ᐸ ≡ [0,1,4,9,4]`
    󰤱˜ docs
󷰾 ⬤   ᴍooo𝕊 dummy variable for currying
>   ¡ℭ ⟨DGREEN⟩ ⬤
    See 

󷰾 ✗✓   ᴍhe⟦xk⟧ {false,true}
    `✗≡0`
    `✓≡1`
󷰾 ⴴⴳ   ᴍcc⟦ft⟧ {falsey,truthy} function that always returns {false,true}
>¡ℭ ⦑c⦑f00⦒⦒ ✗ⴴ ␠ ¡ℭ ⦑c⦑0f0⦒⦒ ✓ⴳ
󷰾 □   ᴍ[] none
󷰾 ᐦ   ᴍc" empty string
󷰾 ∞   ᴍ88 infinity
󷰾 îĵ󷺈   ᴍ⟦ijk⟧^ {imaginary,j,k} unit
    `ĵ+2î ≡ ℍ(0,2,1,0)`
󷰾 ℇ   ᴍeu𝕊 euler's number
󷰾 τπ󷺍󷺎󷺏   ᴍ⟦⁅⟦tp⟧𝕊⁆⁅p234⁆⟧ {tau,½τ,½π,½󷺍,½󷺎}
󷰾 􋐳􋐲􋐴􋑯   ᴍ,⟦⁅cos⁆⁅sin⁆⁅tan⁆⁅log⁆⟧ {cos,sin,tan,log} Function (maybe operator in future?)
󷰾 𝗙   ᴍwsF check if function
    `󷺹²ᐸᐹ𝗙 ∧ 𝗙(󷺹²) ≡ ✓`
    `[1,2,3]ᐹ𝗙 ∨ 𝗙(22) ≡ ✗`
󷰾 𝗜   ᴍwsI check if iterable
    `[1,2,3]ᐹ𝗜 ∧ 𝗜([1,2,3]) ≡ ✓`
    `2ᐹ𝗜 ∨ 𝗜(□) ≡ ✗`
󷰾 𝗛   ᴍwsH check if hashable, if so, return hashed value
>¡ℭ ⟨DBLUE⟩ □ᐦ∞îĵ󷺈ℇ󷺍󷺎󷺏

󷰾 𝚲󰲡󰲣󰲥󰲧󰲩󰲫   ᴍ⟦⁅cZ𝕊⁆⁅wc⟦123456⟧⁆⟧ λ function of form ⥌{,x,xy,xyz,xyzw,xyzwv,xyzwvu}↦
󷰾 ⥌↦󰅂   ᴍ⟦⁅cz𝕊⁆⁅amd⁆⁅c}⁆⟧ {declare,start,close} λ function
󷰾 ᐳᐸ   ᴍ"   ⟦AD⟧ {left,right} whisker no args
󷰾 ᑀᑅ   ᴍ >  ⟦AD⟧ {left,right} whisker apply, insert
󷰾 ᐵᑈ   ᴍ >> ⟦AD⟧ {left,right} whisker apply to elt's, insert
󷰾 󷺹󷺽   ᴍ| > ⟦AD⟧ {left,right} whisker function, insert
󷰾 󷺺󷺾   ᴍ|>> ⟦AD⟧ {left,right} whisker function on elt's, insert
󷰾 ᐒᐘ   ᴍ  >|⟦AD⟧ {left,right} whisker apply, no insert
󷰾 ᐖᐛ   ᴍ >>|⟦AD⟧ {left,right} whisker apply to elt's, no insert
󷰾 󷺻󷺿   ᴍ| >|⟦AD⟧ {left,right} whisker function, no insert
󷰾 󷺼󷻀   ᴍ|>>|⟦AD⟧ {left,right} whisker function on elt's, no insert
>   ¡ℭ ⟨YELLOW⟩ 𝚲⥌↦␛󰅁␛󰅂ᐸᐳᑅᑀᑈᐵᐘᐒᐛᐖ󷺽󷺹󷺾󷺺󷻀󷺼󷺿󷺻
󷰾 ⟞⟝   ᴍ⟦⁅-|⁆⁅|-⁆⟧𝕊 {left,right}-tack arg for {left,right} whisker
>   ¡ℭ ⟨DBLUE⟩ ⟞⟝

󷰾 𝑏   ᴍwib bool
󷰾 𝑑   ᴍwid dict
󷰾 𝑒   ᴍwie Exception
󷰾 𝑓   ᴍwif float
󷰾 𝑖   ᴍwii int
󷰾 𝑙   ᴍwil list
󷰾 𝑜   ᴍwio object
󷰾 𝑠   ᴍwis set
󷰾 𝑡   ᴍwit tuple
󷰾 𝑦   ᴍwiy bytes
󷰾 ᔐ   ᴍcs𝕊 str

󷰾 󰋺   ᴍcic runtime include ☾ code
    "󰋺(‹my_file.☾›, ‹usefull_thing_1›, ‹other_usefull_stuff›)"
󷰾 󱠨   ᴍcex runtime exec ☾ code
󷰾    ᴍcfo file open
󷰾    ᴍcfr file read
󷰾    ᴍcfw file write
󷰾    ᴍcfw file write
󷰾    ᴍcbc clipboard
    "()" ⟶ contents of clipboard
    "(‹stuff›)" ⟶ copies "stuff" to clipboard
>¡ℭ ⦑c⦑fa2⦒⦒ 󱣩ᔐ󱠨󰋺

󷰾 ´   ᴍ'' neutralize operator
    Forces operator to act as regular variable
    i.e. "[1,2,3] ⨝ ⋅´" can parse fine but "[1,2,3] ⨝ ⋅" fails
󷰾 ꜠   ᴍccd duplicate operator arguments
    Forces binary operator to be unary, duplicating operands.
    `5+꜠ ≡ 10`
    `5+꜠+2 ≡ 12`
󷰾 ᵜ   ᴍccs swap operator arguments
    `2-ᵜ5 ≡ 3`
󷰾 ≺   ᴍ~<𝕊 operator prefix binary on list elements
    Forces binary operator to be unary, splats out operand.
    `[1,5]≺+ ≡ 6`
󷰾 ᔨ   ᴍcor correspondence modifier
    Indicates operator should indicate "where" it happens, sometimes called "select".
    `[5,2,3,0,0,1]󰈲ᔨ󷺹>1ᐸ ≡ [0, 1, 2]`
    `[5,2,4,6,1,1]𝌂ᔨ󷺹%2ᐸ ≡ [[0], [1, 2, 3], [4, 5]]`
    󰤱˜ docs
>¡ℭ ⦑c⦑f01⦒⦒ 󷰲≺≻⊀⊁≼≽⋠⋡≾≿⋨⋩⪱⪲⟥⟤´꜠ᵜ𐞑ᔨ

󷰾 ⟨⟩   ᴍ⟦⁅[[⁆⁅]]⁆⟧ {begin,close} ugex
󷰾 ⍮   ᴍ;_ ugex sep
    󰤱 docs
󷰾 󷸴   ᴍCD: ugex or
    󰤱 docs
󷰾 ⍈   ᴍWBd ugex apply
    󰤱 docs
>¡ℭ ⟨LBLEEN⟩ ⍮󷸴⍈

󷰾 ␛   ᴍESC escape character in string/1 char str
>   ¡ℜ ⦑⦒⦑c⦑f|0fa7⦒⦒ "(␛␛)(.)"
    `‹␛›␛⟦› ≡ "›⟦"`
    `␛a ≡ "a"`
    `␛␛ ≡ "␛"`
󷰾 𝗻𝗿𝘀𝘁   ᴍws⟦nrst⟧ {newline,carriage return,space,tab} character
    `𝗻 ≡ "\n"`
    `𝗻𝘀𝘁␛h ≡ "\n \th"`
󷰾 ‹›   ᴍcc⟦[]⟧ {›begin,close} magic string
>   ¡ℭ ⦑c⦑f5a|0fd4⦒B⦑s|1⦒⦒ ‹›
    `‹hi \_:>_/!𝗻𝗻› ≡ "hi \\_:>_/!\n\n"`
󷰾 ⟦⟧   ᴍq⟦[]⟧ {begin,close} magic string sub-expr
    `‹beastboy: ⟦2²⟧› ≡ "beastboy: 4"`
󷰾 󰦥   ᴍST: hyperliteral star string
>   ¡ℭ ⟨DGREEN⟩ 󰦥
>   ¡ℜ ⦑c⦑7feb2d⦒⦒ "(󰦥{5})"
    `󰦥󰦥󰦥󰦥󰦥s𝗻␛a\bc s\{/.}tring\󰦥󰦥󰦥󰦥󰦥 ≡ "s𝗻␛a\\bc s\\{/.}tring\\"`
    Matches everything including all whitespaces until it sees another five stars.

󷰾    ᴍcom Comment
>   ¡ℭ ⦑c⦑24f115|4f02⦒⦒ ""
    Ignores everything after it
󷰾 🟑֎ JOE ᴍc⟦⁅/𝕊⁆⁅//⁆⟧ Multiline/inline comment{,}
    `2+🟑wee🟑2 ≡ 4`
    󷹇 these autoclose at end of file

>¡upsidedown ⟨LBLUE⟩ ⟦
>  ⁅ wu⟦0123456789abcdefoxABCDEFOX⟧ 
>   ⟶   󷰽󷰾󷰿󷱀󷱁󷱂󷱃󷱄󷱅󷱆󷱇󷱈󷱉󷱊󷱋󷱌󷱍󷱎󷱏󷱐󷱑󷱒󷱓󷱔󷱕󷱖 ⁆
>  ⁅ᴍwu⟦∞îĵ󷺈ℇτπ󷺍󷺎󷺏⟧
>   ⟶   󷱩󷱪󷱽󷱾󷱫󷱬󷱭󷱮󷱯󷱰                   ⁆ ⟧

>⟨DBLEEN⟩ ⟦
>    ⁅ ⟦   ⁅03⁆⁅100⁆⟧ ⟶ ↉󷷉       ⁆
>    ⁅1⟦23456789⁅10⁆⟧ ⟶ ½⅓¼⅕⅙⅐⅛⅑⅒⁆
>    ⁅2⟦23456789⁅10⁆⟧ ⟶ ◌⅔◌⅖◌󷶲◌󷶷◌⁆
>    ⁅3⟦23456789⁅10⁆⟧ ⟶ ◌◌¾⅗◌󷶳⅜◌󷷆⁆
>    ⁅4⟦23456789⁅10⁆⟧ ⟶ ◌◌◌⅘◌󷶴◌󷷂◌⁆
>    ⁅5⟦23456789⁅10⁆⟧ ⟶ ◌◌◌◌⅚󷶵⅝󷶹◌⁆
>    ⁅6⟦23456789⁅10⁆⟧ ⟶ ◌◌◌◌◌󷶶◌◌◌⁆
>    ⁅7⟦23456789⁅10⁆⟧ ⟶ ◌◌◌◌◌◌⅞󷶺󷷇⁆
>    ⁅8⟦23456789⁅10⁆⟧ ⟶ ◌◌◌◌◌◌◌󷶻◌⁆
>    ⁅9⟦23456789⁅10⁆⟧ ⟶ ◌◌◌◌◌◌◌◌󷷈⁆ ⟧