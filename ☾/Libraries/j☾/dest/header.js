/* AUTOGENERATED, DO NOT EDIT */ const  ASCII_CHARS_STANDARD  =  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ; 

 const  𝑜  =  Object ; 
 const  𝑙  =  (A) => [ ... A] ; 
 const   þ1F0CC   =  (l) => l . length ; 
 const   þF0EFE   =  (x) => x
 const  𝒮  =  (d , k , v) => ( ! (k in d)  ||  d[k] === null)  ? (d[k] = v) :  d[k] ; 
 const  [𝒪 ,  𝒟 ,  𝒪k ,  𝒪v]  =  [𝑜 . entries ,  𝑜 . fromEntries ,  𝑜 . keys ,  𝑜 . values] ; 
 const  ᴍ   =  (l , 𝑓) => 𝑙(l) . map(𝑓) ; 
 const  ᴍv  =  (d , 𝑓) => 𝒟(𝒪(d) . map(([k , v]) => [k , 𝑓(v)])) ; 
 const  ᴍk  =  (d , 𝑓) => 𝒟(𝒪(d) . map(([k , v]) => [𝑓(k) , v])) ; 
 const   þF147C    =  (𝑥 , 𝑦) => 𝑙(𝑥) . map((k , i) => [k ,  𝑦[i]]) ; 

 const  int  =  Math . floor ; 
 const   þ022C0   =  (A) => A . every( þF0EFE ) ; 
 const  ends  =  (l) => l . map((𝑥 , i) => [i == 0 , 𝑥 , i ==  þ1F0CC (l) - 1]) ; 
 const  sort  =  (A , f , r = 𝔽) =>  A . sort((a , b) => (r  ? 1 :  -1) * (b > a  ? 1 :  -1))  //  what ? 
 const  range  =  (a , b) => [ ... Array(b - a) . keys()] . map((i) => i + a) ; 
 const  merge  =  (  ... o) => 𝑜 . assign({} ,   ... o)
 const   print             =  ( ... x) => console . log  ( ... x)  ||  x[0]
 const  print_table  =  ( ... x) => console . table( ... x)  ||  x[0]
 const  sleep  =  (s) => new Promise((r) => setTimeout(r ,  1000 * s)) ; 
 const  strfmt  =  (s , 𝔸) => {
     for ( const [k , v]  of  𝒪(𝔸)) s  =  s . replace( new RegExp("\\{"  +  k  +  "\\}" ,  "gi") ,  v) ; 
     return  s ;  } ; 
 const  mk_id  =  (l ,  chars = ASCII_CHARS_STANDARD) =>  
    range(0 ,  l)
         . map(() => chars . charAt(int(Math . random() * chars . l)))
         . reduce((a , b) => a + b ,   "" ) ; 
 const  groups  =  (l , 𝑓) => {
    O  =  {} ; 
    l . forEach((𝑥) => 𝒮(O ,  𝑓(𝑥) ,  []) . push(𝑥))
     return  O ;  }

objIdMap =  new WeakMap ,  objectCount = 0 ; 
 const  id  =  (obj) => {
     ! objIdMap . has(obj)  &&  objIdMap . set(obj ,   ++ objCount) ; 
     objIdMap . get(obj) ;  }
    
 const  GID  =  (id) => document . getElementById(id) ; 
 const  VAL  =  (id) => GID(id) . value ; 
 const  SAT  =  (ε , a , v) => ε . setAttribute(a ,  v) ; 
 const  QSA  =  (sel , e = document) => 𝑙(e . querySelectorAll(sel)) ; 

 const  setLocal  =  (k , v) => localStorage[k]  =  JSON . stringify(v) ; 
 const  getLocal  =  (k  ) => JSON . parse(localStorage[k]) ; 

 const  ε_clone  =  (ε) => {
     if ( ! (ε instanceof Node))  return  ε ; 
     if (ε . tagName  ==  'F')  return  ε . 𝑓() ; 
     const  ə  =  ε . cloneNode(false) ; 
     if ('𝕤' in ε) ə . 𝕤  =  ε . 𝕤 ; 
     if (ε instanceof HTMLElement)
        ə . append( ... ᴍ(ε . childNodes ,  ε_clone)) ; 
     return  ə ;  }

 const  𝐶  =  (d) => {
     const  cache_specials  =  (𝕊) => {
         const  psu  =  𝕊 . e . parentElement  ??  mkə(false , false , [(𝕊 . e)]) ; 
         for ( const  c  of  psu . querySelectorAll("[T]")) {
             if ('𝕤'  in  c) continue ; 
            𝕊[𝕊 . 𝐴[id(c)]  =  c . getAttribute('T')]  =  c ; 
            c . removeAttribute('T') ;  }
         for ( let  c  of  psu . querySelectorAll('*')) {
             if ('𝕤'  in  c) {
                 if ( ! ('𝑃'  in  c . 𝕤)) c . 𝕤 . 𝑃  =  𝕊 ; 
                continue ;  }
            c . 𝕤  =  𝕊 ;  } }
     const  𝑓  =  ( ... par) => {
         const  𝕊  =  merge(d ,   ... par) ; 
        ᴍ(𝒪(𝕊) ,  ([k , ε]) => (ε instanceof Node) && (𝕊[k]  =  ε_clone(ε))) ; 
        𝕊 . 𝐴  =  {} ; 
        𝕊 . 𝐿  =  (𝕊 , 𝑥) => {
             let  k  =  𝕊 ; 
            while(k  &&   ! (𝑥  in  k)) k  =  k . 𝑃 ; 
             return  k[𝑥] ;  } ; 
        (𝕊 . 𝑅  =  cache_specials . bind(null ,  𝕊))() ; 
         for ( const  [k ,  v]  of  𝒪(𝕊))
             if (v instanceof Function)
                𝕊[k]  =  v . bind(null ,  v . is𝐶  ? {𝑃 :  𝕊} :  𝕊)
        𝕊 . init() ; 
         return  𝕊 . e ;  }
    𝑓 . is𝐶  =   true  ; 
     return  𝑓 ;  } ; 

 //  `󱀝✨󱀝✨󱀝 topaz notation 󱀝✨󱀝✨󱀝`
mkə  =  (name ,  attrs ,  kids) => {
     const  remaps  =  { 𝑆 : "style" , 𝐼 : "id" , 𝐶 : "class" } ; 
     if (name ===  false ) name  =  "div" ; 
     let  ə  =  document . createElement(name) ; 
     if (attrs)  for ( let  [k , v]  of  𝒪(attrs)) ə[remaps[k] ?? k]  =  v ; 
     if (typeof kids  ===  "string") ə . innerText  =  kids ; 
     else if (kids instanceof Array ) kids . forEach((𝚎) => {
         if (typeof 𝚎  ===  "string") 𝚎  =  document . createTextNode(𝚎) ; 
        ə . appendChild(𝚎) ; 
    }) ; 
     //  þF0931 htmlelements / function type / general objects / etc
     return  ə ;  } ; 