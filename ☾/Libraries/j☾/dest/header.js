/* AUTOGENERATED, DO NOT EDIT */BASE_CHARSET  =  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ; 

𝔍  =  {þ02191 : JSON . stringify ,  þ02193 : JSON . parse} ; 
þF0219  =  document ; 
𝑜  =  Object ; 
𝗙  =   (x,...𝔸)=> x instanceof Function ; 
 þ1F0CC   =   (x,...𝔸)=> x . length ; 
𝑙  =   (x,...𝔸)=> [ ... x] ; 
 þF0EFE   =   (x,...𝔸)=> x ; 
 þ022C0   =   (x,...𝔸)=> x . every( þF0EFE ) ; 
 þF147C   =   (x,y,...𝔸)=> 𝑙(x) . map((k , i) => [k , y[i]]) ; 
 ꟿ    =   (x,y,...𝔸)=> 𝑙(x) . map( (x,...𝔸)=> y( ... x)) ; 
ᴍ   =   (x,y,...𝔸)=> 𝑙(x) . map(y) ; 
ᴍv  =   (x,y,...𝔸)=> 𝒟(𝒪(x) . map(([k , v]) => [k , y(v)])) ; 
ᴍk  =   (x,y,...𝔸)=> 𝒟(𝒪(x) . map(([k , v]) => [y(k) , v])) ; 
𝒮  =  (d , k , v) => ( ! (k in d)  ||  d[k] === null)  ? (d[k] = v) :  d[k] ; 
[ þF114F  ,   þ02B13 ]  =  [Math . random ,  Math . floor] ; 
[𝒪 ,  𝒟 ,  𝒪k ,  𝒪v]  =  [𝑜 . entries ,  𝑜 . fromEntries ,  𝑜 . keys ,  𝑜 . values] ; 
 print       =  ( ... x) => (console . log  ( ... x) , x[0]) ; 
table  =  ( ... x) => (console . table( ... x) , x[0]) ; 
ends   =  (l) => l . map((𝑥 , i) => [i == 0 , 𝑥 , i ==  þ1F0CC (l) - 1]) ; 
sort   =  (A , f , r = 𝔽) =>  A . sort((a , b) => (r  ? 1 :  -1) * (b > a  ? 1 :  -1)) ;  
range  =  (a , b) => b ===  undefined  ? 𝑙(Array(a) . keys()) : 𝑙(Array(b - a) . keys()) . map( (x,...𝔸)=> x + a) ; 
merge  =  (  ... o) => 𝑜 . assign({} ,   ... o) ; 
sleep  =  (s) =>  new Promise((r) => setTimeout(r ,  1000 * s)) ; 
mk_id  =  (l , chars = BASE_CHARSET) => range(l) . map( (...𝔸)=> chars . at(Number( þF114F () *  þ1F0CC (chars)))) . reduce( (x,y,...𝔸)=> x + y ,   "" ) ; 
groups  =  (l , 𝑓) => {
    O  =  {} ; 
    l . forEach( (x,...𝔸)=> 𝒮(O ,  𝑓(x) ,  []) . push(x)) ; 
     return  O ;  }

 const  𝐸  =  Element
Array . prototype . starmap  =  function(x){ return  ꟿ (this , x)}
𝐸 . prototype . map      =  function(x  ){this . children = Array . from(this . children) . map(x  ) ;   return this} ; 
𝐸 . prototype . starmap  =  function(x  ){this . children = Array . from(this . children) . starmap(x  ) ;   return this} ; 
𝐸 . prototype . filter   =  function(x  ){this . children = Array . from(this . children) . filter(x  ) ;   return this} ; 
𝐸 . prototype . reduce   =  function(x , y){this . children = Array . from(this . children) . reduce(x , y) ;   return this} ; 
    
GID  =   (x,...𝔸)=> document . getElementById(x) ; 
VAL  =   (x,...𝔸)=> GID(x) . value ; 
SAT  =   (x,y,z,...𝔸)=> x . setAttribute(y , z) ; 
QS   =  (x , e = document) => e . querySelector(x) ; 
QSA  =  (x , e = document) => 𝑙(e . querySelectorAll(x)) ; 
𝔏𝔖  =  { þ02191 :   (x,y,...𝔸)=> localStorage[x]  =  𝔍 . þ02191(y) , 
       þ02193 :   (x,y,...𝔸)=> x in localStorage ? 𝔍 . þ02193(localStorage[x]) : y , 
       þ02E13 :   (x,y,z,...𝔸)=> 𝔏𝔖 . þ02191(x ,  y(𝔏𝔖 . þ02193(x ,  z))) }


mkə  =  (name ,  attrs ,  kids) => {
     const  remaps  =  { NAME : "T" ,  𝑃𝐻 : "placeholder" ,  𝑇 : "type" ,  𝑆 : "style" ,  𝐼 : "id" ,  𝐶 : "className" } ; 
     if (name ===  false ) name  =  "div" ; 
     let  ə  =  document . createElement(name) ; 
     if (attrs)  for ( let  [k , v]  of  𝒪(attrs)) ə[remaps[k] ?? k]  =  v ; 
     if (typeof kids  ===  "string") ə . innerText  =  kids ;  
     else if (kids instanceof Array) kids . forEach((𝚎) => {
         if (typeof 𝚎  ===  "string") 𝚎  =  document . createTextNode(𝚎) ; 
        ə . appendChild(𝚎) ; 
    }) ; 
    
     return  ə ;  } ; 