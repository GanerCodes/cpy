from sys import path as __PATH; __PATH.insert(0, '/home/ganer/Projects/cpy/imports') ; del __PATH ; from CPY_HEADER import * # CPY-a-2023/10/29_17:05:08 
##
## This code was generated by a tool.
## All manual changes will be overwritten!
##
## pyrd 0.1.0
##
from pyrd.pyrd import *

def standardize_result(result):
    """ Return a ParseObjectBoth inside of a ParseObjectEither
    """
    if not isinstance(result,ParseObjectEither):
        result = ParseObjectEither(result, 0)
    if not isinstance(result.choice,ParseObjectBoth):
        both = ParseObjectBoth()
        both.append(result.choice)
        result.choice = both
    return result

class Swag(Parser):
    def handle_parsed(self,parsed_choice):
        parsed = parsed_choice.choice
        if parsed_choice.index == 0:
            A = parsed_choice.choice[0]
            return parsed



    def parse(self, string):
        parsed = (A() & ParseStr("""a""")).parse(string)
        if parsed:
            parsed.result = standardize_result(parsed.result)
            parsed.result = self.handle_parsed(parsed.result)
        return parsed

class A(Parser):
    def handle_parsed(self,parsed_choice):
        parsed = parsed_choice.choice
        if parsed_choice.index == 0:
            
            return self.handle_rr(parsed_choice)

        if parsed_choice.index == 1:
            
            return parsed


    def handle_rr(self,parsed_choice):
        if parsed_choice.index == 0:
            def _helper(parsed_choice):
                parsed = parsed_choice.choice
                A = parsed_choice.choice[0]
                A = parsed_choice.choice[1]
                None
            base = parsed_choice.choice[0].base
            for case in parsed_choice.choice[0].unrolled[::-1]:
                case_choice = ParseObjectEither(case,0)
                case_choice.choice.append(base)
                base = _helper(case_choice)
            return base


    def parse(self, string):
        parsed = ((A() & A()).rr()|
        ParseStr("""a""")).parse(string)
        if parsed:
            parsed.result = standardize_result(parsed.result)
            parsed.result = self.handle_parsed(parsed.result)
        return parsed

print *Swag().parse(open('code').read())