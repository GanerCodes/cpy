⫰: abs
⫯: ¯abs

fold now has init modifier
    [3]ſ¹+
    ⯈ 4

ᴍ: now handles strings well
ᴍⁿ: n layered map
    [1⋄2,3⋄4] ᴍ² √
    ⯈ [[1.0, 1.4142135623730951], [1.7320508075688772, 2.0]]
ᴍ⁻ⁿ: layers above any atom
    confusing so like:
        ["some", ["cool", [[["strings"]]]]] ᴍ⁻² ᴙ
        ⯈ ['emos', ['looc', [[['sgnirts']]]]]
        ["some", ["cool", [[["h"]]]]] ᴍ⁻¹ ᔐ.upper
        ⯈ [['S', 'O', 'M', 'E'], [['C', 'O', 'O', 'L'], [[[['H']]]]]]
         i think ᴍ⁻¹ is the same as ᴍ󰂃...?
ᴍ󰂃: also a thing
ꟿⁿ: starmap works the same way
  
Where '⨁' ⫢ operator
  ⨁󰀂ᴬᴾ󰀙    ⟶ ⨁["󰀂ᴬᴾ󰀙"]
  ⨁ᵃ       ⟶ ⨁[a]
  ⨁¹⁺¹     ⟶ ⨁[1+1]
  ⨁¹⁺¹𐞑ᴶ𐞑ˣ ⟶ ⨁[1+1,"J",x]

Keybinded ⥉, 𐞑
Changed binds for ⟥⟤

"egg"⬄"g"
⯈ "e"
needs more work to be more general

made ⟥ and ⟤ work... maybe? i think?

tracebacks show the python code now, terrible monkey things had to be done to do it

added ≺, basically
    1⋄2≺+
    ⯈ 3

* Added hex, binary, and octal parsing
* Random fixes, one tricky peggle bug
* Added some more test cases
We still have the bugs with op swapping and stuff not chaning pres orders

* Added some normalization to some paths
* Trim the caller program from argv

added 
    it just calls a function
    "f " is "f()"

fixed hex lol

Added basic cli mode, tldr "☾" with no args opens it.
refresher is "☾ --refresher"

added install script [linux only rn]

fixed bug with tracebacks
(Need to fix cli mode not showing errors)

ᴍ and ꟿ support ᴰ ᴷ ⱽ for mapping dicts, dict keys, and dict values

added 𝑡 for tuples b/c it was missing for some reason

print flush by default (idk if this changes anything but it don't hurt)

added bindings (and fixed a bug) for special string chars i.e. 𝗻

added ⍭, basically (use special char highlighting PLS):
    ‹a b›⍭ = ['a', 'b']
    ‹k j a b›⍭ = [['k','j'], ['a','b']]

added 𝔦𝔪𝔭(␛s), imports some misc sys related things for ease of use

Working on massive overhaul for compose/font stuff!

AAAAAAAAAAAAAa
ehehehhehe

ⴳ, ⴴ now have a self-returning call method

we now have
    ⨳ 󰻾(22) ≡ 22
    ⨳ 󰻾¹⁴("hiii") ≡ 14

Ϝ: accumulate
ℵᵒᵖᵗⁱᵒⁿᵃˡ􋕟ᵈᵉᶠᵃᵘˡᵗ: attr dict (iter does .items)
ℶᵒᵖᵗⁱᵒⁿᵃˡ􋕟ᵈᵉᶠᵃᵘˡᵗ: attr dict (iter does .values)
󰑅, 󰑅ᴵ: first, first index of
󰑁, 󰑃 : before, after
ƒ  (a1,a2,⬤,j=22,h=⬤): partial function
ƒ: automatically star a function's args
(also 􊽺, which is cool for stuff like ≡)

ᙎᙡᗢᙧ: windowz
ᣆ: apply func if...
$ᵒecho epic subprocess calls󷹹

oh also everything has sub/sup/subsub/subsup/supsub/supsup scripts
oh also font remaking thingy finished check out CONFIGURE.☾ in FontCompose

ok superscripts should now act like exponents when the parsed thing isn't an identifier
⨳ 2² ≡ 4  😊

Added gambling 😊😊😊
     /󱅏/ ᴺ : list of N of the random thing
      /󱅏   = uniform(¯1, 1)/uniform(0, 1)
      /󱅏 n = uniform/randint(0, n)
      /󱅏 𝒾 = uniform/randint(𝑖₀, 𝑖₁)
    x /󱅏 y = uniform/randint(n₀, n₁)
    𝒾      = shuffle
    𝒾    n = n choices

New errorz
    (𝐸   )         raise 𝐸
    (ƒ  𝑥)(⠤𝔸, ⠶𝕂) try ↪ƒ(⠤𝔸, ⠶𝕂), catch ε=(supscript? / any), ↪𝑥
    (ƒ 󰔶  )(⠤𝔸, ⠶𝕂) try ↪ƒ(⠤𝔸, ⠶𝕂), catch ε=(supscript? / any), ↪𝔸₀ or □
    (ƒ 󰔶 𝔤)(⠤𝔸, ⠶𝕂) try ↪ƒ(⠤𝔸, ⠶𝕂), catch ε=(supscript? / any), ↪𝔤(⠤𝔸, ⠶𝕂)
    (ƒ   )(⠤𝔸, ⠶𝕂) try ↪ƒ(⠤𝔸, ⠶𝕂), catch ε=(supscript? / any), ↪ε
    (ƒ  𝔤)(⠤𝔸, ⠶𝕂) try ↪ƒ(⠤𝔸, ⠶𝕂), catch ε=(supscript? / any), ↪𝔤(ε)

a∣b: ✓/✗ if a divides b
a∤b: take a guess

ℇ is now euler's constant

exponents are now fun 5􊽲 = √5
    [󷹇 uses hard-coded list of single char identifiers]

fixed nested ≔ and <op>= calls

Filterz
    (󷹇 󰈳 is like 󰈲 except the checking function is inverted)
    "x 󰈲  ƒ" = [y∀y∈x¿ƒ(y)]
    "x 󰈲􋇔 ƒ" = [𝑓(y)¿ƒ(y)¡y ∀y∈x]
    "x 󰈲 ƒ" = x 󰈲􊽺 ƒ
    "x 󰈲 " = "󰈲  x" = x 󰈲 󰻾
    "x 󰈲􋇔" = "󰈲􋇔 x" = (xᴍ𝑓) 󰈲

Better rangessss
    𝑎, 𝑏, n ⫢ int
    𝒜, ℬ ⫢ iterable
    n=0 by default
        "𝒜 󷸹ⁿ  " = 𝒜₀₊ₙ
        "𝒜 󷸺ⁿ  " = 𝒜􍨄₋ₙ
        "𝒜 󷸻ⁿ  " = 𝒜₀₊ₙ, 𝒜􍨄₋ₙ
    n=1 by default
        "𝒜 󷸻ⁿ ℬ" = [𝒜ₓ ∀ x∈ℬ﹕﹕ₙ]
        "𝒜 󷸸ⁿ  " = (𝒜₀, 𝒜₁﹕􍨄﹕ₙ, 𝒜􍨄)
        𝑎=1 default, 𝑏=󷰾 default
            "𝒜 󷸹ⁿ 𝑏" = 𝒜   ﹕􊴎  ﹕ₙ
            "𝒜 󷸺ⁿ 𝑏" = 𝒜  ₁﹕􊴎₊₁﹕ₙ
            "𝒜 󷸸ⁿ 𝑏" = 𝒜  ₁﹕􊴎  ﹕ₙ
            "𝒜 󷸻ⁿ 𝑏" = 𝒜   ﹕􊴎₊₁﹕ₙ
            "𝑎 󷸹ⁿ 𝒜" = 𝒜􊴍  ﹕  􍨄﹕ₙ
            "𝑎 󷸺ⁿ 𝒜" = 𝒜􊴍₊₁﹕   ﹕ₙ
            "𝑎 󷸸ⁿ 𝒜" = 𝒜􊴍₊₁﹕  􍨄﹕ₙ
            "𝑎 󷸻ⁿ 𝒜" = 𝒜􊴍  ﹕   ﹕ₙ
        𝑎=0 default
            "𝑎 󷸹ⁿ 𝑏" = [⠤range(𝑎  ,𝑏  ,n)]
            "𝑎 󷸺ⁿ 𝑏" = [⠤range(𝑎+1,𝑏+1,n)]
            "𝑎 󷸸ⁿ 𝑏" = [⠤range(𝑎+1,𝑏  ,n)]
            "𝑎 󷸻ⁿ 𝑏" = [⠤range(𝑎  ,𝑏+1,n)]

i have gone off the deep end we now have
    󷱅󷰾 = ¯81
    󷰽󷱎󷱒󷱓󷱏󷱒󷱐󷱓󷱓󷱔 = ¯0xDEADBEEF

attempted to add some implicit multiplication. Most stuff with a a literal number works well, var_spec's work decently (but might be weird in the future), and we don't support strings/regular variables.
    ½󷰽󷱎󷱒󷱓󷱏󷱒󷱐󷱓󷱓󷱔󷺍²󷱀î³ = -13827051355.523182j
    
    (󷹇 implicit mul uses the "␀CAT" order of operations)

added joinz
    "⨝ 𝒜" = "⨝ 𝒜" =   ᐦ.join(𝒜ᴍᔐ)
    "⟕ 𝒜" = "⟕ 𝒜" = 𝗻+ᐦ.join(𝒜ᴍᔐ)
    "⟖ 𝒜" = "⟖ 𝒜" =   ᐦ.join(𝒜ᴍᔐ)+𝗻
    "⟗ 𝒜" = "⟗ 𝒜" = 𝗻+ᐦ.join(𝒜ᴍᔐ)+𝗻
    
    (𝒜 ⨝ⁿ ƒ) =          𝒜₀, ƒ(𝒜₀,𝒜₁), 𝒜₁, ƒ(𝒜₁,𝒜₂), …, 𝒜􍨄
    (𝒜 ⟕ⁿ ƒ) = ƒ(□,𝒜₀), 𝒜₀, ƒ(𝒜₀,𝒜₁), 𝒜₁, ƒ(𝒜₁,𝒜₂), …, 𝒜􍨄
    (𝒜 ⟖ⁿ ƒ) =          𝒜₀, ƒ(𝒜₀,𝒜₁), 𝒜₁, ƒ(𝒜₁,𝒜₂), …, 𝒜􍨄, ƒ(𝒜􍨄,□)
    (𝒜 ⟗ⁿ ƒ) = ƒ(□,𝒜₀), 𝒜₀, ƒ(𝒜₀,𝒜₁), 𝒜₁, ƒ(𝒜₁,𝒜₂), …, 𝒜􍨄, ƒ(𝒜􍨄,□)
    
    (if ƒ is non-callable ƒ=󰻾􊽺)
    ᴸ modifier = don't stringify result / cast result to list
    (󷹇 no ᴸ mod and ƒᐹᔐ ⇒ we string-sum at end)
    
    ⁿ = number of seperators if 𝒜 empty.
        n=0 ⟶ no seperator
          1 ⟶ 1 seperator
          2 ⟶ 2 seperator
        by default, ⟗ ⇒ n=1, n=0 otherwise.  
        (󷹇 sep value = ƒ(□, □))