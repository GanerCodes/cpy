⮌ util ⨡ Z

Ω 𝐍:
    ⊢ __init__(𝕊, t, ⠤c): 𝕊.t, 𝕊.c = t, c∨[]
    __iter__ = 𝕊↦iter(𝕊.c)
    __repr__ = 𝕊↦‹𝐍⟨⟦𝕊ᵗ∨␛∅⟧⟩⟨⟦", ".join(𝕊ᴍᔐ)⟧⟩›
    __getitem__ = ⥌𝕊,i↦𝕊ᶜᵢ
    __len__  = 𝕊↦𝕊ᶜ🃌
    tt = 𝕊↦(𝕊ᵗ,𝕊ᶜᴍ󰲡xᵗᵗ¿xᐹ𝐍¡x)
    ft = 𝒮ℳ←󰲡𝐍(x₀,⠤x₁ᴍ𝐍ᶠᵗ¿x₁ᐹ𝑙|𝑡∧x₁🃌≡2¡x₁⛶)
    copy  = ⥌𝕊,t=□,c=□↦𝐍(𝕊ᵗ¿t≅□¡t, ⠤𝕊ᶜ¿c≅□¡c)
    rcopy = ⥌𝕊,t=□↦𝐍(𝕊ᵗ¿t≅□¡t, ⠤𝕊ᶜᴍ𝐍.rcopy)¿𝕊ᐹ𝐍¡𝕊
    frp = ⥌𝕊,f,r,pre=✗↦((mk≔󰲡x.copy(c=xᴍ󰲡x.frp(f,r,pre))) ► (r(𝕊) ¿f((𝕊≔mk(𝕊))¿pre¡𝕊)¡ (𝕊¿pre¡mk(𝕊))))
    ftrp = ⥌𝕊,fs,r,pre=✗↦𝕊.frp(󰲡xᵗ∈fs, r, pre)
    ⊢ extract(𝕊, f, E=□, β=✓, Δ=✗, pre=✗):
        L = r, E = [[], []¿(ρ≔E≅□)¡E]
        𝝀 = 󰲡𝐍.extract(x,f,E,pre=pre)
        𝕊ᴍ󰲡L[𝑏←f←x≔x ᣆᵖʳᵉ 𝝀].append(x)
        n = 𝕊.copy(c=r ¿pre¡ rᴍ𝝀)
        
        ↪ ((n, E) ¿Δ¡ E) ¿ρ∧β¡ n
    filter = ⥌𝕊,f↦𝕊.extract(¬○f,⠤𝔸,⠶𝕂,β=✗,Δ=✗)
    
    ⊢ P(𝕊):
        clc = ⥌x,c="BL"↦getattr(Z,c)+x+Zᵂ
        ML = 󰲡x🃌-←(Zᵂ,Zᴮᴸ,Zᴿᴱ,Zᵈᴮᴸ)ᴍk↦x.count(k)⋅🃌k󰅂Σ0
        ⊢ box(x):
            (o, c), O, C = ‹[] ⎡⎢⎣ ⎤⎥⎦›⍭ᴍ²(󰲡clc(x,"dBL"))
            x = x.split←𝗻
            ¿🃌x≡1: ↪‹⟦o⟧⟦x₀⟧⟦c⟧›
            ms = xᴍML→⤉
            ↪ 𝗻.join(x ᙡ ꟿ󰲥(O[n≔1-x≅□+z≅□]+y+(ms-ML(y))⋅𝘀+Cₙ))
        ¿¬←𝕊ᐹ𝐍: ↪ᔐ∘𝕊
        ∅ = clc(␛∅, "RE")
        nam = (𝕊ᵗ.P¿𝕊ᵗᐹ𝐍¡ᔐ∘𝕊ᵗ) ∨ ∅
        start = box∘nam

        (╴,╮), m0, m1, m2 = ‹─┬ ┬─ ├╰ │ ›⍭ᴍ²clc

        ¿𝕊🃌¬: ↪ ‹⟦start⟧⟦╴⟧⟦∅⟧›
        
        slns = start.split(𝗻)
        res, ml = 𝗻.join(slns﹕₋₁), ML(lne≔slns₋₁)
        ∀i,z∈↨𝕊:
            l = (z.P¿zᐹ𝐍¡ᔐ∘z).split←𝗻
            e = i≡𝕊🃌-1
            l₀  = (m1¿i¡m0)ₑ+l₀
            l₁﹕ =   l₁﹕ᴍ󰲡m2ₑ+x
            l = lᴍ󰲡ml⋅𝘀+x
            ¿¬i:
                pre = ‹⟦start⟧›
                l₀ = pre + 𝘀⋅(ml-ML(pre)) + l₀[ml:]
            res += 𝗻.join(l) + ¬e⋅𝗻
        ↪ res

__exports__ = ␛𝐍,