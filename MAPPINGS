# Doc:
#   Format:
#    "command ␉ arg1 ␉ arg2 ␉ …"
#    🝇 # acts as delimiter
#   Commands:
#     E: enclose with spaces
#     S: text subsitution aka replacement
#     Y: pairwise text subsitution
#     R: regex subsitution
#   Arg syntax:
#     ␠: Space
#     ␤: Newline

# Some chars used:
#   ␛ (for escaping following char)
#   <superscripts> .stuff
#   <  subscripts> [stuff]
#   ¯ᐦ 
#   ⠤⠶⨯⌃⟳➰⥀⮂❟←→𝚲𝕋𝔽𝔸𝕂ℂ𝕊⤉⤈Σ⨳☾🃌⛶ᴙᴍζ↕↨🜌⍟⇧⇳πτî∅□∧∨∈∉¬⋀⋁
#   ①②③⁅⁆⮌⨡¿¡⸘∀🢖≔≤≥≡≠⋄⥌↦↪⊢»↺⇥…≾⩫
#   󰆴
#   Deprecated: ⑴⑵⑶˲﹐⚇∘ƛ𝝺⎊≟λ
# TODO:
#   Make syntax real
#   Add reduce
#   Cool chars: [Note: Font Manager is good at finding these]
#     ⌘ℿ〚〛⟨⟩⩇⌢⌣⏜⏝≬𝄞⋿⦁⦂⦇⦈⦉⦊⨾⩤⩥⨝϶⛶⛯
#     ᐜᐝᐞᐟᐠᐡᐢᐣᐤᐥᐨᐩᐪ
#      󰔟󰆏󰆍󰆒󰸇󰉉󰅌󰆏󰄷󰄶󰈝󰈔󰈕󰴜󰏢󰈋󰋋 󰈸󰠩󰥓
#     󰩹󰩺 
#     󰣡󰣢󰣣󰣤󰣥󰣦󰣧 󰫃󰫄󰫅󰫆󰫇󰫈 󰯁󰯂󰯃
#     󰎣󰎦󰎩󰎬󰎮󰎰󰎵󰎸󰎻󰎾 󰲡󰲣󰲥󰲧󰲩󰲫󰲭󰲯󰲱
#     󱣬󰈴󰈲󰈳 󰒼 󰒽 󰨑󱓝 󰘣󰘡 󰅁󰅂 
#     󰅲 󰅪 󰅩 󰅴
# 
#     Idea: 𝚲Σ𝔸󰈲󰲡1❟∈x
# Actually: 𝚲(󰲡1❟∈x)󰈲Σ𝔸

R ␉ (֎[^֎]*֎)|(🟑[^🟑]*🟑) ␉

E ␉ 𝕋 ␉ True
E ␉ 𝔽 ␉ False
E ␉ ⤉ ␉ max
E ␉ ⤈ ␉ min
E ␉ ⋀ ␉ all
E ␉ ⋁ ␉ any
E ␉ Ω ␉ class
E ␉ ⨳ ␉ ASSERT_
E ␉ ☾ ␉ print
E ␉ 🃌 ␉ len
E ␉ Σ ␉ sum
E ␉ Π ␉ PROD_
E ␉ ζ ␉ zip
E ␉ ſ ␉ FOLD_
E ␉ ᴙ ␉ REVERSE_
E ␉ ᴍ ␉ map
E ␉ ⛶ ␉ enlist
E ␉ ↕ ␉ range
E ␉ ↨ ␉ enumerate
E ␉ 🜌 ␉ setattrs

E ␉ ⚇ ␉ magic_list
# holdover ↑
E ␉ ƨ ␉ magic_str
E ␉ 𝒻𝓈 ␉ magic_frozenset
E ␉ 𝓈 ␉ magic_set
E ␉ 𝒾 ␉ magic_int
E ␉ 𝒻 ␉ magic_float
E ␉ 𝓁 ␉ magic_list
E ␉ 𝓉 ␉ magic_tuple
E ␉ 𝒹 ␉ magic_dict

E ␉ ⍟ ␉ DEGEN_
E ␉ ⇧ ␉ skinniside_z
E ␉ ⇳ ␉ skinniside_b
E ␉ ⍭ ␉ split_string
E ␉ π ␉ MATH_PI
E ␉ τ ␉ MATH_TAU
E ␉ î ␉ COMPLEX_UNIT
E ␉ ∅ ␉ set()
E ␉ □ ␉ None
E ␉ ᐦ ␉ EMPTY_STRING
E ␉ ∧ ␉ and
E ␉ ∨ ␉ or
E ␉ ∈ ␉ in
E ␉ ∉ ␉ not in
E ␉ ¬ ␉ not
E ␉ λ ␉ lambda
E ␉ ⁅ ␉ DEGEN_(
E ␉ ⮌ ␉ from
E ␉ ⨡ ␉ import
E ␉ ␡ ␉ del
E ␉ 󰆴 ␉ del
E ␉ ¿ ␉ if
E ␉ ¡ ␉ else
E ␉ ⸘ ␉ elif
E ␉ ∀ ␉ for
E ␉ 𝔸 ␉ ARGS_
E ␉ 𝕂 ␉ KWARGS_
E ␉ ℂ ␉ SPECIAL_CLASS_
E ␉ 𝕊 ␉ SPECIAL_SELF_
E ␉ 🢖 ␉ SPECIAL_SELF_.
E ␉ ℵ ␉ Namespace
E ␉ 𐞂 ␉ **OP_TO_UNARY_
E ␉ 𐞁 ␉ **OP_TO_BNARY_

S ␉ ⁆ ␉ )
S ␉ ≔ ␉ :=
S ␉ ≤ ␉ <=
S ␉ ≥ ␉ >=
S ␉ ≡ ␉ ==
S ␉ ≠ ␉ !=
S ␉ ¯ ␉ -
S ␉ ⋄ ␉ `$
S ␉ ⥌ ␉ <$
S ␉ ↦ ␉ $>
S ␉ ↪ ␉ return␠
S ␉ ⊢ ␉ def␠
S ␉ » ␉ assert␠
S ␉ ↺ ␉ continue␠
S ␉ ⇥ ␉ break␠
S ␉ ≟ ␉ case␠
S ␉ ⎊ ␉ match␠
S ␉ … ␉ **range_binary**
S ␉ ≾ ␉ **isinstance**
S ␉ ⩫ ␉ |other|
S ␉ ‹ ␉ ␠f"""
S ␉ › ␉ """␠

R ␉ [⑴①] ␉ <$x$>
R ␉ [⑵②] ␉ <$x,y$>
R ␉ [⑶③] ␉ <$x,y,z$>
R ␉ [𝚲ƛ𝝺] ␉ <$$>
R ␉ [⠤⨯] ␉ *
R ␉ [⠶⌃] ␉ **
R ␉ [⟳➰] ␉ while␠
R ␉ [⥀⮂] ␉ yield␠

R ␉ (.)❟ ␉ "\1"

R ␉ ([ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘᵛʷˣʸᶻᴬᴮ󰀂ᴰᴱ󰀅ᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾ󰀐ᴿ󰀒ᵀᵁⱽᵂ󰀗󰀘󰀙󰁌󰁍󰁎󰁏󰁐󰁑󰁒󰁓◌󰁔󰁕󰁖󰁗󰁘󰁙󰁛󰁜󰁝󰁞󰁟󰁠󰁡󰁢󰁣󰁤◌◌󰀶󰀷◌󰀻󰁁󰁃󰁅󰁈󰁊󰁋⁰¹²³⁴⁵⁶⁷⁸⁹◌󰁱󰂂󰂁󰁲◌ꜝ⁺⁻ᐟ⁼⁽⁾]{1,}) ␉ .\1␠
Y ␉   ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘᵛʷˣʸᶻᴬᴮ󰀂ᴰᴱ󰀅ᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾ󰀐ᴿ󰀒ᵀᵁⱽᵂ󰀗󰀘󰀙󰁌󰁍󰁎󰁏󰁐󰁑󰁒󰁓◌󰁔󰁕󰁖󰁗󰁘󰁙󰁛󰁜󰁝󰁞󰁟󰁠󰁡󰁢󰁣󰁤◌◌󰀶󰀷◌󰀻󰁁󰁃󰁅󰁈󰁊󰁋⁰¹²³⁴⁵⁶⁷⁸⁹◌󰁱󰂂󰂁󰁲◌ꜝ⁺⁻ᐟ⁼⁽⁾ ␉ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθϑικλμνξπρςστυφχψω∂ϕΓΔ∇ΘΞΠΣΦΨΩ0123456789:,<>;?!+-/*=()
R ␉ ([ₐₑₕᵢⱼₖₗₘₙ󰂼ₚᵣₛₜᵤᵥₓ󰂓󰂔󰂕󰂖󰂗󰂘󰂙󰂚󰂛󰂜󰂝󰂞󰂟󰂠󰂡󰂢󰂣󰂤󰂥󰂦󰂧󰂨󰂩󰂪󰂫󰂬󰃤󰃥󰃦󰃧󰃨󰃩󰃪󰃫◌󰃬󰃭󰃮󰃯󰃰󰃱󰃳󰃴󰃵󰃶󰃷󰃸󰃹󰃺󰃻󰃼◌◌󰃎󰃏◌󰃓󰃙󰃛󰃝󰃠󰃢󰃣₀₁₂₃₄₅₆₇₈₉﹕󰄎󰄟󰄞󰄏﹖◌₊₋⸝₌₍₎﹠﹩﹪]{1,}) ␉ [\1]
Y ␉   ₐₑₕᵢⱼₖₗₘₙ󰂼ₚᵣₛₜᵤᵥₓ󰂓󰂔󰂕󰂖󰂗󰂘󰂙󰂚󰂛󰂜󰂝󰂞󰂟󰂠󰂡󰂢󰂣󰂤󰂥󰂦󰂧󰂨󰂩󰂪󰂫󰂬󰃤󰃥󰃦󰃧󰃨󰃩󰃪󰃫◌󰃬󰃭󰃮󰃯󰃰󰃱󰃳󰃴󰃵󰃶󰃷󰃸󰃹󰃺󰃻󰃼◌◌󰃎󰃏◌󰃓󰃙󰃛󰃝󰃠󰃢󰃣₀₁₂₃₄₅₆₇₈₉﹕󰄎󰄟󰄞󰄏﹖◌₊₋⸝₌₍₎﹠﹩﹪ ␉ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZαβγδεζηθϑικλμνξπρςστυφχψω∂ϕΓΔ∇ΘΞΠΣΦΨΩ0123456789:,<>;?!+-/*=()&$%