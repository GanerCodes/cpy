# ␉ ⌘ℿ〚〛⟨⟩⩇⌢⌣⏜⏝𝟶≬𝄞⋿⦁⦂⦇⦈⦉⦊⨾⩤⩥⨝϶⛶⛯
# ␉ ᐜᐝᐞᐟᐠᐡᐢᐣᐤᐥᐨᐩᐪ
# ␉ ⠤⠶⨯⌃⟳➰⥀⮂❟∘𐞁ʽ¨←→𝚲ƛ𝝺𝕋𝔽𝔸𝕂ℂ𝕊⤉⤈⋀⋁Σ☾🃌⨳ᴍ⚇ζ↕↨🜌⍟⇧⇳πτî∅□ᐦ∧∨∈∉¬λ⁅⁆⮌⨡¿¡⸘∀🢖≔≤≥≡≠¯⋄⥌↦⑴⑵⑶↪⊢»↺⇥≟⎊…≾⩫ₓᵧ¹²
# ␉ ₀₁₂₃₄₅₆₇₈₉﹕˲﹐₋₊
# ␉ TODO: add reduce

# ␉ "␉": delimited
# ␉ "␠": space
# ␉ "␤": newline

R ␉ (֎[^֎]*֎)|(🟑[^🟑]*🟑) ␉

S_S ␉ 𝕋 ␉ True
S_S ␉ 𝔽 ␉ False
S_S ␉ ⤉ ␉ max
S_S ␉ ⤈ ␉ min
S_S ␉ ⋀ ␉ all
S_S ␉ ⋁ ␉ any
S_S ␉ Σ ␉ sum
S_S ␉ Π ␉ prod
S_S ␉ Ω ␉ class
S_S ␉ ☾ ␉ print
S_S ␉ 🃌 ␉ len
S_S ␉ ⨳ ␉ ASSERT_
S_S ␉ ᴍ ␉ map
S_S ␉ ⚇ ␉ list
S_S ␉ ζ ␉ zip
S_S ␉ ↕ ␉ range
S_S ␉ ↨ ␉ enumerate
S_S ␉ 🜌 ␉ setattrs
S_S ␉ ⍟ ␉ DEGEN_
S_S ␉ ⇧ ␉ skinniside_z
S_S ␉ ⇳ ␉ skinniside_b
S_S ␉ ⍭ ␉ split_string
S_S ␉ π ␉ MATH_PI
S_S ␉ τ ␉ MATH_TAU
S_S ␉ î ␉ COMPLEX_UNIT
S_S ␉ ∅ ␉ set()
S_S ␉ □ ␉ None
S_S ␉ ᐦ ␉ EMPTY_STRING
S_S ␉ ∧ ␉ and
S_S ␉ ∨ ␉ or
S_S ␉ ∈ ␉ in
S_S ␉ ∉ ␉ not in
S_S ␉ ¬ ␉ not
S_S ␉ λ ␉ lambda
S_S ␉ ⁅ ␉ DEGEN_(
S_S ␉ ⮌ ␉ from
S_S ␉ ⨡ ␉ import
S_S ␉ ␡ ␉ del
S_S ␉ ¿ ␉ if
S_S ␉ ¡ ␉ else
S_S ␉ ⸘ ␉ elif
S_S ␉ ∀ ␉ for
S_S ␉ 𝔸 ␉ ARGS_
S_S ␉ 𝕂 ␉ KWARGS_
S_S ␉ ℂ ␉ SPECIAL_CLASS_
S_S ␉ 𝕊 ␉ SPECIAL_SELF_
S_S ␉ 🢖 ␉ SPECIAL_SELF_.
S_S ␉ ℵ ␉ Namespace

S ␉ ⁆ ␉ )
S ␉ ≔ ␉ :=
S ␉ ≤ ␉ <=
S ␉ ≥ ␉ >=
S ␉ ≡ ␉ ==
S ␉ ≠ ␉ !=
S ␉ ¯ ␉ -
S ␉ ⋄ ␉ `$
S ␉ ⥌ ␉ <$
S ␉ ↦ ␉ $>
S ␉ ⑴ ␉ <$x$>
S ␉ ⑵ ␉ <$x,y$>
S ␉ ⑶ ␉ <$x,y,z$>
S ␉ ↪ ␉ return␠
S ␉ ⊢ ␉ def␠
S ␉ » ␉ assert␠
S ␉ ↺ ␉ continue␠
S ␉ ⇥ ␉ break␠
S ␉ ≟ ␉ case␠
S ␉ ⎊ ␉ match␠
S ␉ … ␉ **range_binary**
S ␉ ≾ ␉ **isinstance**
S ␉ ⩫ ␉ |other|
S ␉ ₓ ␉ .x␠
S ␉ ᵧ ␉ .y␠
S ␉ ‹ ␉ ␠f"""
S ␉ › ␉ """␠

R ␉ [𝚲ƛ𝝺] ␉ <$$>
R ␉ [⠤⨯] ␉ *
R ␉ [⠶⌃] ␉ **
R ␉ [⟳➰] ␉ while
R ␉ [⥀⮂] ␉ yield

R ␉ (.)❟ ␉ "\1"
R ␉ ([₀₁₂₃₄₅₆₇₈₉﹕˲﹐₋₊]{1,}) ␉ [\0]
Y ␉ ₀₁₂₃₄₅₆₇₈₉﹕˲﹐₋₊⸝ ␉ 0123456789::,-+/
R ␉ ∘ ␉ ⶦOP_COMPOSE_ⶦ
R ␉ ⶦⶦ ␉ ⶦ
S ␉ ¹ ␉ **OP_TO_UNARY_
S ␉ ² ␉ **OP_TO_BNARY_
S ␉ 𐞁 ␉ ⶾOP_SWAP_ⶦ
S ␉ ʽ ␉ ⶾOP_DUP_
S ␉ ¨ ␉ ⶾOP_METAMAP_
S ␉ ⶦⶾ ␉ ⶾ
R ␉ ([ⶦⶾ]*)→ ␉ \>\>
R ␉ ←([ⶦⶾ]*) ␉ \<\<
S ␉ ⶦ ␉ +
S ␉ ⶾ ␉ @